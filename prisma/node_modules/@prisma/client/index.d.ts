
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Projeto
 * 
 */
export type Projeto = $Result.DefaultSelection<Prisma.$ProjetoPayload>
/**
 * Model Politico
 * 
 */
export type Politico = $Result.DefaultSelection<Prisma.$PoliticoPayload>
/**
 * Model Partido
 * 
 */
export type Partido = $Result.DefaultSelection<Prisma.$PartidoPayload>
/**
 * Model Estado
 * 
 */
export type Estado = $Result.DefaultSelection<Prisma.$EstadoPayload>
/**
 * Model DireitoViolado
 * 
 */
export type DireitoViolado = $Result.DefaultSelection<Prisma.$DireitoVioladoPayload>
/**
 * Model Ideologia
 * 
 */
export type Ideologia = $Result.DefaultSelection<Prisma.$IdeologiaPayload>
/**
 * Model Profissao
 * 
 */
export type Profissao = $Result.DefaultSelection<Prisma.$ProfissaoPayload>
/**
 * Model Esfera
 * 
 */
export type Esfera = $Result.DefaultSelection<Prisma.$EsferaPayload>
/**
 * Model Pauta
 * 
 */
export type Pauta = $Result.DefaultSelection<Prisma.$PautaPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projetos
 * const projetos = await prisma.projeto.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projetos
   * const projetos = await prisma.projeto.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.projeto`: Exposes CRUD operations for the **Projeto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projetos
    * const projetos = await prisma.projeto.findMany()
    * ```
    */
  get projeto(): Prisma.ProjetoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.politico`: Exposes CRUD operations for the **Politico** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Politicos
    * const politicos = await prisma.politico.findMany()
    * ```
    */
  get politico(): Prisma.PoliticoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partido`: Exposes CRUD operations for the **Partido** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partidos
    * const partidos = await prisma.partido.findMany()
    * ```
    */
  get partido(): Prisma.PartidoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.estado`: Exposes CRUD operations for the **Estado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Estados
    * const estados = await prisma.estado.findMany()
    * ```
    */
  get estado(): Prisma.EstadoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.direitoViolado`: Exposes CRUD operations for the **DireitoViolado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DireitoViolados
    * const direitoViolados = await prisma.direitoViolado.findMany()
    * ```
    */
  get direitoViolado(): Prisma.DireitoVioladoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ideologia`: Exposes CRUD operations for the **Ideologia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ideologias
    * const ideologias = await prisma.ideologia.findMany()
    * ```
    */
  get ideologia(): Prisma.IdeologiaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profissao`: Exposes CRUD operations for the **Profissao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profissaos
    * const profissaos = await prisma.profissao.findMany()
    * ```
    */
  get profissao(): Prisma.ProfissaoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.esfera`: Exposes CRUD operations for the **Esfera** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Esferas
    * const esferas = await prisma.esfera.findMany()
    * ```
    */
  get esfera(): Prisma.EsferaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pauta`: Exposes CRUD operations for the **Pauta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pautas
    * const pautas = await prisma.pauta.findMany()
    * ```
    */
  get pauta(): Prisma.PautaDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Projeto: 'Projeto',
    Politico: 'Politico',
    Partido: 'Partido',
    Estado: 'Estado',
    DireitoViolado: 'DireitoViolado',
    Ideologia: 'Ideologia',
    Profissao: 'Profissao',
    Esfera: 'Esfera',
    Pauta: 'Pauta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "projeto" | "politico" | "partido" | "estado" | "direitoViolado" | "ideologia" | "profissao" | "esfera" | "pauta"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Projeto: {
        payload: Prisma.$ProjetoPayload<ExtArgs>
        fields: Prisma.ProjetoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjetoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjetoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>
          }
          findFirst: {
            args: Prisma.ProjetoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjetoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>
          }
          findMany: {
            args: Prisma.ProjetoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>[]
          }
          create: {
            args: Prisma.ProjetoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>
          }
          createMany: {
            args: Prisma.ProjetoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjetoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>[]
          }
          delete: {
            args: Prisma.ProjetoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>
          }
          update: {
            args: Prisma.ProjetoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>
          }
          deleteMany: {
            args: Prisma.ProjetoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjetoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjetoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>[]
          }
          upsert: {
            args: Prisma.ProjetoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjetoPayload>
          }
          aggregate: {
            args: Prisma.ProjetoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjeto>
          }
          groupBy: {
            args: Prisma.ProjetoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjetoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjetoCountArgs<ExtArgs>
            result: $Utils.Optional<ProjetoCountAggregateOutputType> | number
          }
        }
      }
      Politico: {
        payload: Prisma.$PoliticoPayload<ExtArgs>
        fields: Prisma.PoliticoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PoliticoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PoliticoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>
          }
          findFirst: {
            args: Prisma.PoliticoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PoliticoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>
          }
          findMany: {
            args: Prisma.PoliticoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>[]
          }
          create: {
            args: Prisma.PoliticoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>
          }
          createMany: {
            args: Prisma.PoliticoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PoliticoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>[]
          }
          delete: {
            args: Prisma.PoliticoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>
          }
          update: {
            args: Prisma.PoliticoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>
          }
          deleteMany: {
            args: Prisma.PoliticoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PoliticoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PoliticoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>[]
          }
          upsert: {
            args: Prisma.PoliticoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PoliticoPayload>
          }
          aggregate: {
            args: Prisma.PoliticoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePolitico>
          }
          groupBy: {
            args: Prisma.PoliticoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PoliticoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PoliticoCountArgs<ExtArgs>
            result: $Utils.Optional<PoliticoCountAggregateOutputType> | number
          }
        }
      }
      Partido: {
        payload: Prisma.$PartidoPayload<ExtArgs>
        fields: Prisma.PartidoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PartidoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PartidoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>
          }
          findFirst: {
            args: Prisma.PartidoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PartidoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>
          }
          findMany: {
            args: Prisma.PartidoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>[]
          }
          create: {
            args: Prisma.PartidoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>
          }
          createMany: {
            args: Prisma.PartidoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PartidoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>[]
          }
          delete: {
            args: Prisma.PartidoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>
          }
          update: {
            args: Prisma.PartidoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>
          }
          deleteMany: {
            args: Prisma.PartidoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PartidoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PartidoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>[]
          }
          upsert: {
            args: Prisma.PartidoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PartidoPayload>
          }
          aggregate: {
            args: Prisma.PartidoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartido>
          }
          groupBy: {
            args: Prisma.PartidoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartidoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PartidoCountArgs<ExtArgs>
            result: $Utils.Optional<PartidoCountAggregateOutputType> | number
          }
        }
      }
      Estado: {
        payload: Prisma.$EstadoPayload<ExtArgs>
        fields: Prisma.EstadoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EstadoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EstadoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findFirst: {
            args: Prisma.EstadoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EstadoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          findMany: {
            args: Prisma.EstadoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          create: {
            args: Prisma.EstadoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          createMany: {
            args: Prisma.EstadoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EstadoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          delete: {
            args: Prisma.EstadoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          update: {
            args: Prisma.EstadoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          deleteMany: {
            args: Prisma.EstadoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EstadoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EstadoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>[]
          }
          upsert: {
            args: Prisma.EstadoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EstadoPayload>
          }
          aggregate: {
            args: Prisma.EstadoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEstado>
          }
          groupBy: {
            args: Prisma.EstadoGroupByArgs<ExtArgs>
            result: $Utils.Optional<EstadoGroupByOutputType>[]
          }
          count: {
            args: Prisma.EstadoCountArgs<ExtArgs>
            result: $Utils.Optional<EstadoCountAggregateOutputType> | number
          }
        }
      }
      DireitoViolado: {
        payload: Prisma.$DireitoVioladoPayload<ExtArgs>
        fields: Prisma.DireitoVioladoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DireitoVioladoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DireitoVioladoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>
          }
          findFirst: {
            args: Prisma.DireitoVioladoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DireitoVioladoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>
          }
          findMany: {
            args: Prisma.DireitoVioladoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>[]
          }
          create: {
            args: Prisma.DireitoVioladoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>
          }
          createMany: {
            args: Prisma.DireitoVioladoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DireitoVioladoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>[]
          }
          delete: {
            args: Prisma.DireitoVioladoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>
          }
          update: {
            args: Prisma.DireitoVioladoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>
          }
          deleteMany: {
            args: Prisma.DireitoVioladoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DireitoVioladoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DireitoVioladoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>[]
          }
          upsert: {
            args: Prisma.DireitoVioladoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DireitoVioladoPayload>
          }
          aggregate: {
            args: Prisma.DireitoVioladoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDireitoViolado>
          }
          groupBy: {
            args: Prisma.DireitoVioladoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DireitoVioladoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DireitoVioladoCountArgs<ExtArgs>
            result: $Utils.Optional<DireitoVioladoCountAggregateOutputType> | number
          }
        }
      }
      Ideologia: {
        payload: Prisma.$IdeologiaPayload<ExtArgs>
        fields: Prisma.IdeologiaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IdeologiaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IdeologiaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>
          }
          findFirst: {
            args: Prisma.IdeologiaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IdeologiaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>
          }
          findMany: {
            args: Prisma.IdeologiaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>[]
          }
          create: {
            args: Prisma.IdeologiaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>
          }
          createMany: {
            args: Prisma.IdeologiaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IdeologiaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>[]
          }
          delete: {
            args: Prisma.IdeologiaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>
          }
          update: {
            args: Prisma.IdeologiaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>
          }
          deleteMany: {
            args: Prisma.IdeologiaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IdeologiaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IdeologiaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>[]
          }
          upsert: {
            args: Prisma.IdeologiaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdeologiaPayload>
          }
          aggregate: {
            args: Prisma.IdeologiaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIdeologia>
          }
          groupBy: {
            args: Prisma.IdeologiaGroupByArgs<ExtArgs>
            result: $Utils.Optional<IdeologiaGroupByOutputType>[]
          }
          count: {
            args: Prisma.IdeologiaCountArgs<ExtArgs>
            result: $Utils.Optional<IdeologiaCountAggregateOutputType> | number
          }
        }
      }
      Profissao: {
        payload: Prisma.$ProfissaoPayload<ExtArgs>
        fields: Prisma.ProfissaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfissaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfissaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>
          }
          findFirst: {
            args: Prisma.ProfissaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfissaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>
          }
          findMany: {
            args: Prisma.ProfissaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>[]
          }
          create: {
            args: Prisma.ProfissaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>
          }
          createMany: {
            args: Prisma.ProfissaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfissaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>[]
          }
          delete: {
            args: Prisma.ProfissaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>
          }
          update: {
            args: Prisma.ProfissaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>
          }
          deleteMany: {
            args: Prisma.ProfissaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfissaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfissaoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>[]
          }
          upsert: {
            args: Prisma.ProfissaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfissaoPayload>
          }
          aggregate: {
            args: Prisma.ProfissaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfissao>
          }
          groupBy: {
            args: Prisma.ProfissaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfissaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfissaoCountArgs<ExtArgs>
            result: $Utils.Optional<ProfissaoCountAggregateOutputType> | number
          }
        }
      }
      Esfera: {
        payload: Prisma.$EsferaPayload<ExtArgs>
        fields: Prisma.EsferaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EsferaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EsferaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>
          }
          findFirst: {
            args: Prisma.EsferaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EsferaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>
          }
          findMany: {
            args: Prisma.EsferaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>[]
          }
          create: {
            args: Prisma.EsferaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>
          }
          createMany: {
            args: Prisma.EsferaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EsferaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>[]
          }
          delete: {
            args: Prisma.EsferaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>
          }
          update: {
            args: Prisma.EsferaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>
          }
          deleteMany: {
            args: Prisma.EsferaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EsferaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EsferaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>[]
          }
          upsert: {
            args: Prisma.EsferaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EsferaPayload>
          }
          aggregate: {
            args: Prisma.EsferaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEsfera>
          }
          groupBy: {
            args: Prisma.EsferaGroupByArgs<ExtArgs>
            result: $Utils.Optional<EsferaGroupByOutputType>[]
          }
          count: {
            args: Prisma.EsferaCountArgs<ExtArgs>
            result: $Utils.Optional<EsferaCountAggregateOutputType> | number
          }
        }
      }
      Pauta: {
        payload: Prisma.$PautaPayload<ExtArgs>
        fields: Prisma.PautaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PautaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PautaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>
          }
          findFirst: {
            args: Prisma.PautaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PautaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>
          }
          findMany: {
            args: Prisma.PautaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>[]
          }
          create: {
            args: Prisma.PautaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>
          }
          createMany: {
            args: Prisma.PautaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PautaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>[]
          }
          delete: {
            args: Prisma.PautaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>
          }
          update: {
            args: Prisma.PautaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>
          }
          deleteMany: {
            args: Prisma.PautaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PautaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PautaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>[]
          }
          upsert: {
            args: Prisma.PautaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PautaPayload>
          }
          aggregate: {
            args: Prisma.PautaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePauta>
          }
          groupBy: {
            args: Prisma.PautaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PautaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PautaCountArgs<ExtArgs>
            result: $Utils.Optional<PautaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    projeto?: ProjetoOmit
    politico?: PoliticoOmit
    partido?: PartidoOmit
    estado?: EstadoOmit
    direitoViolado?: DireitoVioladoOmit
    ideologia?: IdeologiaOmit
    profissao?: ProfissaoOmit
    esfera?: EsferaOmit
    pauta?: PautaOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjetoCountOutputType
   */

  export type ProjetoCountOutputType = {
    direitosViolados: number
    ideologias: number
    partidos: number
    autores: number
  }

  export type ProjetoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    direitosViolados?: boolean | ProjetoCountOutputTypeCountDireitosVioladosArgs
    ideologias?: boolean | ProjetoCountOutputTypeCountIdeologiasArgs
    partidos?: boolean | ProjetoCountOutputTypeCountPartidosArgs
    autores?: boolean | ProjetoCountOutputTypeCountAutoresArgs
  }

  // Custom InputTypes
  /**
   * ProjetoCountOutputType without action
   */
  export type ProjetoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjetoCountOutputType
     */
    select?: ProjetoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjetoCountOutputType without action
   */
  export type ProjetoCountOutputTypeCountDireitosVioladosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DireitoVioladoWhereInput
  }

  /**
   * ProjetoCountOutputType without action
   */
  export type ProjetoCountOutputTypeCountIdeologiasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdeologiaWhereInput
  }

  /**
   * ProjetoCountOutputType without action
   */
  export type ProjetoCountOutputTypeCountPartidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidoWhereInput
  }

  /**
   * ProjetoCountOutputType without action
   */
  export type ProjetoCountOutputTypeCountAutoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PoliticoWhereInput
  }


  /**
   * Count Type PoliticoCountOutputType
   */

  export type PoliticoCountOutputType = {
    profissoes: number
    projetos: number
  }

  export type PoliticoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profissoes?: boolean | PoliticoCountOutputTypeCountProfissoesArgs
    projetos?: boolean | PoliticoCountOutputTypeCountProjetosArgs
  }

  // Custom InputTypes
  /**
   * PoliticoCountOutputType without action
   */
  export type PoliticoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PoliticoCountOutputType
     */
    select?: PoliticoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PoliticoCountOutputType without action
   */
  export type PoliticoCountOutputTypeCountProfissoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfissaoWhereInput
  }

  /**
   * PoliticoCountOutputType without action
   */
  export type PoliticoCountOutputTypeCountProjetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
  }


  /**
   * Count Type PartidoCountOutputType
   */

  export type PartidoCountOutputType = {
    politicos: number
    projetos: number
  }

  export type PartidoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    politicos?: boolean | PartidoCountOutputTypeCountPoliticosArgs
    projetos?: boolean | PartidoCountOutputTypeCountProjetosArgs
  }

  // Custom InputTypes
  /**
   * PartidoCountOutputType without action
   */
  export type PartidoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartidoCountOutputType
     */
    select?: PartidoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartidoCountOutputType without action
   */
  export type PartidoCountOutputTypeCountPoliticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PoliticoWhereInput
  }

  /**
   * PartidoCountOutputType without action
   */
  export type PartidoCountOutputTypeCountProjetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
  }


  /**
   * Count Type EstadoCountOutputType
   */

  export type EstadoCountOutputType = {
    politicos: number
  }

  export type EstadoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    politicos?: boolean | EstadoCountOutputTypeCountPoliticosArgs
  }

  // Custom InputTypes
  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EstadoCountOutputType
     */
    select?: EstadoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EstadoCountOutputType without action
   */
  export type EstadoCountOutputTypeCountPoliticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PoliticoWhereInput
  }


  /**
   * Count Type DireitoVioladoCountOutputType
   */

  export type DireitoVioladoCountOutputType = {
    projetos: number
  }

  export type DireitoVioladoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | DireitoVioladoCountOutputTypeCountProjetosArgs
  }

  // Custom InputTypes
  /**
   * DireitoVioladoCountOutputType without action
   */
  export type DireitoVioladoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoVioladoCountOutputType
     */
    select?: DireitoVioladoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DireitoVioladoCountOutputType without action
   */
  export type DireitoVioladoCountOutputTypeCountProjetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
  }


  /**
   * Count Type IdeologiaCountOutputType
   */

  export type IdeologiaCountOutputType = {
    projetos: number
  }

  export type IdeologiaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | IdeologiaCountOutputTypeCountProjetosArgs
  }

  // Custom InputTypes
  /**
   * IdeologiaCountOutputType without action
   */
  export type IdeologiaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdeologiaCountOutputType
     */
    select?: IdeologiaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IdeologiaCountOutputType without action
   */
  export type IdeologiaCountOutputTypeCountProjetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
  }


  /**
   * Count Type ProfissaoCountOutputType
   */

  export type ProfissaoCountOutputType = {
    politicos: number
  }

  export type ProfissaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    politicos?: boolean | ProfissaoCountOutputTypeCountPoliticosArgs
  }

  // Custom InputTypes
  /**
   * ProfissaoCountOutputType without action
   */
  export type ProfissaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfissaoCountOutputType
     */
    select?: ProfissaoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfissaoCountOutputType without action
   */
  export type ProfissaoCountOutputTypeCountPoliticosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PoliticoWhereInput
  }


  /**
   * Count Type EsferaCountOutputType
   */

  export type EsferaCountOutputType = {
    projetos: number
  }

  export type EsferaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | EsferaCountOutputTypeCountProjetosArgs
  }

  // Custom InputTypes
  /**
   * EsferaCountOutputType without action
   */
  export type EsferaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EsferaCountOutputType
     */
    select?: EsferaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EsferaCountOutputType without action
   */
  export type EsferaCountOutputTypeCountProjetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
  }


  /**
   * Count Type PautaCountOutputType
   */

  export type PautaCountOutputType = {
    projetos: number
  }

  export type PautaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | PautaCountOutputTypeCountProjetosArgs
  }

  // Custom InputTypes
  /**
   * PautaCountOutputType without action
   */
  export type PautaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PautaCountOutputType
     */
    select?: PautaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PautaCountOutputType without action
   */
  export type PautaCountOutputTypeCountProjetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Projeto
   */

  export type AggregateProjeto = {
    _count: ProjetoCountAggregateOutputType | null
    _min: ProjetoMinAggregateOutputType | null
    _max: ProjetoMaxAggregateOutputType | null
  }

  export type ProjetoMinAggregateOutputType = {
    id: string | null
    ano: string | null
    ementa: string | null
    pautaId: string | null
    esferaId: string | null
    numeroPl: string | null
    justificativa: string | null
  }

  export type ProjetoMaxAggregateOutputType = {
    id: string | null
    ano: string | null
    ementa: string | null
    pautaId: string | null
    esferaId: string | null
    numeroPl: string | null
    justificativa: string | null
  }

  export type ProjetoCountAggregateOutputType = {
    id: number
    ano: number
    ementa: number
    pautaId: number
    esferaId: number
    numeroPl: number
    justificativa: number
    _all: number
  }


  export type ProjetoMinAggregateInputType = {
    id?: true
    ano?: true
    ementa?: true
    pautaId?: true
    esferaId?: true
    numeroPl?: true
    justificativa?: true
  }

  export type ProjetoMaxAggregateInputType = {
    id?: true
    ano?: true
    ementa?: true
    pautaId?: true
    esferaId?: true
    numeroPl?: true
    justificativa?: true
  }

  export type ProjetoCountAggregateInputType = {
    id?: true
    ano?: true
    ementa?: true
    pautaId?: true
    esferaId?: true
    numeroPl?: true
    justificativa?: true
    _all?: true
  }

  export type ProjetoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projeto to aggregate.
     */
    where?: ProjetoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     */
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjetoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projetos
    **/
    _count?: true | ProjetoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjetoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjetoMaxAggregateInputType
  }

  export type GetProjetoAggregateType<T extends ProjetoAggregateArgs> = {
        [P in keyof T & keyof AggregateProjeto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjeto[P]>
      : GetScalarType<T[P], AggregateProjeto[P]>
  }




  export type ProjetoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithAggregationInput | ProjetoOrderByWithAggregationInput[]
    by: ProjetoScalarFieldEnum[] | ProjetoScalarFieldEnum
    having?: ProjetoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjetoCountAggregateInputType | true
    _min?: ProjetoMinAggregateInputType
    _max?: ProjetoMaxAggregateInputType
  }

  export type ProjetoGroupByOutputType = {
    id: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
    _count: ProjetoCountAggregateOutputType | null
    _min: ProjetoMinAggregateOutputType | null
    _max: ProjetoMaxAggregateOutputType | null
  }

  type GetProjetoGroupByPayload<T extends ProjetoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjetoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjetoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjetoGroupByOutputType[P]>
            : GetScalarType<T[P], ProjetoGroupByOutputType[P]>
        }
      >
    >


  export type ProjetoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    ementa?: boolean
    pautaId?: boolean
    esferaId?: boolean
    numeroPl?: boolean
    justificativa?: boolean
    esfera?: boolean | EsferaDefaultArgs<ExtArgs>
    pauta?: boolean | PautaDefaultArgs<ExtArgs>
    direitosViolados?: boolean | Projeto$direitosVioladosArgs<ExtArgs>
    ideologias?: boolean | Projeto$ideologiasArgs<ExtArgs>
    partidos?: boolean | Projeto$partidosArgs<ExtArgs>
    autores?: boolean | Projeto$autoresArgs<ExtArgs>
    _count?: boolean | ProjetoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projeto"]>

  export type ProjetoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    ementa?: boolean
    pautaId?: boolean
    esferaId?: boolean
    numeroPl?: boolean
    justificativa?: boolean
    esfera?: boolean | EsferaDefaultArgs<ExtArgs>
    pauta?: boolean | PautaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projeto"]>

  export type ProjetoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ano?: boolean
    ementa?: boolean
    pautaId?: boolean
    esferaId?: boolean
    numeroPl?: boolean
    justificativa?: boolean
    esfera?: boolean | EsferaDefaultArgs<ExtArgs>
    pauta?: boolean | PautaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projeto"]>

  export type ProjetoSelectScalar = {
    id?: boolean
    ano?: boolean
    ementa?: boolean
    pautaId?: boolean
    esferaId?: boolean
    numeroPl?: boolean
    justificativa?: boolean
  }

  export type ProjetoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ano" | "ementa" | "pautaId" | "esferaId" | "numeroPl" | "justificativa", ExtArgs["result"]["projeto"]>
  export type ProjetoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    esfera?: boolean | EsferaDefaultArgs<ExtArgs>
    pauta?: boolean | PautaDefaultArgs<ExtArgs>
    direitosViolados?: boolean | Projeto$direitosVioladosArgs<ExtArgs>
    ideologias?: boolean | Projeto$ideologiasArgs<ExtArgs>
    partidos?: boolean | Projeto$partidosArgs<ExtArgs>
    autores?: boolean | Projeto$autoresArgs<ExtArgs>
    _count?: boolean | ProjetoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjetoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    esfera?: boolean | EsferaDefaultArgs<ExtArgs>
    pauta?: boolean | PautaDefaultArgs<ExtArgs>
  }
  export type ProjetoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    esfera?: boolean | EsferaDefaultArgs<ExtArgs>
    pauta?: boolean | PautaDefaultArgs<ExtArgs>
  }

  export type $ProjetoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Projeto"
    objects: {
      esfera: Prisma.$EsferaPayload<ExtArgs>
      pauta: Prisma.$PautaPayload<ExtArgs>
      direitosViolados: Prisma.$DireitoVioladoPayload<ExtArgs>[]
      ideologias: Prisma.$IdeologiaPayload<ExtArgs>[]
      partidos: Prisma.$PartidoPayload<ExtArgs>[]
      autores: Prisma.$PoliticoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ano: string
      ementa: string
      pautaId: string
      esferaId: string
      numeroPl: string
      justificativa: string
    }, ExtArgs["result"]["projeto"]>
    composites: {}
  }

  type ProjetoGetPayload<S extends boolean | null | undefined | ProjetoDefaultArgs> = $Result.GetResult<Prisma.$ProjetoPayload, S>

  type ProjetoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjetoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjetoCountAggregateInputType | true
    }

  export interface ProjetoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Projeto'], meta: { name: 'Projeto' } }
    /**
     * Find zero or one Projeto that matches the filter.
     * @param {ProjetoFindUniqueArgs} args - Arguments to find a Projeto
     * @example
     * // Get one Projeto
     * const projeto = await prisma.projeto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjetoFindUniqueArgs>(args: SelectSubset<T, ProjetoFindUniqueArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Projeto that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjetoFindUniqueOrThrowArgs} args - Arguments to find a Projeto
     * @example
     * // Get one Projeto
     * const projeto = await prisma.projeto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjetoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjetoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projeto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoFindFirstArgs} args - Arguments to find a Projeto
     * @example
     * // Get one Projeto
     * const projeto = await prisma.projeto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjetoFindFirstArgs>(args?: SelectSubset<T, ProjetoFindFirstArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projeto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoFindFirstOrThrowArgs} args - Arguments to find a Projeto
     * @example
     * // Get one Projeto
     * const projeto = await prisma.projeto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjetoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjetoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projetos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projetos
     * const projetos = await prisma.projeto.findMany()
     * 
     * // Get first 10 Projetos
     * const projetos = await prisma.projeto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projetoWithIdOnly = await prisma.projeto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjetoFindManyArgs>(args?: SelectSubset<T, ProjetoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Projeto.
     * @param {ProjetoCreateArgs} args - Arguments to create a Projeto.
     * @example
     * // Create one Projeto
     * const Projeto = await prisma.projeto.create({
     *   data: {
     *     // ... data to create a Projeto
     *   }
     * })
     * 
     */
    create<T extends ProjetoCreateArgs>(args: SelectSubset<T, ProjetoCreateArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projetos.
     * @param {ProjetoCreateManyArgs} args - Arguments to create many Projetos.
     * @example
     * // Create many Projetos
     * const projeto = await prisma.projeto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjetoCreateManyArgs>(args?: SelectSubset<T, ProjetoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projetos and returns the data saved in the database.
     * @param {ProjetoCreateManyAndReturnArgs} args - Arguments to create many Projetos.
     * @example
     * // Create many Projetos
     * const projeto = await prisma.projeto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projetos and only return the `id`
     * const projetoWithIdOnly = await prisma.projeto.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjetoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjetoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Projeto.
     * @param {ProjetoDeleteArgs} args - Arguments to delete one Projeto.
     * @example
     * // Delete one Projeto
     * const Projeto = await prisma.projeto.delete({
     *   where: {
     *     // ... filter to delete one Projeto
     *   }
     * })
     * 
     */
    delete<T extends ProjetoDeleteArgs>(args: SelectSubset<T, ProjetoDeleteArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Projeto.
     * @param {ProjetoUpdateArgs} args - Arguments to update one Projeto.
     * @example
     * // Update one Projeto
     * const projeto = await prisma.projeto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjetoUpdateArgs>(args: SelectSubset<T, ProjetoUpdateArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projetos.
     * @param {ProjetoDeleteManyArgs} args - Arguments to filter Projetos to delete.
     * @example
     * // Delete a few Projetos
     * const { count } = await prisma.projeto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjetoDeleteManyArgs>(args?: SelectSubset<T, ProjetoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projetos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projetos
     * const projeto = await prisma.projeto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjetoUpdateManyArgs>(args: SelectSubset<T, ProjetoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projetos and returns the data updated in the database.
     * @param {ProjetoUpdateManyAndReturnArgs} args - Arguments to update many Projetos.
     * @example
     * // Update many Projetos
     * const projeto = await prisma.projeto.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projetos and only return the `id`
     * const projetoWithIdOnly = await prisma.projeto.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjetoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjetoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Projeto.
     * @param {ProjetoUpsertArgs} args - Arguments to update or create a Projeto.
     * @example
     * // Update or create a Projeto
     * const projeto = await prisma.projeto.upsert({
     *   create: {
     *     // ... data to create a Projeto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projeto we want to update
     *   }
     * })
     */
    upsert<T extends ProjetoUpsertArgs>(args: SelectSubset<T, ProjetoUpsertArgs<ExtArgs>>): Prisma__ProjetoClient<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projetos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoCountArgs} args - Arguments to filter Projetos to count.
     * @example
     * // Count the number of Projetos
     * const count = await prisma.projeto.count({
     *   where: {
     *     // ... the filter for the Projetos we want to count
     *   }
     * })
    **/
    count<T extends ProjetoCountArgs>(
      args?: Subset<T, ProjetoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjetoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projeto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjetoAggregateArgs>(args: Subset<T, ProjetoAggregateArgs>): Prisma.PrismaPromise<GetProjetoAggregateType<T>>

    /**
     * Group by Projeto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjetoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjetoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjetoGroupByArgs['orderBy'] }
        : { orderBy?: ProjetoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjetoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjetoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Projeto model
   */
  readonly fields: ProjetoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Projeto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjetoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    esfera<T extends EsferaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EsferaDefaultArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pauta<T extends PautaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PautaDefaultArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    direitosViolados<T extends Projeto$direitosVioladosArgs<ExtArgs> = {}>(args?: Subset<T, Projeto$direitosVioladosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ideologias<T extends Projeto$ideologiasArgs<ExtArgs> = {}>(args?: Subset<T, Projeto$ideologiasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    partidos<T extends Projeto$partidosArgs<ExtArgs> = {}>(args?: Subset<T, Projeto$partidosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    autores<T extends Projeto$autoresArgs<ExtArgs> = {}>(args?: Subset<T, Projeto$autoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Projeto model
   */
  interface ProjetoFieldRefs {
    readonly id: FieldRef<"Projeto", 'String'>
    readonly ano: FieldRef<"Projeto", 'String'>
    readonly ementa: FieldRef<"Projeto", 'String'>
    readonly pautaId: FieldRef<"Projeto", 'String'>
    readonly esferaId: FieldRef<"Projeto", 'String'>
    readonly numeroPl: FieldRef<"Projeto", 'String'>
    readonly justificativa: FieldRef<"Projeto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Projeto findUnique
   */
  export type ProjetoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * Filter, which Projeto to fetch.
     */
    where: ProjetoWhereUniqueInput
  }

  /**
   * Projeto findUniqueOrThrow
   */
  export type ProjetoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * Filter, which Projeto to fetch.
     */
    where: ProjetoWhereUniqueInput
  }

  /**
   * Projeto findFirst
   */
  export type ProjetoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * Filter, which Projeto to fetch.
     */
    where?: ProjetoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     */
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projetos.
     */
    cursor?: ProjetoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projetos.
     */
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Projeto findFirstOrThrow
   */
  export type ProjetoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * Filter, which Projeto to fetch.
     */
    where?: ProjetoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     */
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projetos.
     */
    cursor?: ProjetoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projetos.
     */
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Projeto findMany
   */
  export type ProjetoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * Filter, which Projetos to fetch.
     */
    where?: ProjetoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projetos to fetch.
     */
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projetos.
     */
    cursor?: ProjetoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projetos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projetos.
     */
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Projeto create
   */
  export type ProjetoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * The data needed to create a Projeto.
     */
    data: XOR<ProjetoCreateInput, ProjetoUncheckedCreateInput>
  }

  /**
   * Projeto createMany
   */
  export type ProjetoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projetos.
     */
    data: ProjetoCreateManyInput | ProjetoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Projeto createManyAndReturn
   */
  export type ProjetoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * The data used to create many Projetos.
     */
    data: ProjetoCreateManyInput | ProjetoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Projeto update
   */
  export type ProjetoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * The data needed to update a Projeto.
     */
    data: XOR<ProjetoUpdateInput, ProjetoUncheckedUpdateInput>
    /**
     * Choose, which Projeto to update.
     */
    where: ProjetoWhereUniqueInput
  }

  /**
   * Projeto updateMany
   */
  export type ProjetoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projetos.
     */
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyInput>
    /**
     * Filter which Projetos to update
     */
    where?: ProjetoWhereInput
    /**
     * Limit how many Projetos to update.
     */
    limit?: number
  }

  /**
   * Projeto updateManyAndReturn
   */
  export type ProjetoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * The data used to update Projetos.
     */
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyInput>
    /**
     * Filter which Projetos to update
     */
    where?: ProjetoWhereInput
    /**
     * Limit how many Projetos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Projeto upsert
   */
  export type ProjetoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * The filter to search for the Projeto to update in case it exists.
     */
    where: ProjetoWhereUniqueInput
    /**
     * In case the Projeto found by the `where` argument doesn't exist, create a new Projeto with this data.
     */
    create: XOR<ProjetoCreateInput, ProjetoUncheckedCreateInput>
    /**
     * In case the Projeto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjetoUpdateInput, ProjetoUncheckedUpdateInput>
  }

  /**
   * Projeto delete
   */
  export type ProjetoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    /**
     * Filter which Projeto to delete.
     */
    where: ProjetoWhereUniqueInput
  }

  /**
   * Projeto deleteMany
   */
  export type ProjetoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projetos to delete
     */
    where?: ProjetoWhereInput
    /**
     * Limit how many Projetos to delete.
     */
    limit?: number
  }

  /**
   * Projeto.direitosViolados
   */
  export type Projeto$direitosVioladosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    where?: DireitoVioladoWhereInput
    orderBy?: DireitoVioladoOrderByWithRelationInput | DireitoVioladoOrderByWithRelationInput[]
    cursor?: DireitoVioladoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DireitoVioladoScalarFieldEnum | DireitoVioladoScalarFieldEnum[]
  }

  /**
   * Projeto.ideologias
   */
  export type Projeto$ideologiasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    where?: IdeologiaWhereInput
    orderBy?: IdeologiaOrderByWithRelationInput | IdeologiaOrderByWithRelationInput[]
    cursor?: IdeologiaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IdeologiaScalarFieldEnum | IdeologiaScalarFieldEnum[]
  }

  /**
   * Projeto.partidos
   */
  export type Projeto$partidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    where?: PartidoWhereInput
    orderBy?: PartidoOrderByWithRelationInput | PartidoOrderByWithRelationInput[]
    cursor?: PartidoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }

  /**
   * Projeto.autores
   */
  export type Projeto$autoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    where?: PoliticoWhereInput
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    cursor?: PoliticoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Projeto without action
   */
  export type ProjetoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
  }


  /**
   * Model Politico
   */

  export type AggregatePolitico = {
    _count: PoliticoCountAggregateOutputType | null
    _min: PoliticoMinAggregateOutputType | null
    _max: PoliticoMaxAggregateOutputType | null
  }

  export type PoliticoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    foto: string | null
    sexo: string | null
    raca: string | null
    religiao: string | null
    estadoId: string | null
    partidoId: string | null
    ideologia: string | null
    dataNascimento: Date | null
  }

  export type PoliticoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    foto: string | null
    sexo: string | null
    raca: string | null
    religiao: string | null
    estadoId: string | null
    partidoId: string | null
    ideologia: string | null
    dataNascimento: Date | null
  }

  export type PoliticoCountAggregateOutputType = {
    id: number
    nome: number
    foto: number
    sexo: number
    raca: number
    religiao: number
    estadoId: number
    partidoId: number
    ideologia: number
    dataNascimento: number
    _all: number
  }


  export type PoliticoMinAggregateInputType = {
    id?: true
    nome?: true
    foto?: true
    sexo?: true
    raca?: true
    religiao?: true
    estadoId?: true
    partidoId?: true
    ideologia?: true
    dataNascimento?: true
  }

  export type PoliticoMaxAggregateInputType = {
    id?: true
    nome?: true
    foto?: true
    sexo?: true
    raca?: true
    religiao?: true
    estadoId?: true
    partidoId?: true
    ideologia?: true
    dataNascimento?: true
  }

  export type PoliticoCountAggregateInputType = {
    id?: true
    nome?: true
    foto?: true
    sexo?: true
    raca?: true
    religiao?: true
    estadoId?: true
    partidoId?: true
    ideologia?: true
    dataNascimento?: true
    _all?: true
  }

  export type PoliticoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Politico to aggregate.
     */
    where?: PoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Politicos to fetch.
     */
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Politicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Politicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Politicos
    **/
    _count?: true | PoliticoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PoliticoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PoliticoMaxAggregateInputType
  }

  export type GetPoliticoAggregateType<T extends PoliticoAggregateArgs> = {
        [P in keyof T & keyof AggregatePolitico]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePolitico[P]>
      : GetScalarType<T[P], AggregatePolitico[P]>
  }




  export type PoliticoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PoliticoWhereInput
    orderBy?: PoliticoOrderByWithAggregationInput | PoliticoOrderByWithAggregationInput[]
    by: PoliticoScalarFieldEnum[] | PoliticoScalarFieldEnum
    having?: PoliticoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PoliticoCountAggregateInputType | true
    _min?: PoliticoMinAggregateInputType
    _max?: PoliticoMaxAggregateInputType
  }

  export type PoliticoGroupByOutputType = {
    id: string
    nome: string
    foto: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    partidoId: string
    ideologia: string
    dataNascimento: Date
    _count: PoliticoCountAggregateOutputType | null
    _min: PoliticoMinAggregateOutputType | null
    _max: PoliticoMaxAggregateOutputType | null
  }

  type GetPoliticoGroupByPayload<T extends PoliticoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PoliticoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PoliticoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PoliticoGroupByOutputType[P]>
            : GetScalarType<T[P], PoliticoGroupByOutputType[P]>
        }
      >
    >


  export type PoliticoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    foto?: boolean
    sexo?: boolean
    raca?: boolean
    religiao?: boolean
    estadoId?: boolean
    partidoId?: boolean
    ideologia?: boolean
    dataNascimento?: boolean
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    partido?: boolean | PartidoDefaultArgs<ExtArgs>
    profissoes?: boolean | Politico$profissoesArgs<ExtArgs>
    projetos?: boolean | Politico$projetosArgs<ExtArgs>
    _count?: boolean | PoliticoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["politico"]>

  export type PoliticoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    foto?: boolean
    sexo?: boolean
    raca?: boolean
    religiao?: boolean
    estadoId?: boolean
    partidoId?: boolean
    ideologia?: boolean
    dataNascimento?: boolean
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    partido?: boolean | PartidoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["politico"]>

  export type PoliticoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    foto?: boolean
    sexo?: boolean
    raca?: boolean
    religiao?: boolean
    estadoId?: boolean
    partidoId?: boolean
    ideologia?: boolean
    dataNascimento?: boolean
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    partido?: boolean | PartidoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["politico"]>

  export type PoliticoSelectScalar = {
    id?: boolean
    nome?: boolean
    foto?: boolean
    sexo?: boolean
    raca?: boolean
    religiao?: boolean
    estadoId?: boolean
    partidoId?: boolean
    ideologia?: boolean
    dataNascimento?: boolean
  }

  export type PoliticoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "foto" | "sexo" | "raca" | "religiao" | "estadoId" | "partidoId" | "ideologia" | "dataNascimento", ExtArgs["result"]["politico"]>
  export type PoliticoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    partido?: boolean | PartidoDefaultArgs<ExtArgs>
    profissoes?: boolean | Politico$profissoesArgs<ExtArgs>
    projetos?: boolean | Politico$projetosArgs<ExtArgs>
    _count?: boolean | PoliticoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PoliticoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    partido?: boolean | PartidoDefaultArgs<ExtArgs>
  }
  export type PoliticoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    estado?: boolean | EstadoDefaultArgs<ExtArgs>
    partido?: boolean | PartidoDefaultArgs<ExtArgs>
  }

  export type $PoliticoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Politico"
    objects: {
      estado: Prisma.$EstadoPayload<ExtArgs>
      partido: Prisma.$PartidoPayload<ExtArgs>
      profissoes: Prisma.$ProfissaoPayload<ExtArgs>[]
      projetos: Prisma.$ProjetoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      foto: string | null
      sexo: string
      raca: string
      religiao: string
      estadoId: string
      partidoId: string
      ideologia: string
      dataNascimento: Date
    }, ExtArgs["result"]["politico"]>
    composites: {}
  }

  type PoliticoGetPayload<S extends boolean | null | undefined | PoliticoDefaultArgs> = $Result.GetResult<Prisma.$PoliticoPayload, S>

  type PoliticoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PoliticoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PoliticoCountAggregateInputType | true
    }

  export interface PoliticoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Politico'], meta: { name: 'Politico' } }
    /**
     * Find zero or one Politico that matches the filter.
     * @param {PoliticoFindUniqueArgs} args - Arguments to find a Politico
     * @example
     * // Get one Politico
     * const politico = await prisma.politico.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PoliticoFindUniqueArgs>(args: SelectSubset<T, PoliticoFindUniqueArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Politico that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PoliticoFindUniqueOrThrowArgs} args - Arguments to find a Politico
     * @example
     * // Get one Politico
     * const politico = await prisma.politico.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PoliticoFindUniqueOrThrowArgs>(args: SelectSubset<T, PoliticoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Politico that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoFindFirstArgs} args - Arguments to find a Politico
     * @example
     * // Get one Politico
     * const politico = await prisma.politico.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PoliticoFindFirstArgs>(args?: SelectSubset<T, PoliticoFindFirstArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Politico that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoFindFirstOrThrowArgs} args - Arguments to find a Politico
     * @example
     * // Get one Politico
     * const politico = await prisma.politico.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PoliticoFindFirstOrThrowArgs>(args?: SelectSubset<T, PoliticoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Politicos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Politicos
     * const politicos = await prisma.politico.findMany()
     * 
     * // Get first 10 Politicos
     * const politicos = await prisma.politico.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const politicoWithIdOnly = await prisma.politico.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PoliticoFindManyArgs>(args?: SelectSubset<T, PoliticoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Politico.
     * @param {PoliticoCreateArgs} args - Arguments to create a Politico.
     * @example
     * // Create one Politico
     * const Politico = await prisma.politico.create({
     *   data: {
     *     // ... data to create a Politico
     *   }
     * })
     * 
     */
    create<T extends PoliticoCreateArgs>(args: SelectSubset<T, PoliticoCreateArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Politicos.
     * @param {PoliticoCreateManyArgs} args - Arguments to create many Politicos.
     * @example
     * // Create many Politicos
     * const politico = await prisma.politico.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PoliticoCreateManyArgs>(args?: SelectSubset<T, PoliticoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Politicos and returns the data saved in the database.
     * @param {PoliticoCreateManyAndReturnArgs} args - Arguments to create many Politicos.
     * @example
     * // Create many Politicos
     * const politico = await prisma.politico.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Politicos and only return the `id`
     * const politicoWithIdOnly = await prisma.politico.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PoliticoCreateManyAndReturnArgs>(args?: SelectSubset<T, PoliticoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Politico.
     * @param {PoliticoDeleteArgs} args - Arguments to delete one Politico.
     * @example
     * // Delete one Politico
     * const Politico = await prisma.politico.delete({
     *   where: {
     *     // ... filter to delete one Politico
     *   }
     * })
     * 
     */
    delete<T extends PoliticoDeleteArgs>(args: SelectSubset<T, PoliticoDeleteArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Politico.
     * @param {PoliticoUpdateArgs} args - Arguments to update one Politico.
     * @example
     * // Update one Politico
     * const politico = await prisma.politico.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PoliticoUpdateArgs>(args: SelectSubset<T, PoliticoUpdateArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Politicos.
     * @param {PoliticoDeleteManyArgs} args - Arguments to filter Politicos to delete.
     * @example
     * // Delete a few Politicos
     * const { count } = await prisma.politico.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PoliticoDeleteManyArgs>(args?: SelectSubset<T, PoliticoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Politicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Politicos
     * const politico = await prisma.politico.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PoliticoUpdateManyArgs>(args: SelectSubset<T, PoliticoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Politicos and returns the data updated in the database.
     * @param {PoliticoUpdateManyAndReturnArgs} args - Arguments to update many Politicos.
     * @example
     * // Update many Politicos
     * const politico = await prisma.politico.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Politicos and only return the `id`
     * const politicoWithIdOnly = await prisma.politico.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PoliticoUpdateManyAndReturnArgs>(args: SelectSubset<T, PoliticoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Politico.
     * @param {PoliticoUpsertArgs} args - Arguments to update or create a Politico.
     * @example
     * // Update or create a Politico
     * const politico = await prisma.politico.upsert({
     *   create: {
     *     // ... data to create a Politico
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Politico we want to update
     *   }
     * })
     */
    upsert<T extends PoliticoUpsertArgs>(args: SelectSubset<T, PoliticoUpsertArgs<ExtArgs>>): Prisma__PoliticoClient<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Politicos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoCountArgs} args - Arguments to filter Politicos to count.
     * @example
     * // Count the number of Politicos
     * const count = await prisma.politico.count({
     *   where: {
     *     // ... the filter for the Politicos we want to count
     *   }
     * })
    **/
    count<T extends PoliticoCountArgs>(
      args?: Subset<T, PoliticoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PoliticoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Politico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PoliticoAggregateArgs>(args: Subset<T, PoliticoAggregateArgs>): Prisma.PrismaPromise<GetPoliticoAggregateType<T>>

    /**
     * Group by Politico.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PoliticoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PoliticoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PoliticoGroupByArgs['orderBy'] }
        : { orderBy?: PoliticoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PoliticoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPoliticoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Politico model
   */
  readonly fields: PoliticoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Politico.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PoliticoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    estado<T extends EstadoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EstadoDefaultArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    partido<T extends PartidoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PartidoDefaultArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    profissoes<T extends Politico$profissoesArgs<ExtArgs> = {}>(args?: Subset<T, Politico$profissoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projetos<T extends Politico$projetosArgs<ExtArgs> = {}>(args?: Subset<T, Politico$projetosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Politico model
   */
  interface PoliticoFieldRefs {
    readonly id: FieldRef<"Politico", 'String'>
    readonly nome: FieldRef<"Politico", 'String'>
    readonly foto: FieldRef<"Politico", 'String'>
    readonly sexo: FieldRef<"Politico", 'String'>
    readonly raca: FieldRef<"Politico", 'String'>
    readonly religiao: FieldRef<"Politico", 'String'>
    readonly estadoId: FieldRef<"Politico", 'String'>
    readonly partidoId: FieldRef<"Politico", 'String'>
    readonly ideologia: FieldRef<"Politico", 'String'>
    readonly dataNascimento: FieldRef<"Politico", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Politico findUnique
   */
  export type PoliticoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * Filter, which Politico to fetch.
     */
    where: PoliticoWhereUniqueInput
  }

  /**
   * Politico findUniqueOrThrow
   */
  export type PoliticoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * Filter, which Politico to fetch.
     */
    where: PoliticoWhereUniqueInput
  }

  /**
   * Politico findFirst
   */
  export type PoliticoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * Filter, which Politico to fetch.
     */
    where?: PoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Politicos to fetch.
     */
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Politicos.
     */
    cursor?: PoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Politicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Politicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Politicos.
     */
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Politico findFirstOrThrow
   */
  export type PoliticoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * Filter, which Politico to fetch.
     */
    where?: PoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Politicos to fetch.
     */
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Politicos.
     */
    cursor?: PoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Politicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Politicos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Politicos.
     */
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Politico findMany
   */
  export type PoliticoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * Filter, which Politicos to fetch.
     */
    where?: PoliticoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Politicos to fetch.
     */
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Politicos.
     */
    cursor?: PoliticoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Politicos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Politicos.
     */
    skip?: number
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Politico create
   */
  export type PoliticoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * The data needed to create a Politico.
     */
    data: XOR<PoliticoCreateInput, PoliticoUncheckedCreateInput>
  }

  /**
   * Politico createMany
   */
  export type PoliticoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Politicos.
     */
    data: PoliticoCreateManyInput | PoliticoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Politico createManyAndReturn
   */
  export type PoliticoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * The data used to create many Politicos.
     */
    data: PoliticoCreateManyInput | PoliticoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Politico update
   */
  export type PoliticoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * The data needed to update a Politico.
     */
    data: XOR<PoliticoUpdateInput, PoliticoUncheckedUpdateInput>
    /**
     * Choose, which Politico to update.
     */
    where: PoliticoWhereUniqueInput
  }

  /**
   * Politico updateMany
   */
  export type PoliticoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Politicos.
     */
    data: XOR<PoliticoUpdateManyMutationInput, PoliticoUncheckedUpdateManyInput>
    /**
     * Filter which Politicos to update
     */
    where?: PoliticoWhereInput
    /**
     * Limit how many Politicos to update.
     */
    limit?: number
  }

  /**
   * Politico updateManyAndReturn
   */
  export type PoliticoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * The data used to update Politicos.
     */
    data: XOR<PoliticoUpdateManyMutationInput, PoliticoUncheckedUpdateManyInput>
    /**
     * Filter which Politicos to update
     */
    where?: PoliticoWhereInput
    /**
     * Limit how many Politicos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Politico upsert
   */
  export type PoliticoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * The filter to search for the Politico to update in case it exists.
     */
    where: PoliticoWhereUniqueInput
    /**
     * In case the Politico found by the `where` argument doesn't exist, create a new Politico with this data.
     */
    create: XOR<PoliticoCreateInput, PoliticoUncheckedCreateInput>
    /**
     * In case the Politico was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PoliticoUpdateInput, PoliticoUncheckedUpdateInput>
  }

  /**
   * Politico delete
   */
  export type PoliticoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    /**
     * Filter which Politico to delete.
     */
    where: PoliticoWhereUniqueInput
  }

  /**
   * Politico deleteMany
   */
  export type PoliticoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Politicos to delete
     */
    where?: PoliticoWhereInput
    /**
     * Limit how many Politicos to delete.
     */
    limit?: number
  }

  /**
   * Politico.profissoes
   */
  export type Politico$profissoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    where?: ProfissaoWhereInput
    orderBy?: ProfissaoOrderByWithRelationInput | ProfissaoOrderByWithRelationInput[]
    cursor?: ProfissaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfissaoScalarFieldEnum | ProfissaoScalarFieldEnum[]
  }

  /**
   * Politico.projetos
   */
  export type Politico$projetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    cursor?: ProjetoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Politico without action
   */
  export type PoliticoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
  }


  /**
   * Model Partido
   */

  export type AggregatePartido = {
    _count: PartidoCountAggregateOutputType | null
    _min: PartidoMinAggregateOutputType | null
    _max: PartidoMaxAggregateOutputType | null
  }

  export type PartidoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    sigla: string | null
    imagem: string | null
  }

  export type PartidoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    sigla: string | null
    imagem: string | null
  }

  export type PartidoCountAggregateOutputType = {
    id: number
    nome: number
    sigla: number
    imagem: number
    _all: number
  }


  export type PartidoMinAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    imagem?: true
  }

  export type PartidoMaxAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    imagem?: true
  }

  export type PartidoCountAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    imagem?: true
    _all?: true
  }

  export type PartidoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partido to aggregate.
     */
    where?: PartidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidos to fetch.
     */
    orderBy?: PartidoOrderByWithRelationInput | PartidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PartidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Partidos
    **/
    _count?: true | PartidoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartidoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartidoMaxAggregateInputType
  }

  export type GetPartidoAggregateType<T extends PartidoAggregateArgs> = {
        [P in keyof T & keyof AggregatePartido]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartido[P]>
      : GetScalarType<T[P], AggregatePartido[P]>
  }




  export type PartidoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PartidoWhereInput
    orderBy?: PartidoOrderByWithAggregationInput | PartidoOrderByWithAggregationInput[]
    by: PartidoScalarFieldEnum[] | PartidoScalarFieldEnum
    having?: PartidoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartidoCountAggregateInputType | true
    _min?: PartidoMinAggregateInputType
    _max?: PartidoMaxAggregateInputType
  }

  export type PartidoGroupByOutputType = {
    id: string
    nome: string
    sigla: string
    imagem: string | null
    _count: PartidoCountAggregateOutputType | null
    _min: PartidoMinAggregateOutputType | null
    _max: PartidoMaxAggregateOutputType | null
  }

  type GetPartidoGroupByPayload<T extends PartidoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartidoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartidoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartidoGroupByOutputType[P]>
            : GetScalarType<T[P], PartidoGroupByOutputType[P]>
        }
      >
    >


  export type PartidoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    imagem?: boolean
    politicos?: boolean | Partido$politicosArgs<ExtArgs>
    projetos?: boolean | Partido$projetosArgs<ExtArgs>
    _count?: boolean | PartidoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partido"]>

  export type PartidoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    imagem?: boolean
  }, ExtArgs["result"]["partido"]>

  export type PartidoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    imagem?: boolean
  }, ExtArgs["result"]["partido"]>

  export type PartidoSelectScalar = {
    id?: boolean
    nome?: boolean
    sigla?: boolean
    imagem?: boolean
  }

  export type PartidoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "sigla" | "imagem", ExtArgs["result"]["partido"]>
  export type PartidoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    politicos?: boolean | Partido$politicosArgs<ExtArgs>
    projetos?: boolean | Partido$projetosArgs<ExtArgs>
    _count?: boolean | PartidoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PartidoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PartidoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PartidoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Partido"
    objects: {
      politicos: Prisma.$PoliticoPayload<ExtArgs>[]
      projetos: Prisma.$ProjetoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      sigla: string
      imagem: string | null
    }, ExtArgs["result"]["partido"]>
    composites: {}
  }

  type PartidoGetPayload<S extends boolean | null | undefined | PartidoDefaultArgs> = $Result.GetResult<Prisma.$PartidoPayload, S>

  type PartidoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PartidoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartidoCountAggregateInputType | true
    }

  export interface PartidoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Partido'], meta: { name: 'Partido' } }
    /**
     * Find zero or one Partido that matches the filter.
     * @param {PartidoFindUniqueArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PartidoFindUniqueArgs>(args: SelectSubset<T, PartidoFindUniqueArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partido that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PartidoFindUniqueOrThrowArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PartidoFindUniqueOrThrowArgs>(args: SelectSubset<T, PartidoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partido that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoFindFirstArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PartidoFindFirstArgs>(args?: SelectSubset<T, PartidoFindFirstArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partido that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoFindFirstOrThrowArgs} args - Arguments to find a Partido
     * @example
     * // Get one Partido
     * const partido = await prisma.partido.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PartidoFindFirstOrThrowArgs>(args?: SelectSubset<T, PartidoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partidos
     * const partidos = await prisma.partido.findMany()
     * 
     * // Get first 10 Partidos
     * const partidos = await prisma.partido.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partidoWithIdOnly = await prisma.partido.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PartidoFindManyArgs>(args?: SelectSubset<T, PartidoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partido.
     * @param {PartidoCreateArgs} args - Arguments to create a Partido.
     * @example
     * // Create one Partido
     * const Partido = await prisma.partido.create({
     *   data: {
     *     // ... data to create a Partido
     *   }
     * })
     * 
     */
    create<T extends PartidoCreateArgs>(args: SelectSubset<T, PartidoCreateArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partidos.
     * @param {PartidoCreateManyArgs} args - Arguments to create many Partidos.
     * @example
     * // Create many Partidos
     * const partido = await prisma.partido.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PartidoCreateManyArgs>(args?: SelectSubset<T, PartidoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Partidos and returns the data saved in the database.
     * @param {PartidoCreateManyAndReturnArgs} args - Arguments to create many Partidos.
     * @example
     * // Create many Partidos
     * const partido = await prisma.partido.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Partidos and only return the `id`
     * const partidoWithIdOnly = await prisma.partido.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PartidoCreateManyAndReturnArgs>(args?: SelectSubset<T, PartidoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Partido.
     * @param {PartidoDeleteArgs} args - Arguments to delete one Partido.
     * @example
     * // Delete one Partido
     * const Partido = await prisma.partido.delete({
     *   where: {
     *     // ... filter to delete one Partido
     *   }
     * })
     * 
     */
    delete<T extends PartidoDeleteArgs>(args: SelectSubset<T, PartidoDeleteArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partido.
     * @param {PartidoUpdateArgs} args - Arguments to update one Partido.
     * @example
     * // Update one Partido
     * const partido = await prisma.partido.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PartidoUpdateArgs>(args: SelectSubset<T, PartidoUpdateArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partidos.
     * @param {PartidoDeleteManyArgs} args - Arguments to filter Partidos to delete.
     * @example
     * // Delete a few Partidos
     * const { count } = await prisma.partido.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PartidoDeleteManyArgs>(args?: SelectSubset<T, PartidoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partidos
     * const partido = await prisma.partido.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PartidoUpdateManyArgs>(args: SelectSubset<T, PartidoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partidos and returns the data updated in the database.
     * @param {PartidoUpdateManyAndReturnArgs} args - Arguments to update many Partidos.
     * @example
     * // Update many Partidos
     * const partido = await prisma.partido.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Partidos and only return the `id`
     * const partidoWithIdOnly = await prisma.partido.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PartidoUpdateManyAndReturnArgs>(args: SelectSubset<T, PartidoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Partido.
     * @param {PartidoUpsertArgs} args - Arguments to update or create a Partido.
     * @example
     * // Update or create a Partido
     * const partido = await prisma.partido.upsert({
     *   create: {
     *     // ... data to create a Partido
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partido we want to update
     *   }
     * })
     */
    upsert<T extends PartidoUpsertArgs>(args: SelectSubset<T, PartidoUpsertArgs<ExtArgs>>): Prisma__PartidoClient<$Result.GetResult<Prisma.$PartidoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoCountArgs} args - Arguments to filter Partidos to count.
     * @example
     * // Count the number of Partidos
     * const count = await prisma.partido.count({
     *   where: {
     *     // ... the filter for the Partidos we want to count
     *   }
     * })
    **/
    count<T extends PartidoCountArgs>(
      args?: Subset<T, PartidoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartidoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartidoAggregateArgs>(args: Subset<T, PartidoAggregateArgs>): Prisma.PrismaPromise<GetPartidoAggregateType<T>>

    /**
     * Group by Partido.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PartidoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PartidoGroupByArgs['orderBy'] }
        : { orderBy?: PartidoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PartidoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartidoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Partido model
   */
  readonly fields: PartidoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Partido.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PartidoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    politicos<T extends Partido$politicosArgs<ExtArgs> = {}>(args?: Subset<T, Partido$politicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    projetos<T extends Partido$projetosArgs<ExtArgs> = {}>(args?: Subset<T, Partido$projetosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Partido model
   */
  interface PartidoFieldRefs {
    readonly id: FieldRef<"Partido", 'String'>
    readonly nome: FieldRef<"Partido", 'String'>
    readonly sigla: FieldRef<"Partido", 'String'>
    readonly imagem: FieldRef<"Partido", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Partido findUnique
   */
  export type PartidoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * Filter, which Partido to fetch.
     */
    where: PartidoWhereUniqueInput
  }

  /**
   * Partido findUniqueOrThrow
   */
  export type PartidoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * Filter, which Partido to fetch.
     */
    where: PartidoWhereUniqueInput
  }

  /**
   * Partido findFirst
   */
  export type PartidoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * Filter, which Partido to fetch.
     */
    where?: PartidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidos to fetch.
     */
    orderBy?: PartidoOrderByWithRelationInput | PartidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partidos.
     */
    cursor?: PartidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partidos.
     */
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }

  /**
   * Partido findFirstOrThrow
   */
  export type PartidoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * Filter, which Partido to fetch.
     */
    where?: PartidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidos to fetch.
     */
    orderBy?: PartidoOrderByWithRelationInput | PartidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Partidos.
     */
    cursor?: PartidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Partidos.
     */
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }

  /**
   * Partido findMany
   */
  export type PartidoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * Filter, which Partidos to fetch.
     */
    where?: PartidoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Partidos to fetch.
     */
    orderBy?: PartidoOrderByWithRelationInput | PartidoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Partidos.
     */
    cursor?: PartidoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Partidos.
     */
    skip?: number
    distinct?: PartidoScalarFieldEnum | PartidoScalarFieldEnum[]
  }

  /**
   * Partido create
   */
  export type PartidoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * The data needed to create a Partido.
     */
    data: XOR<PartidoCreateInput, PartidoUncheckedCreateInput>
  }

  /**
   * Partido createMany
   */
  export type PartidoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Partidos.
     */
    data: PartidoCreateManyInput | PartidoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partido createManyAndReturn
   */
  export type PartidoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * The data used to create many Partidos.
     */
    data: PartidoCreateManyInput | PartidoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Partido update
   */
  export type PartidoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * The data needed to update a Partido.
     */
    data: XOR<PartidoUpdateInput, PartidoUncheckedUpdateInput>
    /**
     * Choose, which Partido to update.
     */
    where: PartidoWhereUniqueInput
  }

  /**
   * Partido updateMany
   */
  export type PartidoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Partidos.
     */
    data: XOR<PartidoUpdateManyMutationInput, PartidoUncheckedUpdateManyInput>
    /**
     * Filter which Partidos to update
     */
    where?: PartidoWhereInput
    /**
     * Limit how many Partidos to update.
     */
    limit?: number
  }

  /**
   * Partido updateManyAndReturn
   */
  export type PartidoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * The data used to update Partidos.
     */
    data: XOR<PartidoUpdateManyMutationInput, PartidoUncheckedUpdateManyInput>
    /**
     * Filter which Partidos to update
     */
    where?: PartidoWhereInput
    /**
     * Limit how many Partidos to update.
     */
    limit?: number
  }

  /**
   * Partido upsert
   */
  export type PartidoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * The filter to search for the Partido to update in case it exists.
     */
    where: PartidoWhereUniqueInput
    /**
     * In case the Partido found by the `where` argument doesn't exist, create a new Partido with this data.
     */
    create: XOR<PartidoCreateInput, PartidoUncheckedCreateInput>
    /**
     * In case the Partido was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PartidoUpdateInput, PartidoUncheckedUpdateInput>
  }

  /**
   * Partido delete
   */
  export type PartidoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
    /**
     * Filter which Partido to delete.
     */
    where: PartidoWhereUniqueInput
  }

  /**
   * Partido deleteMany
   */
  export type PartidoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Partidos to delete
     */
    where?: PartidoWhereInput
    /**
     * Limit how many Partidos to delete.
     */
    limit?: number
  }

  /**
   * Partido.politicos
   */
  export type Partido$politicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    where?: PoliticoWhereInput
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    cursor?: PoliticoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Partido.projetos
   */
  export type Partido$projetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    cursor?: ProjetoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Partido without action
   */
  export type PartidoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Partido
     */
    select?: PartidoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Partido
     */
    omit?: PartidoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PartidoInclude<ExtArgs> | null
  }


  /**
   * Model Estado
   */

  export type AggregateEstado = {
    _count: EstadoCountAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  export type EstadoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    sigla: string | null
  }

  export type EstadoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    sigla: string | null
  }

  export type EstadoCountAggregateOutputType = {
    id: number
    nome: number
    sigla: number
    _all: number
  }


  export type EstadoMinAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
  }

  export type EstadoMaxAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
  }

  export type EstadoCountAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    _all?: true
  }

  export type EstadoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estado to aggregate.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Estados
    **/
    _count?: true | EstadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EstadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EstadoMaxAggregateInputType
  }

  export type GetEstadoAggregateType<T extends EstadoAggregateArgs> = {
        [P in keyof T & keyof AggregateEstado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEstado[P]>
      : GetScalarType<T[P], AggregateEstado[P]>
  }




  export type EstadoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EstadoWhereInput
    orderBy?: EstadoOrderByWithAggregationInput | EstadoOrderByWithAggregationInput[]
    by: EstadoScalarFieldEnum[] | EstadoScalarFieldEnum
    having?: EstadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EstadoCountAggregateInputType | true
    _min?: EstadoMinAggregateInputType
    _max?: EstadoMaxAggregateInputType
  }

  export type EstadoGroupByOutputType = {
    id: string
    nome: string
    sigla: string
    _count: EstadoCountAggregateOutputType | null
    _min: EstadoMinAggregateOutputType | null
    _max: EstadoMaxAggregateOutputType | null
  }

  type GetEstadoGroupByPayload<T extends EstadoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EstadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EstadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EstadoGroupByOutputType[P]>
            : GetScalarType<T[P], EstadoGroupByOutputType[P]>
        }
      >
    >


  export type EstadoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    politicos?: boolean | Estado$politicosArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
  }, ExtArgs["result"]["estado"]>

  export type EstadoSelectScalar = {
    id?: boolean
    nome?: boolean
    sigla?: boolean
  }

  export type EstadoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "sigla", ExtArgs["result"]["estado"]>
  export type EstadoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    politicos?: boolean | Estado$politicosArgs<ExtArgs>
    _count?: boolean | EstadoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EstadoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EstadoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EstadoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Estado"
    objects: {
      politicos: Prisma.$PoliticoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      sigla: string
    }, ExtArgs["result"]["estado"]>
    composites: {}
  }

  type EstadoGetPayload<S extends boolean | null | undefined | EstadoDefaultArgs> = $Result.GetResult<Prisma.$EstadoPayload, S>

  type EstadoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EstadoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EstadoCountAggregateInputType | true
    }

  export interface EstadoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Estado'], meta: { name: 'Estado' } }
    /**
     * Find zero or one Estado that matches the filter.
     * @param {EstadoFindUniqueArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EstadoFindUniqueArgs>(args: SelectSubset<T, EstadoFindUniqueArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Estado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EstadoFindUniqueOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EstadoFindUniqueOrThrowArgs>(args: SelectSubset<T, EstadoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EstadoFindFirstArgs>(args?: SelectSubset<T, EstadoFindFirstArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Estado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindFirstOrThrowArgs} args - Arguments to find a Estado
     * @example
     * // Get one Estado
     * const estado = await prisma.estado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EstadoFindFirstOrThrowArgs>(args?: SelectSubset<T, EstadoFindFirstOrThrowArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Estados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Estados
     * const estados = await prisma.estado.findMany()
     * 
     * // Get first 10 Estados
     * const estados = await prisma.estado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const estadoWithIdOnly = await prisma.estado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EstadoFindManyArgs>(args?: SelectSubset<T, EstadoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Estado.
     * @param {EstadoCreateArgs} args - Arguments to create a Estado.
     * @example
     * // Create one Estado
     * const Estado = await prisma.estado.create({
     *   data: {
     *     // ... data to create a Estado
     *   }
     * })
     * 
     */
    create<T extends EstadoCreateArgs>(args: SelectSubset<T, EstadoCreateArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Estados.
     * @param {EstadoCreateManyArgs} args - Arguments to create many Estados.
     * @example
     * // Create many Estados
     * const estado = await prisma.estado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EstadoCreateManyArgs>(args?: SelectSubset<T, EstadoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Estados and returns the data saved in the database.
     * @param {EstadoCreateManyAndReturnArgs} args - Arguments to create many Estados.
     * @example
     * // Create many Estados
     * const estado = await prisma.estado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Estados and only return the `id`
     * const estadoWithIdOnly = await prisma.estado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EstadoCreateManyAndReturnArgs>(args?: SelectSubset<T, EstadoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Estado.
     * @param {EstadoDeleteArgs} args - Arguments to delete one Estado.
     * @example
     * // Delete one Estado
     * const Estado = await prisma.estado.delete({
     *   where: {
     *     // ... filter to delete one Estado
     *   }
     * })
     * 
     */
    delete<T extends EstadoDeleteArgs>(args: SelectSubset<T, EstadoDeleteArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Estado.
     * @param {EstadoUpdateArgs} args - Arguments to update one Estado.
     * @example
     * // Update one Estado
     * const estado = await prisma.estado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EstadoUpdateArgs>(args: SelectSubset<T, EstadoUpdateArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Estados.
     * @param {EstadoDeleteManyArgs} args - Arguments to filter Estados to delete.
     * @example
     * // Delete a few Estados
     * const { count } = await prisma.estado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EstadoDeleteManyArgs>(args?: SelectSubset<T, EstadoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EstadoUpdateManyArgs>(args: SelectSubset<T, EstadoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Estados and returns the data updated in the database.
     * @param {EstadoUpdateManyAndReturnArgs} args - Arguments to update many Estados.
     * @example
     * // Update many Estados
     * const estado = await prisma.estado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Estados and only return the `id`
     * const estadoWithIdOnly = await prisma.estado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EstadoUpdateManyAndReturnArgs>(args: SelectSubset<T, EstadoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Estado.
     * @param {EstadoUpsertArgs} args - Arguments to update or create a Estado.
     * @example
     * // Update or create a Estado
     * const estado = await prisma.estado.upsert({
     *   create: {
     *     // ... data to create a Estado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Estado we want to update
     *   }
     * })
     */
    upsert<T extends EstadoUpsertArgs>(args: SelectSubset<T, EstadoUpsertArgs<ExtArgs>>): Prisma__EstadoClient<$Result.GetResult<Prisma.$EstadoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Estados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoCountArgs} args - Arguments to filter Estados to count.
     * @example
     * // Count the number of Estados
     * const count = await prisma.estado.count({
     *   where: {
     *     // ... the filter for the Estados we want to count
     *   }
     * })
    **/
    count<T extends EstadoCountArgs>(
      args?: Subset<T, EstadoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EstadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EstadoAggregateArgs>(args: Subset<T, EstadoAggregateArgs>): Prisma.PrismaPromise<GetEstadoAggregateType<T>>

    /**
     * Group by Estado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EstadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EstadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EstadoGroupByArgs['orderBy'] }
        : { orderBy?: EstadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EstadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEstadoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Estado model
   */
  readonly fields: EstadoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Estado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EstadoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    politicos<T extends Estado$politicosArgs<ExtArgs> = {}>(args?: Subset<T, Estado$politicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Estado model
   */
  interface EstadoFieldRefs {
    readonly id: FieldRef<"Estado", 'String'>
    readonly nome: FieldRef<"Estado", 'String'>
    readonly sigla: FieldRef<"Estado", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Estado findUnique
   */
  export type EstadoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado findUniqueOrThrow
   */
  export type EstadoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado findFirst
   */
  export type EstadoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado findFirstOrThrow
   */
  export type EstadoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estado to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Estados.
     */
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado findMany
   */
  export type EstadoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter, which Estados to fetch.
     */
    where?: EstadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Estados to fetch.
     */
    orderBy?: EstadoOrderByWithRelationInput | EstadoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Estados.
     */
    cursor?: EstadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Estados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Estados.
     */
    skip?: number
    distinct?: EstadoScalarFieldEnum | EstadoScalarFieldEnum[]
  }

  /**
   * Estado create
   */
  export type EstadoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to create a Estado.
     */
    data: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
  }

  /**
   * Estado createMany
   */
  export type EstadoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Estados.
     */
    data: EstadoCreateManyInput | EstadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estado createManyAndReturn
   */
  export type EstadoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * The data used to create many Estados.
     */
    data: EstadoCreateManyInput | EstadoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Estado update
   */
  export type EstadoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The data needed to update a Estado.
     */
    data: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
    /**
     * Choose, which Estado to update.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado updateMany
   */
  export type EstadoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to update.
     */
    limit?: number
  }

  /**
   * Estado updateManyAndReturn
   */
  export type EstadoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * The data used to update Estados.
     */
    data: XOR<EstadoUpdateManyMutationInput, EstadoUncheckedUpdateManyInput>
    /**
     * Filter which Estados to update
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to update.
     */
    limit?: number
  }

  /**
   * Estado upsert
   */
  export type EstadoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * The filter to search for the Estado to update in case it exists.
     */
    where: EstadoWhereUniqueInput
    /**
     * In case the Estado found by the `where` argument doesn't exist, create a new Estado with this data.
     */
    create: XOR<EstadoCreateInput, EstadoUncheckedCreateInput>
    /**
     * In case the Estado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EstadoUpdateInput, EstadoUncheckedUpdateInput>
  }

  /**
   * Estado delete
   */
  export type EstadoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
    /**
     * Filter which Estado to delete.
     */
    where: EstadoWhereUniqueInput
  }

  /**
   * Estado deleteMany
   */
  export type EstadoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Estados to delete
     */
    where?: EstadoWhereInput
    /**
     * Limit how many Estados to delete.
     */
    limit?: number
  }

  /**
   * Estado.politicos
   */
  export type Estado$politicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    where?: PoliticoWhereInput
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    cursor?: PoliticoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Estado without action
   */
  export type EstadoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Estado
     */
    select?: EstadoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Estado
     */
    omit?: EstadoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EstadoInclude<ExtArgs> | null
  }


  /**
   * Model DireitoViolado
   */

  export type AggregateDireitoViolado = {
    _count: DireitoVioladoCountAggregateOutputType | null
    _min: DireitoVioladoMinAggregateOutputType | null
    _max: DireitoVioladoMaxAggregateOutputType | null
  }

  export type DireitoVioladoMinAggregateOutputType = {
    id: string | null
    nome: string | null
    sigla: string | null
    descricao: string | null
  }

  export type DireitoVioladoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    sigla: string | null
    descricao: string | null
  }

  export type DireitoVioladoCountAggregateOutputType = {
    id: number
    nome: number
    sigla: number
    descricao: number
    _all: number
  }


  export type DireitoVioladoMinAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    descricao?: true
  }

  export type DireitoVioladoMaxAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    descricao?: true
  }

  export type DireitoVioladoCountAggregateInputType = {
    id?: true
    nome?: true
    sigla?: true
    descricao?: true
    _all?: true
  }

  export type DireitoVioladoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DireitoViolado to aggregate.
     */
    where?: DireitoVioladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireitoViolados to fetch.
     */
    orderBy?: DireitoVioladoOrderByWithRelationInput | DireitoVioladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DireitoVioladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireitoViolados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireitoViolados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DireitoViolados
    **/
    _count?: true | DireitoVioladoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DireitoVioladoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DireitoVioladoMaxAggregateInputType
  }

  export type GetDireitoVioladoAggregateType<T extends DireitoVioladoAggregateArgs> = {
        [P in keyof T & keyof AggregateDireitoViolado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDireitoViolado[P]>
      : GetScalarType<T[P], AggregateDireitoViolado[P]>
  }




  export type DireitoVioladoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DireitoVioladoWhereInput
    orderBy?: DireitoVioladoOrderByWithAggregationInput | DireitoVioladoOrderByWithAggregationInput[]
    by: DireitoVioladoScalarFieldEnum[] | DireitoVioladoScalarFieldEnum
    having?: DireitoVioladoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DireitoVioladoCountAggregateInputType | true
    _min?: DireitoVioladoMinAggregateInputType
    _max?: DireitoVioladoMaxAggregateInputType
  }

  export type DireitoVioladoGroupByOutputType = {
    id: string
    nome: string
    sigla: string
    descricao: string
    _count: DireitoVioladoCountAggregateOutputType | null
    _min: DireitoVioladoMinAggregateOutputType | null
    _max: DireitoVioladoMaxAggregateOutputType | null
  }

  type GetDireitoVioladoGroupByPayload<T extends DireitoVioladoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DireitoVioladoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DireitoVioladoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DireitoVioladoGroupByOutputType[P]>
            : GetScalarType<T[P], DireitoVioladoGroupByOutputType[P]>
        }
      >
    >


  export type DireitoVioladoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    descricao?: boolean
    projetos?: boolean | DireitoViolado$projetosArgs<ExtArgs>
    _count?: boolean | DireitoVioladoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["direitoViolado"]>

  export type DireitoVioladoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["direitoViolado"]>

  export type DireitoVioladoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    sigla?: boolean
    descricao?: boolean
  }, ExtArgs["result"]["direitoViolado"]>

  export type DireitoVioladoSelectScalar = {
    id?: boolean
    nome?: boolean
    sigla?: boolean
    descricao?: boolean
  }

  export type DireitoVioladoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "sigla" | "descricao", ExtArgs["result"]["direitoViolado"]>
  export type DireitoVioladoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | DireitoViolado$projetosArgs<ExtArgs>
    _count?: boolean | DireitoVioladoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DireitoVioladoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DireitoVioladoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DireitoVioladoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DireitoViolado"
    objects: {
      projetos: Prisma.$ProjetoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      sigla: string
      descricao: string
    }, ExtArgs["result"]["direitoViolado"]>
    composites: {}
  }

  type DireitoVioladoGetPayload<S extends boolean | null | undefined | DireitoVioladoDefaultArgs> = $Result.GetResult<Prisma.$DireitoVioladoPayload, S>

  type DireitoVioladoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DireitoVioladoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DireitoVioladoCountAggregateInputType | true
    }

  export interface DireitoVioladoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DireitoViolado'], meta: { name: 'DireitoViolado' } }
    /**
     * Find zero or one DireitoViolado that matches the filter.
     * @param {DireitoVioladoFindUniqueArgs} args - Arguments to find a DireitoViolado
     * @example
     * // Get one DireitoViolado
     * const direitoViolado = await prisma.direitoViolado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DireitoVioladoFindUniqueArgs>(args: SelectSubset<T, DireitoVioladoFindUniqueArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DireitoViolado that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DireitoVioladoFindUniqueOrThrowArgs} args - Arguments to find a DireitoViolado
     * @example
     * // Get one DireitoViolado
     * const direitoViolado = await prisma.direitoViolado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DireitoVioladoFindUniqueOrThrowArgs>(args: SelectSubset<T, DireitoVioladoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DireitoViolado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoFindFirstArgs} args - Arguments to find a DireitoViolado
     * @example
     * // Get one DireitoViolado
     * const direitoViolado = await prisma.direitoViolado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DireitoVioladoFindFirstArgs>(args?: SelectSubset<T, DireitoVioladoFindFirstArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DireitoViolado that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoFindFirstOrThrowArgs} args - Arguments to find a DireitoViolado
     * @example
     * // Get one DireitoViolado
     * const direitoViolado = await prisma.direitoViolado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DireitoVioladoFindFirstOrThrowArgs>(args?: SelectSubset<T, DireitoVioladoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DireitoViolados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DireitoViolados
     * const direitoViolados = await prisma.direitoViolado.findMany()
     * 
     * // Get first 10 DireitoViolados
     * const direitoViolados = await prisma.direitoViolado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const direitoVioladoWithIdOnly = await prisma.direitoViolado.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DireitoVioladoFindManyArgs>(args?: SelectSubset<T, DireitoVioladoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DireitoViolado.
     * @param {DireitoVioladoCreateArgs} args - Arguments to create a DireitoViolado.
     * @example
     * // Create one DireitoViolado
     * const DireitoViolado = await prisma.direitoViolado.create({
     *   data: {
     *     // ... data to create a DireitoViolado
     *   }
     * })
     * 
     */
    create<T extends DireitoVioladoCreateArgs>(args: SelectSubset<T, DireitoVioladoCreateArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DireitoViolados.
     * @param {DireitoVioladoCreateManyArgs} args - Arguments to create many DireitoViolados.
     * @example
     * // Create many DireitoViolados
     * const direitoViolado = await prisma.direitoViolado.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DireitoVioladoCreateManyArgs>(args?: SelectSubset<T, DireitoVioladoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DireitoViolados and returns the data saved in the database.
     * @param {DireitoVioladoCreateManyAndReturnArgs} args - Arguments to create many DireitoViolados.
     * @example
     * // Create many DireitoViolados
     * const direitoViolado = await prisma.direitoViolado.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DireitoViolados and only return the `id`
     * const direitoVioladoWithIdOnly = await prisma.direitoViolado.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DireitoVioladoCreateManyAndReturnArgs>(args?: SelectSubset<T, DireitoVioladoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DireitoViolado.
     * @param {DireitoVioladoDeleteArgs} args - Arguments to delete one DireitoViolado.
     * @example
     * // Delete one DireitoViolado
     * const DireitoViolado = await prisma.direitoViolado.delete({
     *   where: {
     *     // ... filter to delete one DireitoViolado
     *   }
     * })
     * 
     */
    delete<T extends DireitoVioladoDeleteArgs>(args: SelectSubset<T, DireitoVioladoDeleteArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DireitoViolado.
     * @param {DireitoVioladoUpdateArgs} args - Arguments to update one DireitoViolado.
     * @example
     * // Update one DireitoViolado
     * const direitoViolado = await prisma.direitoViolado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DireitoVioladoUpdateArgs>(args: SelectSubset<T, DireitoVioladoUpdateArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DireitoViolados.
     * @param {DireitoVioladoDeleteManyArgs} args - Arguments to filter DireitoViolados to delete.
     * @example
     * // Delete a few DireitoViolados
     * const { count } = await prisma.direitoViolado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DireitoVioladoDeleteManyArgs>(args?: SelectSubset<T, DireitoVioladoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DireitoViolados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DireitoViolados
     * const direitoViolado = await prisma.direitoViolado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DireitoVioladoUpdateManyArgs>(args: SelectSubset<T, DireitoVioladoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DireitoViolados and returns the data updated in the database.
     * @param {DireitoVioladoUpdateManyAndReturnArgs} args - Arguments to update many DireitoViolados.
     * @example
     * // Update many DireitoViolados
     * const direitoViolado = await prisma.direitoViolado.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DireitoViolados and only return the `id`
     * const direitoVioladoWithIdOnly = await prisma.direitoViolado.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DireitoVioladoUpdateManyAndReturnArgs>(args: SelectSubset<T, DireitoVioladoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DireitoViolado.
     * @param {DireitoVioladoUpsertArgs} args - Arguments to update or create a DireitoViolado.
     * @example
     * // Update or create a DireitoViolado
     * const direitoViolado = await prisma.direitoViolado.upsert({
     *   create: {
     *     // ... data to create a DireitoViolado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DireitoViolado we want to update
     *   }
     * })
     */
    upsert<T extends DireitoVioladoUpsertArgs>(args: SelectSubset<T, DireitoVioladoUpsertArgs<ExtArgs>>): Prisma__DireitoVioladoClient<$Result.GetResult<Prisma.$DireitoVioladoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DireitoViolados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoCountArgs} args - Arguments to filter DireitoViolados to count.
     * @example
     * // Count the number of DireitoViolados
     * const count = await prisma.direitoViolado.count({
     *   where: {
     *     // ... the filter for the DireitoViolados we want to count
     *   }
     * })
    **/
    count<T extends DireitoVioladoCountArgs>(
      args?: Subset<T, DireitoVioladoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DireitoVioladoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DireitoViolado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DireitoVioladoAggregateArgs>(args: Subset<T, DireitoVioladoAggregateArgs>): Prisma.PrismaPromise<GetDireitoVioladoAggregateType<T>>

    /**
     * Group by DireitoViolado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DireitoVioladoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DireitoVioladoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DireitoVioladoGroupByArgs['orderBy'] }
        : { orderBy?: DireitoVioladoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DireitoVioladoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDireitoVioladoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DireitoViolado model
   */
  readonly fields: DireitoVioladoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DireitoViolado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DireitoVioladoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projetos<T extends DireitoViolado$projetosArgs<ExtArgs> = {}>(args?: Subset<T, DireitoViolado$projetosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DireitoViolado model
   */
  interface DireitoVioladoFieldRefs {
    readonly id: FieldRef<"DireitoViolado", 'String'>
    readonly nome: FieldRef<"DireitoViolado", 'String'>
    readonly sigla: FieldRef<"DireitoViolado", 'String'>
    readonly descricao: FieldRef<"DireitoViolado", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DireitoViolado findUnique
   */
  export type DireitoVioladoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * Filter, which DireitoViolado to fetch.
     */
    where: DireitoVioladoWhereUniqueInput
  }

  /**
   * DireitoViolado findUniqueOrThrow
   */
  export type DireitoVioladoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * Filter, which DireitoViolado to fetch.
     */
    where: DireitoVioladoWhereUniqueInput
  }

  /**
   * DireitoViolado findFirst
   */
  export type DireitoVioladoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * Filter, which DireitoViolado to fetch.
     */
    where?: DireitoVioladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireitoViolados to fetch.
     */
    orderBy?: DireitoVioladoOrderByWithRelationInput | DireitoVioladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DireitoViolados.
     */
    cursor?: DireitoVioladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireitoViolados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireitoViolados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DireitoViolados.
     */
    distinct?: DireitoVioladoScalarFieldEnum | DireitoVioladoScalarFieldEnum[]
  }

  /**
   * DireitoViolado findFirstOrThrow
   */
  export type DireitoVioladoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * Filter, which DireitoViolado to fetch.
     */
    where?: DireitoVioladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireitoViolados to fetch.
     */
    orderBy?: DireitoVioladoOrderByWithRelationInput | DireitoVioladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DireitoViolados.
     */
    cursor?: DireitoVioladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireitoViolados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireitoViolados.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DireitoViolados.
     */
    distinct?: DireitoVioladoScalarFieldEnum | DireitoVioladoScalarFieldEnum[]
  }

  /**
   * DireitoViolado findMany
   */
  export type DireitoVioladoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * Filter, which DireitoViolados to fetch.
     */
    where?: DireitoVioladoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DireitoViolados to fetch.
     */
    orderBy?: DireitoVioladoOrderByWithRelationInput | DireitoVioladoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DireitoViolados.
     */
    cursor?: DireitoVioladoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DireitoViolados from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DireitoViolados.
     */
    skip?: number
    distinct?: DireitoVioladoScalarFieldEnum | DireitoVioladoScalarFieldEnum[]
  }

  /**
   * DireitoViolado create
   */
  export type DireitoVioladoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * The data needed to create a DireitoViolado.
     */
    data: XOR<DireitoVioladoCreateInput, DireitoVioladoUncheckedCreateInput>
  }

  /**
   * DireitoViolado createMany
   */
  export type DireitoVioladoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DireitoViolados.
     */
    data: DireitoVioladoCreateManyInput | DireitoVioladoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DireitoViolado createManyAndReturn
   */
  export type DireitoVioladoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * The data used to create many DireitoViolados.
     */
    data: DireitoVioladoCreateManyInput | DireitoVioladoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DireitoViolado update
   */
  export type DireitoVioladoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * The data needed to update a DireitoViolado.
     */
    data: XOR<DireitoVioladoUpdateInput, DireitoVioladoUncheckedUpdateInput>
    /**
     * Choose, which DireitoViolado to update.
     */
    where: DireitoVioladoWhereUniqueInput
  }

  /**
   * DireitoViolado updateMany
   */
  export type DireitoVioladoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DireitoViolados.
     */
    data: XOR<DireitoVioladoUpdateManyMutationInput, DireitoVioladoUncheckedUpdateManyInput>
    /**
     * Filter which DireitoViolados to update
     */
    where?: DireitoVioladoWhereInput
    /**
     * Limit how many DireitoViolados to update.
     */
    limit?: number
  }

  /**
   * DireitoViolado updateManyAndReturn
   */
  export type DireitoVioladoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * The data used to update DireitoViolados.
     */
    data: XOR<DireitoVioladoUpdateManyMutationInput, DireitoVioladoUncheckedUpdateManyInput>
    /**
     * Filter which DireitoViolados to update
     */
    where?: DireitoVioladoWhereInput
    /**
     * Limit how many DireitoViolados to update.
     */
    limit?: number
  }

  /**
   * DireitoViolado upsert
   */
  export type DireitoVioladoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * The filter to search for the DireitoViolado to update in case it exists.
     */
    where: DireitoVioladoWhereUniqueInput
    /**
     * In case the DireitoViolado found by the `where` argument doesn't exist, create a new DireitoViolado with this data.
     */
    create: XOR<DireitoVioladoCreateInput, DireitoVioladoUncheckedCreateInput>
    /**
     * In case the DireitoViolado was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DireitoVioladoUpdateInput, DireitoVioladoUncheckedUpdateInput>
  }

  /**
   * DireitoViolado delete
   */
  export type DireitoVioladoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
    /**
     * Filter which DireitoViolado to delete.
     */
    where: DireitoVioladoWhereUniqueInput
  }

  /**
   * DireitoViolado deleteMany
   */
  export type DireitoVioladoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DireitoViolados to delete
     */
    where?: DireitoVioladoWhereInput
    /**
     * Limit how many DireitoViolados to delete.
     */
    limit?: number
  }

  /**
   * DireitoViolado.projetos
   */
  export type DireitoViolado$projetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    cursor?: ProjetoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * DireitoViolado without action
   */
  export type DireitoVioladoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DireitoViolado
     */
    select?: DireitoVioladoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DireitoViolado
     */
    omit?: DireitoVioladoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DireitoVioladoInclude<ExtArgs> | null
  }


  /**
   * Model Ideologia
   */

  export type AggregateIdeologia = {
    _count: IdeologiaCountAggregateOutputType | null
    _min: IdeologiaMinAggregateOutputType | null
    _max: IdeologiaMaxAggregateOutputType | null
  }

  export type IdeologiaMinAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type IdeologiaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type IdeologiaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type IdeologiaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type IdeologiaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type IdeologiaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type IdeologiaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ideologia to aggregate.
     */
    where?: IdeologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ideologias to fetch.
     */
    orderBy?: IdeologiaOrderByWithRelationInput | IdeologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IdeologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ideologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ideologias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ideologias
    **/
    _count?: true | IdeologiaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IdeologiaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IdeologiaMaxAggregateInputType
  }

  export type GetIdeologiaAggregateType<T extends IdeologiaAggregateArgs> = {
        [P in keyof T & keyof AggregateIdeologia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIdeologia[P]>
      : GetScalarType<T[P], AggregateIdeologia[P]>
  }




  export type IdeologiaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdeologiaWhereInput
    orderBy?: IdeologiaOrderByWithAggregationInput | IdeologiaOrderByWithAggregationInput[]
    by: IdeologiaScalarFieldEnum[] | IdeologiaScalarFieldEnum
    having?: IdeologiaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IdeologiaCountAggregateInputType | true
    _min?: IdeologiaMinAggregateInputType
    _max?: IdeologiaMaxAggregateInputType
  }

  export type IdeologiaGroupByOutputType = {
    id: string
    nome: string
    _count: IdeologiaCountAggregateOutputType | null
    _min: IdeologiaMinAggregateOutputType | null
    _max: IdeologiaMaxAggregateOutputType | null
  }

  type GetIdeologiaGroupByPayload<T extends IdeologiaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IdeologiaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IdeologiaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IdeologiaGroupByOutputType[P]>
            : GetScalarType<T[P], IdeologiaGroupByOutputType[P]>
        }
      >
    >


  export type IdeologiaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    projetos?: boolean | Ideologia$projetosArgs<ExtArgs>
    _count?: boolean | IdeologiaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ideologia"]>

  export type IdeologiaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["ideologia"]>

  export type IdeologiaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["ideologia"]>

  export type IdeologiaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type IdeologiaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["ideologia"]>
  export type IdeologiaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | Ideologia$projetosArgs<ExtArgs>
    _count?: boolean | IdeologiaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IdeologiaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type IdeologiaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IdeologiaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ideologia"
    objects: {
      projetos: Prisma.$ProjetoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
    }, ExtArgs["result"]["ideologia"]>
    composites: {}
  }

  type IdeologiaGetPayload<S extends boolean | null | undefined | IdeologiaDefaultArgs> = $Result.GetResult<Prisma.$IdeologiaPayload, S>

  type IdeologiaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IdeologiaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IdeologiaCountAggregateInputType | true
    }

  export interface IdeologiaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ideologia'], meta: { name: 'Ideologia' } }
    /**
     * Find zero or one Ideologia that matches the filter.
     * @param {IdeologiaFindUniqueArgs} args - Arguments to find a Ideologia
     * @example
     * // Get one Ideologia
     * const ideologia = await prisma.ideologia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IdeologiaFindUniqueArgs>(args: SelectSubset<T, IdeologiaFindUniqueArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ideologia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IdeologiaFindUniqueOrThrowArgs} args - Arguments to find a Ideologia
     * @example
     * // Get one Ideologia
     * const ideologia = await prisma.ideologia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IdeologiaFindUniqueOrThrowArgs>(args: SelectSubset<T, IdeologiaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ideologia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaFindFirstArgs} args - Arguments to find a Ideologia
     * @example
     * // Get one Ideologia
     * const ideologia = await prisma.ideologia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IdeologiaFindFirstArgs>(args?: SelectSubset<T, IdeologiaFindFirstArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ideologia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaFindFirstOrThrowArgs} args - Arguments to find a Ideologia
     * @example
     * // Get one Ideologia
     * const ideologia = await prisma.ideologia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IdeologiaFindFirstOrThrowArgs>(args?: SelectSubset<T, IdeologiaFindFirstOrThrowArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ideologias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ideologias
     * const ideologias = await prisma.ideologia.findMany()
     * 
     * // Get first 10 Ideologias
     * const ideologias = await prisma.ideologia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ideologiaWithIdOnly = await prisma.ideologia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IdeologiaFindManyArgs>(args?: SelectSubset<T, IdeologiaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ideologia.
     * @param {IdeologiaCreateArgs} args - Arguments to create a Ideologia.
     * @example
     * // Create one Ideologia
     * const Ideologia = await prisma.ideologia.create({
     *   data: {
     *     // ... data to create a Ideologia
     *   }
     * })
     * 
     */
    create<T extends IdeologiaCreateArgs>(args: SelectSubset<T, IdeologiaCreateArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ideologias.
     * @param {IdeologiaCreateManyArgs} args - Arguments to create many Ideologias.
     * @example
     * // Create many Ideologias
     * const ideologia = await prisma.ideologia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IdeologiaCreateManyArgs>(args?: SelectSubset<T, IdeologiaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ideologias and returns the data saved in the database.
     * @param {IdeologiaCreateManyAndReturnArgs} args - Arguments to create many Ideologias.
     * @example
     * // Create many Ideologias
     * const ideologia = await prisma.ideologia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ideologias and only return the `id`
     * const ideologiaWithIdOnly = await prisma.ideologia.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IdeologiaCreateManyAndReturnArgs>(args?: SelectSubset<T, IdeologiaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ideologia.
     * @param {IdeologiaDeleteArgs} args - Arguments to delete one Ideologia.
     * @example
     * // Delete one Ideologia
     * const Ideologia = await prisma.ideologia.delete({
     *   where: {
     *     // ... filter to delete one Ideologia
     *   }
     * })
     * 
     */
    delete<T extends IdeologiaDeleteArgs>(args: SelectSubset<T, IdeologiaDeleteArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ideologia.
     * @param {IdeologiaUpdateArgs} args - Arguments to update one Ideologia.
     * @example
     * // Update one Ideologia
     * const ideologia = await prisma.ideologia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IdeologiaUpdateArgs>(args: SelectSubset<T, IdeologiaUpdateArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ideologias.
     * @param {IdeologiaDeleteManyArgs} args - Arguments to filter Ideologias to delete.
     * @example
     * // Delete a few Ideologias
     * const { count } = await prisma.ideologia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IdeologiaDeleteManyArgs>(args?: SelectSubset<T, IdeologiaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ideologias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ideologias
     * const ideologia = await prisma.ideologia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IdeologiaUpdateManyArgs>(args: SelectSubset<T, IdeologiaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ideologias and returns the data updated in the database.
     * @param {IdeologiaUpdateManyAndReturnArgs} args - Arguments to update many Ideologias.
     * @example
     * // Update many Ideologias
     * const ideologia = await prisma.ideologia.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ideologias and only return the `id`
     * const ideologiaWithIdOnly = await prisma.ideologia.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IdeologiaUpdateManyAndReturnArgs>(args: SelectSubset<T, IdeologiaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ideologia.
     * @param {IdeologiaUpsertArgs} args - Arguments to update or create a Ideologia.
     * @example
     * // Update or create a Ideologia
     * const ideologia = await prisma.ideologia.upsert({
     *   create: {
     *     // ... data to create a Ideologia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ideologia we want to update
     *   }
     * })
     */
    upsert<T extends IdeologiaUpsertArgs>(args: SelectSubset<T, IdeologiaUpsertArgs<ExtArgs>>): Prisma__IdeologiaClient<$Result.GetResult<Prisma.$IdeologiaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ideologias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaCountArgs} args - Arguments to filter Ideologias to count.
     * @example
     * // Count the number of Ideologias
     * const count = await prisma.ideologia.count({
     *   where: {
     *     // ... the filter for the Ideologias we want to count
     *   }
     * })
    **/
    count<T extends IdeologiaCountArgs>(
      args?: Subset<T, IdeologiaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IdeologiaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ideologia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IdeologiaAggregateArgs>(args: Subset<T, IdeologiaAggregateArgs>): Prisma.PrismaPromise<GetIdeologiaAggregateType<T>>

    /**
     * Group by Ideologia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdeologiaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IdeologiaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IdeologiaGroupByArgs['orderBy'] }
        : { orderBy?: IdeologiaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IdeologiaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdeologiaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ideologia model
   */
  readonly fields: IdeologiaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ideologia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IdeologiaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projetos<T extends Ideologia$projetosArgs<ExtArgs> = {}>(args?: Subset<T, Ideologia$projetosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ideologia model
   */
  interface IdeologiaFieldRefs {
    readonly id: FieldRef<"Ideologia", 'String'>
    readonly nome: FieldRef<"Ideologia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ideologia findUnique
   */
  export type IdeologiaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * Filter, which Ideologia to fetch.
     */
    where: IdeologiaWhereUniqueInput
  }

  /**
   * Ideologia findUniqueOrThrow
   */
  export type IdeologiaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * Filter, which Ideologia to fetch.
     */
    where: IdeologiaWhereUniqueInput
  }

  /**
   * Ideologia findFirst
   */
  export type IdeologiaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * Filter, which Ideologia to fetch.
     */
    where?: IdeologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ideologias to fetch.
     */
    orderBy?: IdeologiaOrderByWithRelationInput | IdeologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ideologias.
     */
    cursor?: IdeologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ideologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ideologias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ideologias.
     */
    distinct?: IdeologiaScalarFieldEnum | IdeologiaScalarFieldEnum[]
  }

  /**
   * Ideologia findFirstOrThrow
   */
  export type IdeologiaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * Filter, which Ideologia to fetch.
     */
    where?: IdeologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ideologias to fetch.
     */
    orderBy?: IdeologiaOrderByWithRelationInput | IdeologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ideologias.
     */
    cursor?: IdeologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ideologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ideologias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ideologias.
     */
    distinct?: IdeologiaScalarFieldEnum | IdeologiaScalarFieldEnum[]
  }

  /**
   * Ideologia findMany
   */
  export type IdeologiaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * Filter, which Ideologias to fetch.
     */
    where?: IdeologiaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ideologias to fetch.
     */
    orderBy?: IdeologiaOrderByWithRelationInput | IdeologiaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ideologias.
     */
    cursor?: IdeologiaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ideologias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ideologias.
     */
    skip?: number
    distinct?: IdeologiaScalarFieldEnum | IdeologiaScalarFieldEnum[]
  }

  /**
   * Ideologia create
   */
  export type IdeologiaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * The data needed to create a Ideologia.
     */
    data: XOR<IdeologiaCreateInput, IdeologiaUncheckedCreateInput>
  }

  /**
   * Ideologia createMany
   */
  export type IdeologiaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ideologias.
     */
    data: IdeologiaCreateManyInput | IdeologiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ideologia createManyAndReturn
   */
  export type IdeologiaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * The data used to create many Ideologias.
     */
    data: IdeologiaCreateManyInput | IdeologiaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ideologia update
   */
  export type IdeologiaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * The data needed to update a Ideologia.
     */
    data: XOR<IdeologiaUpdateInput, IdeologiaUncheckedUpdateInput>
    /**
     * Choose, which Ideologia to update.
     */
    where: IdeologiaWhereUniqueInput
  }

  /**
   * Ideologia updateMany
   */
  export type IdeologiaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ideologias.
     */
    data: XOR<IdeologiaUpdateManyMutationInput, IdeologiaUncheckedUpdateManyInput>
    /**
     * Filter which Ideologias to update
     */
    where?: IdeologiaWhereInput
    /**
     * Limit how many Ideologias to update.
     */
    limit?: number
  }

  /**
   * Ideologia updateManyAndReturn
   */
  export type IdeologiaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * The data used to update Ideologias.
     */
    data: XOR<IdeologiaUpdateManyMutationInput, IdeologiaUncheckedUpdateManyInput>
    /**
     * Filter which Ideologias to update
     */
    where?: IdeologiaWhereInput
    /**
     * Limit how many Ideologias to update.
     */
    limit?: number
  }

  /**
   * Ideologia upsert
   */
  export type IdeologiaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * The filter to search for the Ideologia to update in case it exists.
     */
    where: IdeologiaWhereUniqueInput
    /**
     * In case the Ideologia found by the `where` argument doesn't exist, create a new Ideologia with this data.
     */
    create: XOR<IdeologiaCreateInput, IdeologiaUncheckedCreateInput>
    /**
     * In case the Ideologia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IdeologiaUpdateInput, IdeologiaUncheckedUpdateInput>
  }

  /**
   * Ideologia delete
   */
  export type IdeologiaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
    /**
     * Filter which Ideologia to delete.
     */
    where: IdeologiaWhereUniqueInput
  }

  /**
   * Ideologia deleteMany
   */
  export type IdeologiaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ideologias to delete
     */
    where?: IdeologiaWhereInput
    /**
     * Limit how many Ideologias to delete.
     */
    limit?: number
  }

  /**
   * Ideologia.projetos
   */
  export type Ideologia$projetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    cursor?: ProjetoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Ideologia without action
   */
  export type IdeologiaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ideologia
     */
    select?: IdeologiaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ideologia
     */
    omit?: IdeologiaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdeologiaInclude<ExtArgs> | null
  }


  /**
   * Model Profissao
   */

  export type AggregateProfissao = {
    _count: ProfissaoCountAggregateOutputType | null
    _min: ProfissaoMinAggregateOutputType | null
    _max: ProfissaoMaxAggregateOutputType | null
  }

  export type ProfissaoMinAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type ProfissaoMaxAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type ProfissaoCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type ProfissaoMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ProfissaoMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type ProfissaoCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type ProfissaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profissao to aggregate.
     */
    where?: ProfissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profissaos to fetch.
     */
    orderBy?: ProfissaoOrderByWithRelationInput | ProfissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profissaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profissaos
    **/
    _count?: true | ProfissaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfissaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfissaoMaxAggregateInputType
  }

  export type GetProfissaoAggregateType<T extends ProfissaoAggregateArgs> = {
        [P in keyof T & keyof AggregateProfissao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfissao[P]>
      : GetScalarType<T[P], AggregateProfissao[P]>
  }




  export type ProfissaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfissaoWhereInput
    orderBy?: ProfissaoOrderByWithAggregationInput | ProfissaoOrderByWithAggregationInput[]
    by: ProfissaoScalarFieldEnum[] | ProfissaoScalarFieldEnum
    having?: ProfissaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfissaoCountAggregateInputType | true
    _min?: ProfissaoMinAggregateInputType
    _max?: ProfissaoMaxAggregateInputType
  }

  export type ProfissaoGroupByOutputType = {
    id: string
    nome: string
    _count: ProfissaoCountAggregateOutputType | null
    _min: ProfissaoMinAggregateOutputType | null
    _max: ProfissaoMaxAggregateOutputType | null
  }

  type GetProfissaoGroupByPayload<T extends ProfissaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfissaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfissaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfissaoGroupByOutputType[P]>
            : GetScalarType<T[P], ProfissaoGroupByOutputType[P]>
        }
      >
    >


  export type ProfissaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    politicos?: boolean | Profissao$politicosArgs<ExtArgs>
    _count?: boolean | ProfissaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profissao"]>

  export type ProfissaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["profissao"]>

  export type ProfissaoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["profissao"]>

  export type ProfissaoSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type ProfissaoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["profissao"]>
  export type ProfissaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    politicos?: boolean | Profissao$politicosArgs<ExtArgs>
    _count?: boolean | ProfissaoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfissaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfissaoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfissaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profissao"
    objects: {
      politicos: Prisma.$PoliticoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
    }, ExtArgs["result"]["profissao"]>
    composites: {}
  }

  type ProfissaoGetPayload<S extends boolean | null | undefined | ProfissaoDefaultArgs> = $Result.GetResult<Prisma.$ProfissaoPayload, S>

  type ProfissaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfissaoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfissaoCountAggregateInputType | true
    }

  export interface ProfissaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profissao'], meta: { name: 'Profissao' } }
    /**
     * Find zero or one Profissao that matches the filter.
     * @param {ProfissaoFindUniqueArgs} args - Arguments to find a Profissao
     * @example
     * // Get one Profissao
     * const profissao = await prisma.profissao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfissaoFindUniqueArgs>(args: SelectSubset<T, ProfissaoFindUniqueArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profissao that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfissaoFindUniqueOrThrowArgs} args - Arguments to find a Profissao
     * @example
     * // Get one Profissao
     * const profissao = await prisma.profissao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfissaoFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfissaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profissao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoFindFirstArgs} args - Arguments to find a Profissao
     * @example
     * // Get one Profissao
     * const profissao = await prisma.profissao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfissaoFindFirstArgs>(args?: SelectSubset<T, ProfissaoFindFirstArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profissao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoFindFirstOrThrowArgs} args - Arguments to find a Profissao
     * @example
     * // Get one Profissao
     * const profissao = await prisma.profissao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfissaoFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfissaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profissaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profissaos
     * const profissaos = await prisma.profissao.findMany()
     * 
     * // Get first 10 Profissaos
     * const profissaos = await prisma.profissao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profissaoWithIdOnly = await prisma.profissao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfissaoFindManyArgs>(args?: SelectSubset<T, ProfissaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profissao.
     * @param {ProfissaoCreateArgs} args - Arguments to create a Profissao.
     * @example
     * // Create one Profissao
     * const Profissao = await prisma.profissao.create({
     *   data: {
     *     // ... data to create a Profissao
     *   }
     * })
     * 
     */
    create<T extends ProfissaoCreateArgs>(args: SelectSubset<T, ProfissaoCreateArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profissaos.
     * @param {ProfissaoCreateManyArgs} args - Arguments to create many Profissaos.
     * @example
     * // Create many Profissaos
     * const profissao = await prisma.profissao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfissaoCreateManyArgs>(args?: SelectSubset<T, ProfissaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profissaos and returns the data saved in the database.
     * @param {ProfissaoCreateManyAndReturnArgs} args - Arguments to create many Profissaos.
     * @example
     * // Create many Profissaos
     * const profissao = await prisma.profissao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profissaos and only return the `id`
     * const profissaoWithIdOnly = await prisma.profissao.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfissaoCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfissaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profissao.
     * @param {ProfissaoDeleteArgs} args - Arguments to delete one Profissao.
     * @example
     * // Delete one Profissao
     * const Profissao = await prisma.profissao.delete({
     *   where: {
     *     // ... filter to delete one Profissao
     *   }
     * })
     * 
     */
    delete<T extends ProfissaoDeleteArgs>(args: SelectSubset<T, ProfissaoDeleteArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profissao.
     * @param {ProfissaoUpdateArgs} args - Arguments to update one Profissao.
     * @example
     * // Update one Profissao
     * const profissao = await prisma.profissao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfissaoUpdateArgs>(args: SelectSubset<T, ProfissaoUpdateArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profissaos.
     * @param {ProfissaoDeleteManyArgs} args - Arguments to filter Profissaos to delete.
     * @example
     * // Delete a few Profissaos
     * const { count } = await prisma.profissao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfissaoDeleteManyArgs>(args?: SelectSubset<T, ProfissaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profissaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profissaos
     * const profissao = await prisma.profissao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfissaoUpdateManyArgs>(args: SelectSubset<T, ProfissaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profissaos and returns the data updated in the database.
     * @param {ProfissaoUpdateManyAndReturnArgs} args - Arguments to update many Profissaos.
     * @example
     * // Update many Profissaos
     * const profissao = await prisma.profissao.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profissaos and only return the `id`
     * const profissaoWithIdOnly = await prisma.profissao.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfissaoUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfissaoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profissao.
     * @param {ProfissaoUpsertArgs} args - Arguments to update or create a Profissao.
     * @example
     * // Update or create a Profissao
     * const profissao = await prisma.profissao.upsert({
     *   create: {
     *     // ... data to create a Profissao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profissao we want to update
     *   }
     * })
     */
    upsert<T extends ProfissaoUpsertArgs>(args: SelectSubset<T, ProfissaoUpsertArgs<ExtArgs>>): Prisma__ProfissaoClient<$Result.GetResult<Prisma.$ProfissaoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profissaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoCountArgs} args - Arguments to filter Profissaos to count.
     * @example
     * // Count the number of Profissaos
     * const count = await prisma.profissao.count({
     *   where: {
     *     // ... the filter for the Profissaos we want to count
     *   }
     * })
    **/
    count<T extends ProfissaoCountArgs>(
      args?: Subset<T, ProfissaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfissaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profissao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfissaoAggregateArgs>(args: Subset<T, ProfissaoAggregateArgs>): Prisma.PrismaPromise<GetProfissaoAggregateType<T>>

    /**
     * Group by Profissao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfissaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfissaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfissaoGroupByArgs['orderBy'] }
        : { orderBy?: ProfissaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfissaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfissaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profissao model
   */
  readonly fields: ProfissaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profissao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfissaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    politicos<T extends Profissao$politicosArgs<ExtArgs> = {}>(args?: Subset<T, Profissao$politicosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PoliticoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profissao model
   */
  interface ProfissaoFieldRefs {
    readonly id: FieldRef<"Profissao", 'String'>
    readonly nome: FieldRef<"Profissao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profissao findUnique
   */
  export type ProfissaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * Filter, which Profissao to fetch.
     */
    where: ProfissaoWhereUniqueInput
  }

  /**
   * Profissao findUniqueOrThrow
   */
  export type ProfissaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * Filter, which Profissao to fetch.
     */
    where: ProfissaoWhereUniqueInput
  }

  /**
   * Profissao findFirst
   */
  export type ProfissaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * Filter, which Profissao to fetch.
     */
    where?: ProfissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profissaos to fetch.
     */
    orderBy?: ProfissaoOrderByWithRelationInput | ProfissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profissaos.
     */
    cursor?: ProfissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profissaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profissaos.
     */
    distinct?: ProfissaoScalarFieldEnum | ProfissaoScalarFieldEnum[]
  }

  /**
   * Profissao findFirstOrThrow
   */
  export type ProfissaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * Filter, which Profissao to fetch.
     */
    where?: ProfissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profissaos to fetch.
     */
    orderBy?: ProfissaoOrderByWithRelationInput | ProfissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profissaos.
     */
    cursor?: ProfissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profissaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profissaos.
     */
    distinct?: ProfissaoScalarFieldEnum | ProfissaoScalarFieldEnum[]
  }

  /**
   * Profissao findMany
   */
  export type ProfissaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * Filter, which Profissaos to fetch.
     */
    where?: ProfissaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profissaos to fetch.
     */
    orderBy?: ProfissaoOrderByWithRelationInput | ProfissaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profissaos.
     */
    cursor?: ProfissaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profissaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profissaos.
     */
    skip?: number
    distinct?: ProfissaoScalarFieldEnum | ProfissaoScalarFieldEnum[]
  }

  /**
   * Profissao create
   */
  export type ProfissaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Profissao.
     */
    data: XOR<ProfissaoCreateInput, ProfissaoUncheckedCreateInput>
  }

  /**
   * Profissao createMany
   */
  export type ProfissaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profissaos.
     */
    data: ProfissaoCreateManyInput | ProfissaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profissao createManyAndReturn
   */
  export type ProfissaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * The data used to create many Profissaos.
     */
    data: ProfissaoCreateManyInput | ProfissaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profissao update
   */
  export type ProfissaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Profissao.
     */
    data: XOR<ProfissaoUpdateInput, ProfissaoUncheckedUpdateInput>
    /**
     * Choose, which Profissao to update.
     */
    where: ProfissaoWhereUniqueInput
  }

  /**
   * Profissao updateMany
   */
  export type ProfissaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profissaos.
     */
    data: XOR<ProfissaoUpdateManyMutationInput, ProfissaoUncheckedUpdateManyInput>
    /**
     * Filter which Profissaos to update
     */
    where?: ProfissaoWhereInput
    /**
     * Limit how many Profissaos to update.
     */
    limit?: number
  }

  /**
   * Profissao updateManyAndReturn
   */
  export type ProfissaoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * The data used to update Profissaos.
     */
    data: XOR<ProfissaoUpdateManyMutationInput, ProfissaoUncheckedUpdateManyInput>
    /**
     * Filter which Profissaos to update
     */
    where?: ProfissaoWhereInput
    /**
     * Limit how many Profissaos to update.
     */
    limit?: number
  }

  /**
   * Profissao upsert
   */
  export type ProfissaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Profissao to update in case it exists.
     */
    where: ProfissaoWhereUniqueInput
    /**
     * In case the Profissao found by the `where` argument doesn't exist, create a new Profissao with this data.
     */
    create: XOR<ProfissaoCreateInput, ProfissaoUncheckedCreateInput>
    /**
     * In case the Profissao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfissaoUpdateInput, ProfissaoUncheckedUpdateInput>
  }

  /**
   * Profissao delete
   */
  export type ProfissaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
    /**
     * Filter which Profissao to delete.
     */
    where: ProfissaoWhereUniqueInput
  }

  /**
   * Profissao deleteMany
   */
  export type ProfissaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profissaos to delete
     */
    where?: ProfissaoWhereInput
    /**
     * Limit how many Profissaos to delete.
     */
    limit?: number
  }

  /**
   * Profissao.politicos
   */
  export type Profissao$politicosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Politico
     */
    select?: PoliticoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Politico
     */
    omit?: PoliticoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PoliticoInclude<ExtArgs> | null
    where?: PoliticoWhereInput
    orderBy?: PoliticoOrderByWithRelationInput | PoliticoOrderByWithRelationInput[]
    cursor?: PoliticoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PoliticoScalarFieldEnum | PoliticoScalarFieldEnum[]
  }

  /**
   * Profissao without action
   */
  export type ProfissaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profissao
     */
    select?: ProfissaoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profissao
     */
    omit?: ProfissaoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfissaoInclude<ExtArgs> | null
  }


  /**
   * Model Esfera
   */

  export type AggregateEsfera = {
    _count: EsferaCountAggregateOutputType | null
    _min: EsferaMinAggregateOutputType | null
    _max: EsferaMaxAggregateOutputType | null
  }

  export type EsferaMinAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type EsferaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type EsferaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type EsferaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type EsferaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type EsferaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type EsferaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Esfera to aggregate.
     */
    where?: EsferaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esferas to fetch.
     */
    orderBy?: EsferaOrderByWithRelationInput | EsferaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EsferaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esferas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esferas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Esferas
    **/
    _count?: true | EsferaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EsferaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EsferaMaxAggregateInputType
  }

  export type GetEsferaAggregateType<T extends EsferaAggregateArgs> = {
        [P in keyof T & keyof AggregateEsfera]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEsfera[P]>
      : GetScalarType<T[P], AggregateEsfera[P]>
  }




  export type EsferaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EsferaWhereInput
    orderBy?: EsferaOrderByWithAggregationInput | EsferaOrderByWithAggregationInput[]
    by: EsferaScalarFieldEnum[] | EsferaScalarFieldEnum
    having?: EsferaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EsferaCountAggregateInputType | true
    _min?: EsferaMinAggregateInputType
    _max?: EsferaMaxAggregateInputType
  }

  export type EsferaGroupByOutputType = {
    id: string
    nome: string
    _count: EsferaCountAggregateOutputType | null
    _min: EsferaMinAggregateOutputType | null
    _max: EsferaMaxAggregateOutputType | null
  }

  type GetEsferaGroupByPayload<T extends EsferaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EsferaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EsferaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EsferaGroupByOutputType[P]>
            : GetScalarType<T[P], EsferaGroupByOutputType[P]>
        }
      >
    >


  export type EsferaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    projetos?: boolean | Esfera$projetosArgs<ExtArgs>
    _count?: boolean | EsferaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["esfera"]>

  export type EsferaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["esfera"]>

  export type EsferaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["esfera"]>

  export type EsferaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type EsferaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["esfera"]>
  export type EsferaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | Esfera$projetosArgs<ExtArgs>
    _count?: boolean | EsferaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EsferaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EsferaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EsferaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Esfera"
    objects: {
      projetos: Prisma.$ProjetoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
    }, ExtArgs["result"]["esfera"]>
    composites: {}
  }

  type EsferaGetPayload<S extends boolean | null | undefined | EsferaDefaultArgs> = $Result.GetResult<Prisma.$EsferaPayload, S>

  type EsferaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EsferaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EsferaCountAggregateInputType | true
    }

  export interface EsferaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Esfera'], meta: { name: 'Esfera' } }
    /**
     * Find zero or one Esfera that matches the filter.
     * @param {EsferaFindUniqueArgs} args - Arguments to find a Esfera
     * @example
     * // Get one Esfera
     * const esfera = await prisma.esfera.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EsferaFindUniqueArgs>(args: SelectSubset<T, EsferaFindUniqueArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Esfera that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EsferaFindUniqueOrThrowArgs} args - Arguments to find a Esfera
     * @example
     * // Get one Esfera
     * const esfera = await prisma.esfera.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EsferaFindUniqueOrThrowArgs>(args: SelectSubset<T, EsferaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Esfera that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaFindFirstArgs} args - Arguments to find a Esfera
     * @example
     * // Get one Esfera
     * const esfera = await prisma.esfera.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EsferaFindFirstArgs>(args?: SelectSubset<T, EsferaFindFirstArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Esfera that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaFindFirstOrThrowArgs} args - Arguments to find a Esfera
     * @example
     * // Get one Esfera
     * const esfera = await prisma.esfera.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EsferaFindFirstOrThrowArgs>(args?: SelectSubset<T, EsferaFindFirstOrThrowArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Esferas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Esferas
     * const esferas = await prisma.esfera.findMany()
     * 
     * // Get first 10 Esferas
     * const esferas = await prisma.esfera.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const esferaWithIdOnly = await prisma.esfera.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EsferaFindManyArgs>(args?: SelectSubset<T, EsferaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Esfera.
     * @param {EsferaCreateArgs} args - Arguments to create a Esfera.
     * @example
     * // Create one Esfera
     * const Esfera = await prisma.esfera.create({
     *   data: {
     *     // ... data to create a Esfera
     *   }
     * })
     * 
     */
    create<T extends EsferaCreateArgs>(args: SelectSubset<T, EsferaCreateArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Esferas.
     * @param {EsferaCreateManyArgs} args - Arguments to create many Esferas.
     * @example
     * // Create many Esferas
     * const esfera = await prisma.esfera.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EsferaCreateManyArgs>(args?: SelectSubset<T, EsferaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Esferas and returns the data saved in the database.
     * @param {EsferaCreateManyAndReturnArgs} args - Arguments to create many Esferas.
     * @example
     * // Create many Esferas
     * const esfera = await prisma.esfera.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Esferas and only return the `id`
     * const esferaWithIdOnly = await prisma.esfera.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EsferaCreateManyAndReturnArgs>(args?: SelectSubset<T, EsferaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Esfera.
     * @param {EsferaDeleteArgs} args - Arguments to delete one Esfera.
     * @example
     * // Delete one Esfera
     * const Esfera = await prisma.esfera.delete({
     *   where: {
     *     // ... filter to delete one Esfera
     *   }
     * })
     * 
     */
    delete<T extends EsferaDeleteArgs>(args: SelectSubset<T, EsferaDeleteArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Esfera.
     * @param {EsferaUpdateArgs} args - Arguments to update one Esfera.
     * @example
     * // Update one Esfera
     * const esfera = await prisma.esfera.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EsferaUpdateArgs>(args: SelectSubset<T, EsferaUpdateArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Esferas.
     * @param {EsferaDeleteManyArgs} args - Arguments to filter Esferas to delete.
     * @example
     * // Delete a few Esferas
     * const { count } = await prisma.esfera.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EsferaDeleteManyArgs>(args?: SelectSubset<T, EsferaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Esferas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Esferas
     * const esfera = await prisma.esfera.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EsferaUpdateManyArgs>(args: SelectSubset<T, EsferaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Esferas and returns the data updated in the database.
     * @param {EsferaUpdateManyAndReturnArgs} args - Arguments to update many Esferas.
     * @example
     * // Update many Esferas
     * const esfera = await prisma.esfera.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Esferas and only return the `id`
     * const esferaWithIdOnly = await prisma.esfera.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EsferaUpdateManyAndReturnArgs>(args: SelectSubset<T, EsferaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Esfera.
     * @param {EsferaUpsertArgs} args - Arguments to update or create a Esfera.
     * @example
     * // Update or create a Esfera
     * const esfera = await prisma.esfera.upsert({
     *   create: {
     *     // ... data to create a Esfera
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Esfera we want to update
     *   }
     * })
     */
    upsert<T extends EsferaUpsertArgs>(args: SelectSubset<T, EsferaUpsertArgs<ExtArgs>>): Prisma__EsferaClient<$Result.GetResult<Prisma.$EsferaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Esferas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaCountArgs} args - Arguments to filter Esferas to count.
     * @example
     * // Count the number of Esferas
     * const count = await prisma.esfera.count({
     *   where: {
     *     // ... the filter for the Esferas we want to count
     *   }
     * })
    **/
    count<T extends EsferaCountArgs>(
      args?: Subset<T, EsferaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EsferaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Esfera.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EsferaAggregateArgs>(args: Subset<T, EsferaAggregateArgs>): Prisma.PrismaPromise<GetEsferaAggregateType<T>>

    /**
     * Group by Esfera.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EsferaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EsferaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EsferaGroupByArgs['orderBy'] }
        : { orderBy?: EsferaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EsferaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEsferaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Esfera model
   */
  readonly fields: EsferaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Esfera.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EsferaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projetos<T extends Esfera$projetosArgs<ExtArgs> = {}>(args?: Subset<T, Esfera$projetosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Esfera model
   */
  interface EsferaFieldRefs {
    readonly id: FieldRef<"Esfera", 'String'>
    readonly nome: FieldRef<"Esfera", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Esfera findUnique
   */
  export type EsferaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * Filter, which Esfera to fetch.
     */
    where: EsferaWhereUniqueInput
  }

  /**
   * Esfera findUniqueOrThrow
   */
  export type EsferaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * Filter, which Esfera to fetch.
     */
    where: EsferaWhereUniqueInput
  }

  /**
   * Esfera findFirst
   */
  export type EsferaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * Filter, which Esfera to fetch.
     */
    where?: EsferaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esferas to fetch.
     */
    orderBy?: EsferaOrderByWithRelationInput | EsferaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Esferas.
     */
    cursor?: EsferaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esferas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esferas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Esferas.
     */
    distinct?: EsferaScalarFieldEnum | EsferaScalarFieldEnum[]
  }

  /**
   * Esfera findFirstOrThrow
   */
  export type EsferaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * Filter, which Esfera to fetch.
     */
    where?: EsferaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esferas to fetch.
     */
    orderBy?: EsferaOrderByWithRelationInput | EsferaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Esferas.
     */
    cursor?: EsferaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esferas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esferas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Esferas.
     */
    distinct?: EsferaScalarFieldEnum | EsferaScalarFieldEnum[]
  }

  /**
   * Esfera findMany
   */
  export type EsferaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * Filter, which Esferas to fetch.
     */
    where?: EsferaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Esferas to fetch.
     */
    orderBy?: EsferaOrderByWithRelationInput | EsferaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Esferas.
     */
    cursor?: EsferaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Esferas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Esferas.
     */
    skip?: number
    distinct?: EsferaScalarFieldEnum | EsferaScalarFieldEnum[]
  }

  /**
   * Esfera create
   */
  export type EsferaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * The data needed to create a Esfera.
     */
    data: XOR<EsferaCreateInput, EsferaUncheckedCreateInput>
  }

  /**
   * Esfera createMany
   */
  export type EsferaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Esferas.
     */
    data: EsferaCreateManyInput | EsferaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Esfera createManyAndReturn
   */
  export type EsferaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * The data used to create many Esferas.
     */
    data: EsferaCreateManyInput | EsferaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Esfera update
   */
  export type EsferaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * The data needed to update a Esfera.
     */
    data: XOR<EsferaUpdateInput, EsferaUncheckedUpdateInput>
    /**
     * Choose, which Esfera to update.
     */
    where: EsferaWhereUniqueInput
  }

  /**
   * Esfera updateMany
   */
  export type EsferaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Esferas.
     */
    data: XOR<EsferaUpdateManyMutationInput, EsferaUncheckedUpdateManyInput>
    /**
     * Filter which Esferas to update
     */
    where?: EsferaWhereInput
    /**
     * Limit how many Esferas to update.
     */
    limit?: number
  }

  /**
   * Esfera updateManyAndReturn
   */
  export type EsferaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * The data used to update Esferas.
     */
    data: XOR<EsferaUpdateManyMutationInput, EsferaUncheckedUpdateManyInput>
    /**
     * Filter which Esferas to update
     */
    where?: EsferaWhereInput
    /**
     * Limit how many Esferas to update.
     */
    limit?: number
  }

  /**
   * Esfera upsert
   */
  export type EsferaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * The filter to search for the Esfera to update in case it exists.
     */
    where: EsferaWhereUniqueInput
    /**
     * In case the Esfera found by the `where` argument doesn't exist, create a new Esfera with this data.
     */
    create: XOR<EsferaCreateInput, EsferaUncheckedCreateInput>
    /**
     * In case the Esfera was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EsferaUpdateInput, EsferaUncheckedUpdateInput>
  }

  /**
   * Esfera delete
   */
  export type EsferaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
    /**
     * Filter which Esfera to delete.
     */
    where: EsferaWhereUniqueInput
  }

  /**
   * Esfera deleteMany
   */
  export type EsferaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Esferas to delete
     */
    where?: EsferaWhereInput
    /**
     * Limit how many Esferas to delete.
     */
    limit?: number
  }

  /**
   * Esfera.projetos
   */
  export type Esfera$projetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    cursor?: ProjetoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Esfera without action
   */
  export type EsferaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Esfera
     */
    select?: EsferaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Esfera
     */
    omit?: EsferaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EsferaInclude<ExtArgs> | null
  }


  /**
   * Model Pauta
   */

  export type AggregatePauta = {
    _count: PautaCountAggregateOutputType | null
    _min: PautaMinAggregateOutputType | null
    _max: PautaMaxAggregateOutputType | null
  }

  export type PautaMinAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type PautaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
  }

  export type PautaCountAggregateOutputType = {
    id: number
    nome: number
    _all: number
  }


  export type PautaMinAggregateInputType = {
    id?: true
    nome?: true
  }

  export type PautaMaxAggregateInputType = {
    id?: true
    nome?: true
  }

  export type PautaCountAggregateInputType = {
    id?: true
    nome?: true
    _all?: true
  }

  export type PautaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pauta to aggregate.
     */
    where?: PautaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pautas to fetch.
     */
    orderBy?: PautaOrderByWithRelationInput | PautaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PautaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pautas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pautas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pautas
    **/
    _count?: true | PautaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PautaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PautaMaxAggregateInputType
  }

  export type GetPautaAggregateType<T extends PautaAggregateArgs> = {
        [P in keyof T & keyof AggregatePauta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePauta[P]>
      : GetScalarType<T[P], AggregatePauta[P]>
  }




  export type PautaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PautaWhereInput
    orderBy?: PautaOrderByWithAggregationInput | PautaOrderByWithAggregationInput[]
    by: PautaScalarFieldEnum[] | PautaScalarFieldEnum
    having?: PautaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PautaCountAggregateInputType | true
    _min?: PautaMinAggregateInputType
    _max?: PautaMaxAggregateInputType
  }

  export type PautaGroupByOutputType = {
    id: string
    nome: string
    _count: PautaCountAggregateOutputType | null
    _min: PautaMinAggregateOutputType | null
    _max: PautaMaxAggregateOutputType | null
  }

  type GetPautaGroupByPayload<T extends PautaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PautaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PautaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PautaGroupByOutputType[P]>
            : GetScalarType<T[P], PautaGroupByOutputType[P]>
        }
      >
    >


  export type PautaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    projetos?: boolean | Pauta$projetosArgs<ExtArgs>
    _count?: boolean | PautaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pauta"]>

  export type PautaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["pauta"]>

  export type PautaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["pauta"]>

  export type PautaSelectScalar = {
    id?: boolean
    nome?: boolean
  }

  export type PautaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome", ExtArgs["result"]["pauta"]>
  export type PautaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    projetos?: boolean | Pauta$projetosArgs<ExtArgs>
    _count?: boolean | PautaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PautaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PautaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PautaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pauta"
    objects: {
      projetos: Prisma.$ProjetoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
    }, ExtArgs["result"]["pauta"]>
    composites: {}
  }

  type PautaGetPayload<S extends boolean | null | undefined | PautaDefaultArgs> = $Result.GetResult<Prisma.$PautaPayload, S>

  type PautaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PautaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PautaCountAggregateInputType | true
    }

  export interface PautaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pauta'], meta: { name: 'Pauta' } }
    /**
     * Find zero or one Pauta that matches the filter.
     * @param {PautaFindUniqueArgs} args - Arguments to find a Pauta
     * @example
     * // Get one Pauta
     * const pauta = await prisma.pauta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PautaFindUniqueArgs>(args: SelectSubset<T, PautaFindUniqueArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pauta that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PautaFindUniqueOrThrowArgs} args - Arguments to find a Pauta
     * @example
     * // Get one Pauta
     * const pauta = await prisma.pauta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PautaFindUniqueOrThrowArgs>(args: SelectSubset<T, PautaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pauta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaFindFirstArgs} args - Arguments to find a Pauta
     * @example
     * // Get one Pauta
     * const pauta = await prisma.pauta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PautaFindFirstArgs>(args?: SelectSubset<T, PautaFindFirstArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pauta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaFindFirstOrThrowArgs} args - Arguments to find a Pauta
     * @example
     * // Get one Pauta
     * const pauta = await prisma.pauta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PautaFindFirstOrThrowArgs>(args?: SelectSubset<T, PautaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pautas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pautas
     * const pautas = await prisma.pauta.findMany()
     * 
     * // Get first 10 Pautas
     * const pautas = await prisma.pauta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pautaWithIdOnly = await prisma.pauta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PautaFindManyArgs>(args?: SelectSubset<T, PautaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pauta.
     * @param {PautaCreateArgs} args - Arguments to create a Pauta.
     * @example
     * // Create one Pauta
     * const Pauta = await prisma.pauta.create({
     *   data: {
     *     // ... data to create a Pauta
     *   }
     * })
     * 
     */
    create<T extends PautaCreateArgs>(args: SelectSubset<T, PautaCreateArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pautas.
     * @param {PautaCreateManyArgs} args - Arguments to create many Pautas.
     * @example
     * // Create many Pautas
     * const pauta = await prisma.pauta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PautaCreateManyArgs>(args?: SelectSubset<T, PautaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pautas and returns the data saved in the database.
     * @param {PautaCreateManyAndReturnArgs} args - Arguments to create many Pautas.
     * @example
     * // Create many Pautas
     * const pauta = await prisma.pauta.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pautas and only return the `id`
     * const pautaWithIdOnly = await prisma.pauta.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PautaCreateManyAndReturnArgs>(args?: SelectSubset<T, PautaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pauta.
     * @param {PautaDeleteArgs} args - Arguments to delete one Pauta.
     * @example
     * // Delete one Pauta
     * const Pauta = await prisma.pauta.delete({
     *   where: {
     *     // ... filter to delete one Pauta
     *   }
     * })
     * 
     */
    delete<T extends PautaDeleteArgs>(args: SelectSubset<T, PautaDeleteArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pauta.
     * @param {PautaUpdateArgs} args - Arguments to update one Pauta.
     * @example
     * // Update one Pauta
     * const pauta = await prisma.pauta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PautaUpdateArgs>(args: SelectSubset<T, PautaUpdateArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pautas.
     * @param {PautaDeleteManyArgs} args - Arguments to filter Pautas to delete.
     * @example
     * // Delete a few Pautas
     * const { count } = await prisma.pauta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PautaDeleteManyArgs>(args?: SelectSubset<T, PautaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pautas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pautas
     * const pauta = await prisma.pauta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PautaUpdateManyArgs>(args: SelectSubset<T, PautaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pautas and returns the data updated in the database.
     * @param {PautaUpdateManyAndReturnArgs} args - Arguments to update many Pautas.
     * @example
     * // Update many Pautas
     * const pauta = await prisma.pauta.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pautas and only return the `id`
     * const pautaWithIdOnly = await prisma.pauta.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PautaUpdateManyAndReturnArgs>(args: SelectSubset<T, PautaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pauta.
     * @param {PautaUpsertArgs} args - Arguments to update or create a Pauta.
     * @example
     * // Update or create a Pauta
     * const pauta = await prisma.pauta.upsert({
     *   create: {
     *     // ... data to create a Pauta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pauta we want to update
     *   }
     * })
     */
    upsert<T extends PautaUpsertArgs>(args: SelectSubset<T, PautaUpsertArgs<ExtArgs>>): Prisma__PautaClient<$Result.GetResult<Prisma.$PautaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pautas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaCountArgs} args - Arguments to filter Pautas to count.
     * @example
     * // Count the number of Pautas
     * const count = await prisma.pauta.count({
     *   where: {
     *     // ... the filter for the Pautas we want to count
     *   }
     * })
    **/
    count<T extends PautaCountArgs>(
      args?: Subset<T, PautaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PautaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pauta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PautaAggregateArgs>(args: Subset<T, PautaAggregateArgs>): Prisma.PrismaPromise<GetPautaAggregateType<T>>

    /**
     * Group by Pauta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PautaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PautaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PautaGroupByArgs['orderBy'] }
        : { orderBy?: PautaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PautaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPautaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pauta model
   */
  readonly fields: PautaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pauta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PautaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    projetos<T extends Pauta$projetosArgs<ExtArgs> = {}>(args?: Subset<T, Pauta$projetosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjetoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pauta model
   */
  interface PautaFieldRefs {
    readonly id: FieldRef<"Pauta", 'String'>
    readonly nome: FieldRef<"Pauta", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Pauta findUnique
   */
  export type PautaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * Filter, which Pauta to fetch.
     */
    where: PautaWhereUniqueInput
  }

  /**
   * Pauta findUniqueOrThrow
   */
  export type PautaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * Filter, which Pauta to fetch.
     */
    where: PautaWhereUniqueInput
  }

  /**
   * Pauta findFirst
   */
  export type PautaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * Filter, which Pauta to fetch.
     */
    where?: PautaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pautas to fetch.
     */
    orderBy?: PautaOrderByWithRelationInput | PautaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pautas.
     */
    cursor?: PautaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pautas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pautas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pautas.
     */
    distinct?: PautaScalarFieldEnum | PautaScalarFieldEnum[]
  }

  /**
   * Pauta findFirstOrThrow
   */
  export type PautaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * Filter, which Pauta to fetch.
     */
    where?: PautaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pautas to fetch.
     */
    orderBy?: PautaOrderByWithRelationInput | PautaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pautas.
     */
    cursor?: PautaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pautas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pautas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pautas.
     */
    distinct?: PautaScalarFieldEnum | PautaScalarFieldEnum[]
  }

  /**
   * Pauta findMany
   */
  export type PautaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * Filter, which Pautas to fetch.
     */
    where?: PautaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pautas to fetch.
     */
    orderBy?: PautaOrderByWithRelationInput | PautaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pautas.
     */
    cursor?: PautaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pautas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pautas.
     */
    skip?: number
    distinct?: PautaScalarFieldEnum | PautaScalarFieldEnum[]
  }

  /**
   * Pauta create
   */
  export type PautaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * The data needed to create a Pauta.
     */
    data: XOR<PautaCreateInput, PautaUncheckedCreateInput>
  }

  /**
   * Pauta createMany
   */
  export type PautaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pautas.
     */
    data: PautaCreateManyInput | PautaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pauta createManyAndReturn
   */
  export type PautaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * The data used to create many Pautas.
     */
    data: PautaCreateManyInput | PautaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pauta update
   */
  export type PautaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * The data needed to update a Pauta.
     */
    data: XOR<PautaUpdateInput, PautaUncheckedUpdateInput>
    /**
     * Choose, which Pauta to update.
     */
    where: PautaWhereUniqueInput
  }

  /**
   * Pauta updateMany
   */
  export type PautaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pautas.
     */
    data: XOR<PautaUpdateManyMutationInput, PautaUncheckedUpdateManyInput>
    /**
     * Filter which Pautas to update
     */
    where?: PautaWhereInput
    /**
     * Limit how many Pautas to update.
     */
    limit?: number
  }

  /**
   * Pauta updateManyAndReturn
   */
  export type PautaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * The data used to update Pautas.
     */
    data: XOR<PautaUpdateManyMutationInput, PautaUncheckedUpdateManyInput>
    /**
     * Filter which Pautas to update
     */
    where?: PautaWhereInput
    /**
     * Limit how many Pautas to update.
     */
    limit?: number
  }

  /**
   * Pauta upsert
   */
  export type PautaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * The filter to search for the Pauta to update in case it exists.
     */
    where: PautaWhereUniqueInput
    /**
     * In case the Pauta found by the `where` argument doesn't exist, create a new Pauta with this data.
     */
    create: XOR<PautaCreateInput, PautaUncheckedCreateInput>
    /**
     * In case the Pauta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PautaUpdateInput, PautaUncheckedUpdateInput>
  }

  /**
   * Pauta delete
   */
  export type PautaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
    /**
     * Filter which Pauta to delete.
     */
    where: PautaWhereUniqueInput
  }

  /**
   * Pauta deleteMany
   */
  export type PautaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pautas to delete
     */
    where?: PautaWhereInput
    /**
     * Limit how many Pautas to delete.
     */
    limit?: number
  }

  /**
   * Pauta.projetos
   */
  export type Pauta$projetosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Projeto
     */
    select?: ProjetoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Projeto
     */
    omit?: ProjetoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjetoInclude<ExtArgs> | null
    where?: ProjetoWhereInput
    orderBy?: ProjetoOrderByWithRelationInput | ProjetoOrderByWithRelationInput[]
    cursor?: ProjetoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjetoScalarFieldEnum | ProjetoScalarFieldEnum[]
  }

  /**
   * Pauta without action
   */
  export type PautaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pauta
     */
    select?: PautaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pauta
     */
    omit?: PautaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PautaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProjetoScalarFieldEnum: {
    id: 'id',
    ano: 'ano',
    ementa: 'ementa',
    pautaId: 'pautaId',
    esferaId: 'esferaId',
    numeroPl: 'numeroPl',
    justificativa: 'justificativa'
  };

  export type ProjetoScalarFieldEnum = (typeof ProjetoScalarFieldEnum)[keyof typeof ProjetoScalarFieldEnum]


  export const PoliticoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    foto: 'foto',
    sexo: 'sexo',
    raca: 'raca',
    religiao: 'religiao',
    estadoId: 'estadoId',
    partidoId: 'partidoId',
    ideologia: 'ideologia',
    dataNascimento: 'dataNascimento'
  };

  export type PoliticoScalarFieldEnum = (typeof PoliticoScalarFieldEnum)[keyof typeof PoliticoScalarFieldEnum]


  export const PartidoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    sigla: 'sigla',
    imagem: 'imagem'
  };

  export type PartidoScalarFieldEnum = (typeof PartidoScalarFieldEnum)[keyof typeof PartidoScalarFieldEnum]


  export const EstadoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    sigla: 'sigla'
  };

  export type EstadoScalarFieldEnum = (typeof EstadoScalarFieldEnum)[keyof typeof EstadoScalarFieldEnum]


  export const DireitoVioladoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    sigla: 'sigla',
    descricao: 'descricao'
  };

  export type DireitoVioladoScalarFieldEnum = (typeof DireitoVioladoScalarFieldEnum)[keyof typeof DireitoVioladoScalarFieldEnum]


  export const IdeologiaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type IdeologiaScalarFieldEnum = (typeof IdeologiaScalarFieldEnum)[keyof typeof IdeologiaScalarFieldEnum]


  export const ProfissaoScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type ProfissaoScalarFieldEnum = (typeof ProfissaoScalarFieldEnum)[keyof typeof ProfissaoScalarFieldEnum]


  export const EsferaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type EsferaScalarFieldEnum = (typeof EsferaScalarFieldEnum)[keyof typeof EsferaScalarFieldEnum]


  export const PautaScalarFieldEnum: {
    id: 'id',
    nome: 'nome'
  };

  export type PautaScalarFieldEnum = (typeof PautaScalarFieldEnum)[keyof typeof PautaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type ProjetoWhereInput = {
    AND?: ProjetoWhereInput | ProjetoWhereInput[]
    OR?: ProjetoWhereInput[]
    NOT?: ProjetoWhereInput | ProjetoWhereInput[]
    id?: StringFilter<"Projeto"> | string
    ano?: StringFilter<"Projeto"> | string
    ementa?: StringFilter<"Projeto"> | string
    pautaId?: StringFilter<"Projeto"> | string
    esferaId?: StringFilter<"Projeto"> | string
    numeroPl?: StringFilter<"Projeto"> | string
    justificativa?: StringFilter<"Projeto"> | string
    esfera?: XOR<EsferaScalarRelationFilter, EsferaWhereInput>
    pauta?: XOR<PautaScalarRelationFilter, PautaWhereInput>
    direitosViolados?: DireitoVioladoListRelationFilter
    ideologias?: IdeologiaListRelationFilter
    partidos?: PartidoListRelationFilter
    autores?: PoliticoListRelationFilter
  }

  export type ProjetoOrderByWithRelationInput = {
    id?: SortOrder
    ano?: SortOrder
    ementa?: SortOrder
    pautaId?: SortOrder
    esferaId?: SortOrder
    numeroPl?: SortOrder
    justificativa?: SortOrder
    esfera?: EsferaOrderByWithRelationInput
    pauta?: PautaOrderByWithRelationInput
    direitosViolados?: DireitoVioladoOrderByRelationAggregateInput
    ideologias?: IdeologiaOrderByRelationAggregateInput
    partidos?: PartidoOrderByRelationAggregateInput
    autores?: PoliticoOrderByRelationAggregateInput
  }

  export type ProjetoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    numeroPl?: string
    AND?: ProjetoWhereInput | ProjetoWhereInput[]
    OR?: ProjetoWhereInput[]
    NOT?: ProjetoWhereInput | ProjetoWhereInput[]
    ano?: StringFilter<"Projeto"> | string
    ementa?: StringFilter<"Projeto"> | string
    pautaId?: StringFilter<"Projeto"> | string
    esferaId?: StringFilter<"Projeto"> | string
    justificativa?: StringFilter<"Projeto"> | string
    esfera?: XOR<EsferaScalarRelationFilter, EsferaWhereInput>
    pauta?: XOR<PautaScalarRelationFilter, PautaWhereInput>
    direitosViolados?: DireitoVioladoListRelationFilter
    ideologias?: IdeologiaListRelationFilter
    partidos?: PartidoListRelationFilter
    autores?: PoliticoListRelationFilter
  }, "id" | "numeroPl">

  export type ProjetoOrderByWithAggregationInput = {
    id?: SortOrder
    ano?: SortOrder
    ementa?: SortOrder
    pautaId?: SortOrder
    esferaId?: SortOrder
    numeroPl?: SortOrder
    justificativa?: SortOrder
    _count?: ProjetoCountOrderByAggregateInput
    _max?: ProjetoMaxOrderByAggregateInput
    _min?: ProjetoMinOrderByAggregateInput
  }

  export type ProjetoScalarWhereWithAggregatesInput = {
    AND?: ProjetoScalarWhereWithAggregatesInput | ProjetoScalarWhereWithAggregatesInput[]
    OR?: ProjetoScalarWhereWithAggregatesInput[]
    NOT?: ProjetoScalarWhereWithAggregatesInput | ProjetoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Projeto"> | string
    ano?: StringWithAggregatesFilter<"Projeto"> | string
    ementa?: StringWithAggregatesFilter<"Projeto"> | string
    pautaId?: StringWithAggregatesFilter<"Projeto"> | string
    esferaId?: StringWithAggregatesFilter<"Projeto"> | string
    numeroPl?: StringWithAggregatesFilter<"Projeto"> | string
    justificativa?: StringWithAggregatesFilter<"Projeto"> | string
  }

  export type PoliticoWhereInput = {
    AND?: PoliticoWhereInput | PoliticoWhereInput[]
    OR?: PoliticoWhereInput[]
    NOT?: PoliticoWhereInput | PoliticoWhereInput[]
    id?: StringFilter<"Politico"> | string
    nome?: StringFilter<"Politico"> | string
    foto?: StringNullableFilter<"Politico"> | string | null
    sexo?: StringFilter<"Politico"> | string
    raca?: StringFilter<"Politico"> | string
    religiao?: StringFilter<"Politico"> | string
    estadoId?: StringFilter<"Politico"> | string
    partidoId?: StringFilter<"Politico"> | string
    ideologia?: StringFilter<"Politico"> | string
    dataNascimento?: DateTimeFilter<"Politico"> | Date | string
    estado?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    partido?: XOR<PartidoScalarRelationFilter, PartidoWhereInput>
    profissoes?: ProfissaoListRelationFilter
    projetos?: ProjetoListRelationFilter
  }

  export type PoliticoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    foto?: SortOrderInput | SortOrder
    sexo?: SortOrder
    raca?: SortOrder
    religiao?: SortOrder
    estadoId?: SortOrder
    partidoId?: SortOrder
    ideologia?: SortOrder
    dataNascimento?: SortOrder
    estado?: EstadoOrderByWithRelationInput
    partido?: PartidoOrderByWithRelationInput
    profissoes?: ProfissaoOrderByRelationAggregateInput
    projetos?: ProjetoOrderByRelationAggregateInput
  }

  export type PoliticoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PoliticoWhereInput | PoliticoWhereInput[]
    OR?: PoliticoWhereInput[]
    NOT?: PoliticoWhereInput | PoliticoWhereInput[]
    nome?: StringFilter<"Politico"> | string
    foto?: StringNullableFilter<"Politico"> | string | null
    sexo?: StringFilter<"Politico"> | string
    raca?: StringFilter<"Politico"> | string
    religiao?: StringFilter<"Politico"> | string
    estadoId?: StringFilter<"Politico"> | string
    partidoId?: StringFilter<"Politico"> | string
    ideologia?: StringFilter<"Politico"> | string
    dataNascimento?: DateTimeFilter<"Politico"> | Date | string
    estado?: XOR<EstadoScalarRelationFilter, EstadoWhereInput>
    partido?: XOR<PartidoScalarRelationFilter, PartidoWhereInput>
    profissoes?: ProfissaoListRelationFilter
    projetos?: ProjetoListRelationFilter
  }, "id">

  export type PoliticoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    foto?: SortOrderInput | SortOrder
    sexo?: SortOrder
    raca?: SortOrder
    religiao?: SortOrder
    estadoId?: SortOrder
    partidoId?: SortOrder
    ideologia?: SortOrder
    dataNascimento?: SortOrder
    _count?: PoliticoCountOrderByAggregateInput
    _max?: PoliticoMaxOrderByAggregateInput
    _min?: PoliticoMinOrderByAggregateInput
  }

  export type PoliticoScalarWhereWithAggregatesInput = {
    AND?: PoliticoScalarWhereWithAggregatesInput | PoliticoScalarWhereWithAggregatesInput[]
    OR?: PoliticoScalarWhereWithAggregatesInput[]
    NOT?: PoliticoScalarWhereWithAggregatesInput | PoliticoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Politico"> | string
    nome?: StringWithAggregatesFilter<"Politico"> | string
    foto?: StringNullableWithAggregatesFilter<"Politico"> | string | null
    sexo?: StringWithAggregatesFilter<"Politico"> | string
    raca?: StringWithAggregatesFilter<"Politico"> | string
    religiao?: StringWithAggregatesFilter<"Politico"> | string
    estadoId?: StringWithAggregatesFilter<"Politico"> | string
    partidoId?: StringWithAggregatesFilter<"Politico"> | string
    ideologia?: StringWithAggregatesFilter<"Politico"> | string
    dataNascimento?: DateTimeWithAggregatesFilter<"Politico"> | Date | string
  }

  export type PartidoWhereInput = {
    AND?: PartidoWhereInput | PartidoWhereInput[]
    OR?: PartidoWhereInput[]
    NOT?: PartidoWhereInput | PartidoWhereInput[]
    id?: StringFilter<"Partido"> | string
    nome?: StringFilter<"Partido"> | string
    sigla?: StringFilter<"Partido"> | string
    imagem?: StringNullableFilter<"Partido"> | string | null
    politicos?: PoliticoListRelationFilter
    projetos?: ProjetoListRelationFilter
  }

  export type PartidoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    imagem?: SortOrderInput | SortOrder
    politicos?: PoliticoOrderByRelationAggregateInput
    projetos?: ProjetoOrderByRelationAggregateInput
  }

  export type PartidoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nome?: string
    sigla?: string
    AND?: PartidoWhereInput | PartidoWhereInput[]
    OR?: PartidoWhereInput[]
    NOT?: PartidoWhereInput | PartidoWhereInput[]
    imagem?: StringNullableFilter<"Partido"> | string | null
    politicos?: PoliticoListRelationFilter
    projetos?: ProjetoListRelationFilter
  }, "id" | "nome" | "sigla">

  export type PartidoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    imagem?: SortOrderInput | SortOrder
    _count?: PartidoCountOrderByAggregateInput
    _max?: PartidoMaxOrderByAggregateInput
    _min?: PartidoMinOrderByAggregateInput
  }

  export type PartidoScalarWhereWithAggregatesInput = {
    AND?: PartidoScalarWhereWithAggregatesInput | PartidoScalarWhereWithAggregatesInput[]
    OR?: PartidoScalarWhereWithAggregatesInput[]
    NOT?: PartidoScalarWhereWithAggregatesInput | PartidoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Partido"> | string
    nome?: StringWithAggregatesFilter<"Partido"> | string
    sigla?: StringWithAggregatesFilter<"Partido"> | string
    imagem?: StringNullableWithAggregatesFilter<"Partido"> | string | null
  }

  export type EstadoWhereInput = {
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    id?: StringFilter<"Estado"> | string
    nome?: StringFilter<"Estado"> | string
    sigla?: StringFilter<"Estado"> | string
    politicos?: PoliticoListRelationFilter
  }

  export type EstadoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    politicos?: PoliticoOrderByRelationAggregateInput
  }

  export type EstadoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nome?: string
    sigla?: string
    AND?: EstadoWhereInput | EstadoWhereInput[]
    OR?: EstadoWhereInput[]
    NOT?: EstadoWhereInput | EstadoWhereInput[]
    politicos?: PoliticoListRelationFilter
  }, "id" | "nome" | "sigla">

  export type EstadoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    _count?: EstadoCountOrderByAggregateInput
    _max?: EstadoMaxOrderByAggregateInput
    _min?: EstadoMinOrderByAggregateInput
  }

  export type EstadoScalarWhereWithAggregatesInput = {
    AND?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    OR?: EstadoScalarWhereWithAggregatesInput[]
    NOT?: EstadoScalarWhereWithAggregatesInput | EstadoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Estado"> | string
    nome?: StringWithAggregatesFilter<"Estado"> | string
    sigla?: StringWithAggregatesFilter<"Estado"> | string
  }

  export type DireitoVioladoWhereInput = {
    AND?: DireitoVioladoWhereInput | DireitoVioladoWhereInput[]
    OR?: DireitoVioladoWhereInput[]
    NOT?: DireitoVioladoWhereInput | DireitoVioladoWhereInput[]
    id?: StringFilter<"DireitoViolado"> | string
    nome?: StringFilter<"DireitoViolado"> | string
    sigla?: StringFilter<"DireitoViolado"> | string
    descricao?: StringFilter<"DireitoViolado"> | string
    projetos?: ProjetoListRelationFilter
  }

  export type DireitoVioladoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
    projetos?: ProjetoOrderByRelationAggregateInput
  }

  export type DireitoVioladoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nome?: string
    AND?: DireitoVioladoWhereInput | DireitoVioladoWhereInput[]
    OR?: DireitoVioladoWhereInput[]
    NOT?: DireitoVioladoWhereInput | DireitoVioladoWhereInput[]
    sigla?: StringFilter<"DireitoViolado"> | string
    descricao?: StringFilter<"DireitoViolado"> | string
    projetos?: ProjetoListRelationFilter
  }, "id" | "nome">

  export type DireitoVioladoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
    _count?: DireitoVioladoCountOrderByAggregateInput
    _max?: DireitoVioladoMaxOrderByAggregateInput
    _min?: DireitoVioladoMinOrderByAggregateInput
  }

  export type DireitoVioladoScalarWhereWithAggregatesInput = {
    AND?: DireitoVioladoScalarWhereWithAggregatesInput | DireitoVioladoScalarWhereWithAggregatesInput[]
    OR?: DireitoVioladoScalarWhereWithAggregatesInput[]
    NOT?: DireitoVioladoScalarWhereWithAggregatesInput | DireitoVioladoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DireitoViolado"> | string
    nome?: StringWithAggregatesFilter<"DireitoViolado"> | string
    sigla?: StringWithAggregatesFilter<"DireitoViolado"> | string
    descricao?: StringWithAggregatesFilter<"DireitoViolado"> | string
  }

  export type IdeologiaWhereInput = {
    AND?: IdeologiaWhereInput | IdeologiaWhereInput[]
    OR?: IdeologiaWhereInput[]
    NOT?: IdeologiaWhereInput | IdeologiaWhereInput[]
    id?: StringFilter<"Ideologia"> | string
    nome?: StringFilter<"Ideologia"> | string
    projetos?: ProjetoListRelationFilter
  }

  export type IdeologiaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    projetos?: ProjetoOrderByRelationAggregateInput
  }

  export type IdeologiaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IdeologiaWhereInput | IdeologiaWhereInput[]
    OR?: IdeologiaWhereInput[]
    NOT?: IdeologiaWhereInput | IdeologiaWhereInput[]
    nome?: StringFilter<"Ideologia"> | string
    projetos?: ProjetoListRelationFilter
  }, "id">

  export type IdeologiaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: IdeologiaCountOrderByAggregateInput
    _max?: IdeologiaMaxOrderByAggregateInput
    _min?: IdeologiaMinOrderByAggregateInput
  }

  export type IdeologiaScalarWhereWithAggregatesInput = {
    AND?: IdeologiaScalarWhereWithAggregatesInput | IdeologiaScalarWhereWithAggregatesInput[]
    OR?: IdeologiaScalarWhereWithAggregatesInput[]
    NOT?: IdeologiaScalarWhereWithAggregatesInput | IdeologiaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ideologia"> | string
    nome?: StringWithAggregatesFilter<"Ideologia"> | string
  }

  export type ProfissaoWhereInput = {
    AND?: ProfissaoWhereInput | ProfissaoWhereInput[]
    OR?: ProfissaoWhereInput[]
    NOT?: ProfissaoWhereInput | ProfissaoWhereInput[]
    id?: StringFilter<"Profissao"> | string
    nome?: StringFilter<"Profissao"> | string
    politicos?: PoliticoListRelationFilter
  }

  export type ProfissaoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    politicos?: PoliticoOrderByRelationAggregateInput
  }

  export type ProfissaoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nome?: string
    AND?: ProfissaoWhereInput | ProfissaoWhereInput[]
    OR?: ProfissaoWhereInput[]
    NOT?: ProfissaoWhereInput | ProfissaoWhereInput[]
    politicos?: PoliticoListRelationFilter
  }, "id" | "nome">

  export type ProfissaoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: ProfissaoCountOrderByAggregateInput
    _max?: ProfissaoMaxOrderByAggregateInput
    _min?: ProfissaoMinOrderByAggregateInput
  }

  export type ProfissaoScalarWhereWithAggregatesInput = {
    AND?: ProfissaoScalarWhereWithAggregatesInput | ProfissaoScalarWhereWithAggregatesInput[]
    OR?: ProfissaoScalarWhereWithAggregatesInput[]
    NOT?: ProfissaoScalarWhereWithAggregatesInput | ProfissaoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profissao"> | string
    nome?: StringWithAggregatesFilter<"Profissao"> | string
  }

  export type EsferaWhereInput = {
    AND?: EsferaWhereInput | EsferaWhereInput[]
    OR?: EsferaWhereInput[]
    NOT?: EsferaWhereInput | EsferaWhereInput[]
    id?: StringFilter<"Esfera"> | string
    nome?: StringFilter<"Esfera"> | string
    projetos?: ProjetoListRelationFilter
  }

  export type EsferaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    projetos?: ProjetoOrderByRelationAggregateInput
  }

  export type EsferaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EsferaWhereInput | EsferaWhereInput[]
    OR?: EsferaWhereInput[]
    NOT?: EsferaWhereInput | EsferaWhereInput[]
    nome?: StringFilter<"Esfera"> | string
    projetos?: ProjetoListRelationFilter
  }, "id">

  export type EsferaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: EsferaCountOrderByAggregateInput
    _max?: EsferaMaxOrderByAggregateInput
    _min?: EsferaMinOrderByAggregateInput
  }

  export type EsferaScalarWhereWithAggregatesInput = {
    AND?: EsferaScalarWhereWithAggregatesInput | EsferaScalarWhereWithAggregatesInput[]
    OR?: EsferaScalarWhereWithAggregatesInput[]
    NOT?: EsferaScalarWhereWithAggregatesInput | EsferaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Esfera"> | string
    nome?: StringWithAggregatesFilter<"Esfera"> | string
  }

  export type PautaWhereInput = {
    AND?: PautaWhereInput | PautaWhereInput[]
    OR?: PautaWhereInput[]
    NOT?: PautaWhereInput | PautaWhereInput[]
    id?: StringFilter<"Pauta"> | string
    nome?: StringFilter<"Pauta"> | string
    projetos?: ProjetoListRelationFilter
  }

  export type PautaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    projetos?: ProjetoOrderByRelationAggregateInput
  }

  export type PautaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nome?: string
    AND?: PautaWhereInput | PautaWhereInput[]
    OR?: PautaWhereInput[]
    NOT?: PautaWhereInput | PautaWhereInput[]
    projetos?: ProjetoListRelationFilter
  }, "id" | "nome">

  export type PautaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    _count?: PautaCountOrderByAggregateInput
    _max?: PautaMaxOrderByAggregateInput
    _min?: PautaMinOrderByAggregateInput
  }

  export type PautaScalarWhereWithAggregatesInput = {
    AND?: PautaScalarWhereWithAggregatesInput | PautaScalarWhereWithAggregatesInput[]
    OR?: PautaScalarWhereWithAggregatesInput[]
    NOT?: PautaScalarWhereWithAggregatesInput | PautaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pauta"> | string
    nome?: StringWithAggregatesFilter<"Pauta"> | string
  }

  export type ProjetoCreateInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    esfera: EsferaCreateNestedOneWithoutProjetosInput
    pauta: PautaCreateNestedOneWithoutProjetosInput
    direitosViolados?: DireitoVioladoCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaCreateNestedManyWithoutProjetosInput
    partidos?: PartidoCreateNestedManyWithoutProjetosInput
    autores?: PoliticoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
    direitosViolados?: DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaUncheckedCreateNestedManyWithoutProjetosInput
    partidos?: PartidoUncheckedCreateNestedManyWithoutProjetosInput
    autores?: PoliticoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    esfera?: EsferaUpdateOneRequiredWithoutProjetosNestedInput
    pauta?: PautaUpdateOneRequiredWithoutProjetosNestedInput
    direitosViolados?: DireitoVioladoUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    direitosViolados?: DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUncheckedUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoCreateManyInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
  }

  export type ProjetoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type PoliticoCreateInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    ideologia: string
    dataNascimento: Date | string
    estado: EstadoCreateNestedOneWithoutPoliticosInput
    partido: PartidoCreateNestedOneWithoutPoliticosInput
    profissoes?: ProfissaoCreateNestedManyWithoutPoliticosInput
    projetos?: ProjetoCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoUncheckedCreateInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    partidoId: string
    ideologia: string
    dataNascimento: Date | string
    profissoes?: ProfissaoUncheckedCreateNestedManyWithoutPoliticosInput
    projetos?: ProjetoUncheckedCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EstadoUpdateOneRequiredWithoutPoliticosNestedInput
    partido?: PartidoUpdateOneRequiredWithoutPoliticosNestedInput
    profissoes?: ProfissaoUpdateManyWithoutPoliticosNestedInput
    projetos?: ProjetoUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    profissoes?: ProfissaoUncheckedUpdateManyWithoutPoliticosNestedInput
    projetos?: ProjetoUncheckedUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoCreateManyInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    partidoId: string
    ideologia: string
    dataNascimento: Date | string
  }

  export type PoliticoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PoliticoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PartidoCreateInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
    politicos?: PoliticoCreateNestedManyWithoutPartidoInput
    projetos?: ProjetoCreateNestedManyWithoutPartidosInput
  }

  export type PartidoUncheckedCreateInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
    politicos?: PoliticoUncheckedCreateNestedManyWithoutPartidoInput
    projetos?: ProjetoUncheckedCreateNestedManyWithoutPartidosInput
  }

  export type PartidoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    politicos?: PoliticoUpdateManyWithoutPartidoNestedInput
    projetos?: ProjetoUpdateManyWithoutPartidosNestedInput
  }

  export type PartidoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    politicos?: PoliticoUncheckedUpdateManyWithoutPartidoNestedInput
    projetos?: ProjetoUncheckedUpdateManyWithoutPartidosNestedInput
  }

  export type PartidoCreateManyInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
  }

  export type PartidoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PartidoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EstadoCreateInput = {
    id?: string
    nome: string
    sigla: string
    politicos?: PoliticoCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUncheckedCreateInput = {
    id?: string
    nome: string
    sigla: string
    politicos?: PoliticoUncheckedCreateNestedManyWithoutEstadoInput
  }

  export type EstadoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    politicos?: PoliticoUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    politicos?: PoliticoUncheckedUpdateManyWithoutEstadoNestedInput
  }

  export type EstadoCreateManyInput = {
    id?: string
    nome: string
    sigla: string
  }

  export type EstadoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
  }

  export type DireitoVioladoCreateInput = {
    id?: string
    nome: string
    sigla: string
    descricao: string
    projetos?: ProjetoCreateNestedManyWithoutDireitosVioladosInput
  }

  export type DireitoVioladoUncheckedCreateInput = {
    id?: string
    nome: string
    sigla: string
    descricao: string
    projetos?: ProjetoUncheckedCreateNestedManyWithoutDireitosVioladosInput
  }

  export type DireitoVioladoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUpdateManyWithoutDireitosVioladosNestedInput
  }

  export type DireitoVioladoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUncheckedUpdateManyWithoutDireitosVioladosNestedInput
  }

  export type DireitoVioladoCreateManyInput = {
    id?: string
    nome: string
    sigla: string
    descricao: string
  }

  export type DireitoVioladoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DireitoVioladoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type IdeologiaCreateInput = {
    id?: string
    nome: string
    projetos?: ProjetoCreateNestedManyWithoutIdeologiasInput
  }

  export type IdeologiaUncheckedCreateInput = {
    id?: string
    nome: string
    projetos?: ProjetoUncheckedCreateNestedManyWithoutIdeologiasInput
  }

  export type IdeologiaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUpdateManyWithoutIdeologiasNestedInput
  }

  export type IdeologiaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUncheckedUpdateManyWithoutIdeologiasNestedInput
  }

  export type IdeologiaCreateManyInput = {
    id?: string
    nome: string
  }

  export type IdeologiaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type IdeologiaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ProfissaoCreateInput = {
    id?: string
    nome: string
    politicos?: PoliticoCreateNestedManyWithoutProfissoesInput
  }

  export type ProfissaoUncheckedCreateInput = {
    id?: string
    nome: string
    politicos?: PoliticoUncheckedCreateNestedManyWithoutProfissoesInput
  }

  export type ProfissaoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    politicos?: PoliticoUpdateManyWithoutProfissoesNestedInput
  }

  export type ProfissaoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    politicos?: PoliticoUncheckedUpdateManyWithoutProfissoesNestedInput
  }

  export type ProfissaoCreateManyInput = {
    id?: string
    nome: string
  }

  export type ProfissaoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ProfissaoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EsferaCreateInput = {
    id?: string
    nome: string
    projetos?: ProjetoCreateNestedManyWithoutEsferaInput
  }

  export type EsferaUncheckedCreateInput = {
    id?: string
    nome: string
    projetos?: ProjetoUncheckedCreateNestedManyWithoutEsferaInput
  }

  export type EsferaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUpdateManyWithoutEsferaNestedInput
  }

  export type EsferaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUncheckedUpdateManyWithoutEsferaNestedInput
  }

  export type EsferaCreateManyInput = {
    id?: string
    nome: string
  }

  export type EsferaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EsferaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PautaCreateInput = {
    id?: string
    nome: string
    projetos?: ProjetoCreateNestedManyWithoutPautaInput
  }

  export type PautaUncheckedCreateInput = {
    id?: string
    nome: string
    projetos?: ProjetoUncheckedCreateNestedManyWithoutPautaInput
  }

  export type PautaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUpdateManyWithoutPautaNestedInput
  }

  export type PautaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    projetos?: ProjetoUncheckedUpdateManyWithoutPautaNestedInput
  }

  export type PautaCreateManyInput = {
    id?: string
    nome: string
  }

  export type PautaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PautaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EsferaScalarRelationFilter = {
    is?: EsferaWhereInput
    isNot?: EsferaWhereInput
  }

  export type PautaScalarRelationFilter = {
    is?: PautaWhereInput
    isNot?: PautaWhereInput
  }

  export type DireitoVioladoListRelationFilter = {
    every?: DireitoVioladoWhereInput
    some?: DireitoVioladoWhereInput
    none?: DireitoVioladoWhereInput
  }

  export type IdeologiaListRelationFilter = {
    every?: IdeologiaWhereInput
    some?: IdeologiaWhereInput
    none?: IdeologiaWhereInput
  }

  export type PartidoListRelationFilter = {
    every?: PartidoWhereInput
    some?: PartidoWhereInput
    none?: PartidoWhereInput
  }

  export type PoliticoListRelationFilter = {
    every?: PoliticoWhereInput
    some?: PoliticoWhereInput
    none?: PoliticoWhereInput
  }

  export type DireitoVioladoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IdeologiaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PartidoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PoliticoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjetoCountOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    ementa?: SortOrder
    pautaId?: SortOrder
    esferaId?: SortOrder
    numeroPl?: SortOrder
    justificativa?: SortOrder
  }

  export type ProjetoMaxOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    ementa?: SortOrder
    pautaId?: SortOrder
    esferaId?: SortOrder
    numeroPl?: SortOrder
    justificativa?: SortOrder
  }

  export type ProjetoMinOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    ementa?: SortOrder
    pautaId?: SortOrder
    esferaId?: SortOrder
    numeroPl?: SortOrder
    justificativa?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EstadoScalarRelationFilter = {
    is?: EstadoWhereInput
    isNot?: EstadoWhereInput
  }

  export type PartidoScalarRelationFilter = {
    is?: PartidoWhereInput
    isNot?: PartidoWhereInput
  }

  export type ProfissaoListRelationFilter = {
    every?: ProfissaoWhereInput
    some?: ProfissaoWhereInput
    none?: ProfissaoWhereInput
  }

  export type ProjetoListRelationFilter = {
    every?: ProjetoWhereInput
    some?: ProjetoWhereInput
    none?: ProjetoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ProfissaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjetoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PoliticoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    foto?: SortOrder
    sexo?: SortOrder
    raca?: SortOrder
    religiao?: SortOrder
    estadoId?: SortOrder
    partidoId?: SortOrder
    ideologia?: SortOrder
    dataNascimento?: SortOrder
  }

  export type PoliticoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    foto?: SortOrder
    sexo?: SortOrder
    raca?: SortOrder
    religiao?: SortOrder
    estadoId?: SortOrder
    partidoId?: SortOrder
    ideologia?: SortOrder
    dataNascimento?: SortOrder
  }

  export type PoliticoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    foto?: SortOrder
    sexo?: SortOrder
    raca?: SortOrder
    religiao?: SortOrder
    estadoId?: SortOrder
    partidoId?: SortOrder
    ideologia?: SortOrder
    dataNascimento?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PartidoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    imagem?: SortOrder
  }

  export type PartidoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    imagem?: SortOrder
  }

  export type PartidoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    imagem?: SortOrder
  }

  export type EstadoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
  }

  export type EstadoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
  }

  export type EstadoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
  }

  export type DireitoVioladoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
  }

  export type DireitoVioladoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
  }

  export type DireitoVioladoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    sigla?: SortOrder
    descricao?: SortOrder
  }

  export type IdeologiaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type IdeologiaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type IdeologiaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ProfissaoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ProfissaoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type ProfissaoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EsferaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EsferaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EsferaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type PautaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type PautaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type PautaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
  }

  export type EsferaCreateNestedOneWithoutProjetosInput = {
    create?: XOR<EsferaCreateWithoutProjetosInput, EsferaUncheckedCreateWithoutProjetosInput>
    connectOrCreate?: EsferaCreateOrConnectWithoutProjetosInput
    connect?: EsferaWhereUniqueInput
  }

  export type PautaCreateNestedOneWithoutProjetosInput = {
    create?: XOR<PautaCreateWithoutProjetosInput, PautaUncheckedCreateWithoutProjetosInput>
    connectOrCreate?: PautaCreateOrConnectWithoutProjetosInput
    connect?: PautaWhereUniqueInput
  }

  export type DireitoVioladoCreateNestedManyWithoutProjetosInput = {
    create?: XOR<DireitoVioladoCreateWithoutProjetosInput, DireitoVioladoUncheckedCreateWithoutProjetosInput> | DireitoVioladoCreateWithoutProjetosInput[] | DireitoVioladoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: DireitoVioladoCreateOrConnectWithoutProjetosInput | DireitoVioladoCreateOrConnectWithoutProjetosInput[]
    connect?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
  }

  export type IdeologiaCreateNestedManyWithoutProjetosInput = {
    create?: XOR<IdeologiaCreateWithoutProjetosInput, IdeologiaUncheckedCreateWithoutProjetosInput> | IdeologiaCreateWithoutProjetosInput[] | IdeologiaUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: IdeologiaCreateOrConnectWithoutProjetosInput | IdeologiaCreateOrConnectWithoutProjetosInput[]
    connect?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
  }

  export type PartidoCreateNestedManyWithoutProjetosInput = {
    create?: XOR<PartidoCreateWithoutProjetosInput, PartidoUncheckedCreateWithoutProjetosInput> | PartidoCreateWithoutProjetosInput[] | PartidoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PartidoCreateOrConnectWithoutProjetosInput | PartidoCreateOrConnectWithoutProjetosInput[]
    connect?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
  }

  export type PoliticoCreateNestedManyWithoutProjetosInput = {
    create?: XOR<PoliticoCreateWithoutProjetosInput, PoliticoUncheckedCreateWithoutProjetosInput> | PoliticoCreateWithoutProjetosInput[] | PoliticoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProjetosInput | PoliticoCreateOrConnectWithoutProjetosInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput = {
    create?: XOR<DireitoVioladoCreateWithoutProjetosInput, DireitoVioladoUncheckedCreateWithoutProjetosInput> | DireitoVioladoCreateWithoutProjetosInput[] | DireitoVioladoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: DireitoVioladoCreateOrConnectWithoutProjetosInput | DireitoVioladoCreateOrConnectWithoutProjetosInput[]
    connect?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
  }

  export type IdeologiaUncheckedCreateNestedManyWithoutProjetosInput = {
    create?: XOR<IdeologiaCreateWithoutProjetosInput, IdeologiaUncheckedCreateWithoutProjetosInput> | IdeologiaCreateWithoutProjetosInput[] | IdeologiaUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: IdeologiaCreateOrConnectWithoutProjetosInput | IdeologiaCreateOrConnectWithoutProjetosInput[]
    connect?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
  }

  export type PartidoUncheckedCreateNestedManyWithoutProjetosInput = {
    create?: XOR<PartidoCreateWithoutProjetosInput, PartidoUncheckedCreateWithoutProjetosInput> | PartidoCreateWithoutProjetosInput[] | PartidoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PartidoCreateOrConnectWithoutProjetosInput | PartidoCreateOrConnectWithoutProjetosInput[]
    connect?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
  }

  export type PoliticoUncheckedCreateNestedManyWithoutProjetosInput = {
    create?: XOR<PoliticoCreateWithoutProjetosInput, PoliticoUncheckedCreateWithoutProjetosInput> | PoliticoCreateWithoutProjetosInput[] | PoliticoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProjetosInput | PoliticoCreateOrConnectWithoutProjetosInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EsferaUpdateOneRequiredWithoutProjetosNestedInput = {
    create?: XOR<EsferaCreateWithoutProjetosInput, EsferaUncheckedCreateWithoutProjetosInput>
    connectOrCreate?: EsferaCreateOrConnectWithoutProjetosInput
    upsert?: EsferaUpsertWithoutProjetosInput
    connect?: EsferaWhereUniqueInput
    update?: XOR<XOR<EsferaUpdateToOneWithWhereWithoutProjetosInput, EsferaUpdateWithoutProjetosInput>, EsferaUncheckedUpdateWithoutProjetosInput>
  }

  export type PautaUpdateOneRequiredWithoutProjetosNestedInput = {
    create?: XOR<PautaCreateWithoutProjetosInput, PautaUncheckedCreateWithoutProjetosInput>
    connectOrCreate?: PautaCreateOrConnectWithoutProjetosInput
    upsert?: PautaUpsertWithoutProjetosInput
    connect?: PautaWhereUniqueInput
    update?: XOR<XOR<PautaUpdateToOneWithWhereWithoutProjetosInput, PautaUpdateWithoutProjetosInput>, PautaUncheckedUpdateWithoutProjetosInput>
  }

  export type DireitoVioladoUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<DireitoVioladoCreateWithoutProjetosInput, DireitoVioladoUncheckedCreateWithoutProjetosInput> | DireitoVioladoCreateWithoutProjetosInput[] | DireitoVioladoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: DireitoVioladoCreateOrConnectWithoutProjetosInput | DireitoVioladoCreateOrConnectWithoutProjetosInput[]
    upsert?: DireitoVioladoUpsertWithWhereUniqueWithoutProjetosInput | DireitoVioladoUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    disconnect?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    delete?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    connect?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    update?: DireitoVioladoUpdateWithWhereUniqueWithoutProjetosInput | DireitoVioladoUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: DireitoVioladoUpdateManyWithWhereWithoutProjetosInput | DireitoVioladoUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: DireitoVioladoScalarWhereInput | DireitoVioladoScalarWhereInput[]
  }

  export type IdeologiaUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<IdeologiaCreateWithoutProjetosInput, IdeologiaUncheckedCreateWithoutProjetosInput> | IdeologiaCreateWithoutProjetosInput[] | IdeologiaUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: IdeologiaCreateOrConnectWithoutProjetosInput | IdeologiaCreateOrConnectWithoutProjetosInput[]
    upsert?: IdeologiaUpsertWithWhereUniqueWithoutProjetosInput | IdeologiaUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    disconnect?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    delete?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    connect?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    update?: IdeologiaUpdateWithWhereUniqueWithoutProjetosInput | IdeologiaUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: IdeologiaUpdateManyWithWhereWithoutProjetosInput | IdeologiaUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: IdeologiaScalarWhereInput | IdeologiaScalarWhereInput[]
  }

  export type PartidoUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<PartidoCreateWithoutProjetosInput, PartidoUncheckedCreateWithoutProjetosInput> | PartidoCreateWithoutProjetosInput[] | PartidoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PartidoCreateOrConnectWithoutProjetosInput | PartidoCreateOrConnectWithoutProjetosInput[]
    upsert?: PartidoUpsertWithWhereUniqueWithoutProjetosInput | PartidoUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    disconnect?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    delete?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    connect?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    update?: PartidoUpdateWithWhereUniqueWithoutProjetosInput | PartidoUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: PartidoUpdateManyWithWhereWithoutProjetosInput | PartidoUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: PartidoScalarWhereInput | PartidoScalarWhereInput[]
  }

  export type PoliticoUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<PoliticoCreateWithoutProjetosInput, PoliticoUncheckedCreateWithoutProjetosInput> | PoliticoCreateWithoutProjetosInput[] | PoliticoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProjetosInput | PoliticoCreateOrConnectWithoutProjetosInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutProjetosInput | PoliticoUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutProjetosInput | PoliticoUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutProjetosInput | PoliticoUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<DireitoVioladoCreateWithoutProjetosInput, DireitoVioladoUncheckedCreateWithoutProjetosInput> | DireitoVioladoCreateWithoutProjetosInput[] | DireitoVioladoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: DireitoVioladoCreateOrConnectWithoutProjetosInput | DireitoVioladoCreateOrConnectWithoutProjetosInput[]
    upsert?: DireitoVioladoUpsertWithWhereUniqueWithoutProjetosInput | DireitoVioladoUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    disconnect?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    delete?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    connect?: DireitoVioladoWhereUniqueInput | DireitoVioladoWhereUniqueInput[]
    update?: DireitoVioladoUpdateWithWhereUniqueWithoutProjetosInput | DireitoVioladoUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: DireitoVioladoUpdateManyWithWhereWithoutProjetosInput | DireitoVioladoUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: DireitoVioladoScalarWhereInput | DireitoVioladoScalarWhereInput[]
  }

  export type IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<IdeologiaCreateWithoutProjetosInput, IdeologiaUncheckedCreateWithoutProjetosInput> | IdeologiaCreateWithoutProjetosInput[] | IdeologiaUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: IdeologiaCreateOrConnectWithoutProjetosInput | IdeologiaCreateOrConnectWithoutProjetosInput[]
    upsert?: IdeologiaUpsertWithWhereUniqueWithoutProjetosInput | IdeologiaUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    disconnect?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    delete?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    connect?: IdeologiaWhereUniqueInput | IdeologiaWhereUniqueInput[]
    update?: IdeologiaUpdateWithWhereUniqueWithoutProjetosInput | IdeologiaUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: IdeologiaUpdateManyWithWhereWithoutProjetosInput | IdeologiaUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: IdeologiaScalarWhereInput | IdeologiaScalarWhereInput[]
  }

  export type PartidoUncheckedUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<PartidoCreateWithoutProjetosInput, PartidoUncheckedCreateWithoutProjetosInput> | PartidoCreateWithoutProjetosInput[] | PartidoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PartidoCreateOrConnectWithoutProjetosInput | PartidoCreateOrConnectWithoutProjetosInput[]
    upsert?: PartidoUpsertWithWhereUniqueWithoutProjetosInput | PartidoUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    disconnect?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    delete?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    connect?: PartidoWhereUniqueInput | PartidoWhereUniqueInput[]
    update?: PartidoUpdateWithWhereUniqueWithoutProjetosInput | PartidoUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: PartidoUpdateManyWithWhereWithoutProjetosInput | PartidoUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: PartidoScalarWhereInput | PartidoScalarWhereInput[]
  }

  export type PoliticoUncheckedUpdateManyWithoutProjetosNestedInput = {
    create?: XOR<PoliticoCreateWithoutProjetosInput, PoliticoUncheckedCreateWithoutProjetosInput> | PoliticoCreateWithoutProjetosInput[] | PoliticoUncheckedCreateWithoutProjetosInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProjetosInput | PoliticoCreateOrConnectWithoutProjetosInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutProjetosInput | PoliticoUpsertWithWhereUniqueWithoutProjetosInput[]
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutProjetosInput | PoliticoUpdateWithWhereUniqueWithoutProjetosInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutProjetosInput | PoliticoUpdateManyWithWhereWithoutProjetosInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type EstadoCreateNestedOneWithoutPoliticosInput = {
    create?: XOR<EstadoCreateWithoutPoliticosInput, EstadoUncheckedCreateWithoutPoliticosInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutPoliticosInput
    connect?: EstadoWhereUniqueInput
  }

  export type PartidoCreateNestedOneWithoutPoliticosInput = {
    create?: XOR<PartidoCreateWithoutPoliticosInput, PartidoUncheckedCreateWithoutPoliticosInput>
    connectOrCreate?: PartidoCreateOrConnectWithoutPoliticosInput
    connect?: PartidoWhereUniqueInput
  }

  export type ProfissaoCreateNestedManyWithoutPoliticosInput = {
    create?: XOR<ProfissaoCreateWithoutPoliticosInput, ProfissaoUncheckedCreateWithoutPoliticosInput> | ProfissaoCreateWithoutPoliticosInput[] | ProfissaoUncheckedCreateWithoutPoliticosInput[]
    connectOrCreate?: ProfissaoCreateOrConnectWithoutPoliticosInput | ProfissaoCreateOrConnectWithoutPoliticosInput[]
    connect?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
  }

  export type ProjetoCreateNestedManyWithoutAutoresInput = {
    create?: XOR<ProjetoCreateWithoutAutoresInput, ProjetoUncheckedCreateWithoutAutoresInput> | ProjetoCreateWithoutAutoresInput[] | ProjetoUncheckedCreateWithoutAutoresInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutAutoresInput | ProjetoCreateOrConnectWithoutAutoresInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProfissaoUncheckedCreateNestedManyWithoutPoliticosInput = {
    create?: XOR<ProfissaoCreateWithoutPoliticosInput, ProfissaoUncheckedCreateWithoutPoliticosInput> | ProfissaoCreateWithoutPoliticosInput[] | ProfissaoUncheckedCreateWithoutPoliticosInput[]
    connectOrCreate?: ProfissaoCreateOrConnectWithoutPoliticosInput | ProfissaoCreateOrConnectWithoutPoliticosInput[]
    connect?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
  }

  export type ProjetoUncheckedCreateNestedManyWithoutAutoresInput = {
    create?: XOR<ProjetoCreateWithoutAutoresInput, ProjetoUncheckedCreateWithoutAutoresInput> | ProjetoCreateWithoutAutoresInput[] | ProjetoUncheckedCreateWithoutAutoresInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutAutoresInput | ProjetoCreateOrConnectWithoutAutoresInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EstadoUpdateOneRequiredWithoutPoliticosNestedInput = {
    create?: XOR<EstadoCreateWithoutPoliticosInput, EstadoUncheckedCreateWithoutPoliticosInput>
    connectOrCreate?: EstadoCreateOrConnectWithoutPoliticosInput
    upsert?: EstadoUpsertWithoutPoliticosInput
    connect?: EstadoWhereUniqueInput
    update?: XOR<XOR<EstadoUpdateToOneWithWhereWithoutPoliticosInput, EstadoUpdateWithoutPoliticosInput>, EstadoUncheckedUpdateWithoutPoliticosInput>
  }

  export type PartidoUpdateOneRequiredWithoutPoliticosNestedInput = {
    create?: XOR<PartidoCreateWithoutPoliticosInput, PartidoUncheckedCreateWithoutPoliticosInput>
    connectOrCreate?: PartidoCreateOrConnectWithoutPoliticosInput
    upsert?: PartidoUpsertWithoutPoliticosInput
    connect?: PartidoWhereUniqueInput
    update?: XOR<XOR<PartidoUpdateToOneWithWhereWithoutPoliticosInput, PartidoUpdateWithoutPoliticosInput>, PartidoUncheckedUpdateWithoutPoliticosInput>
  }

  export type ProfissaoUpdateManyWithoutPoliticosNestedInput = {
    create?: XOR<ProfissaoCreateWithoutPoliticosInput, ProfissaoUncheckedCreateWithoutPoliticosInput> | ProfissaoCreateWithoutPoliticosInput[] | ProfissaoUncheckedCreateWithoutPoliticosInput[]
    connectOrCreate?: ProfissaoCreateOrConnectWithoutPoliticosInput | ProfissaoCreateOrConnectWithoutPoliticosInput[]
    upsert?: ProfissaoUpsertWithWhereUniqueWithoutPoliticosInput | ProfissaoUpsertWithWhereUniqueWithoutPoliticosInput[]
    set?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    disconnect?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    delete?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    connect?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    update?: ProfissaoUpdateWithWhereUniqueWithoutPoliticosInput | ProfissaoUpdateWithWhereUniqueWithoutPoliticosInput[]
    updateMany?: ProfissaoUpdateManyWithWhereWithoutPoliticosInput | ProfissaoUpdateManyWithWhereWithoutPoliticosInput[]
    deleteMany?: ProfissaoScalarWhereInput | ProfissaoScalarWhereInput[]
  }

  export type ProjetoUpdateManyWithoutAutoresNestedInput = {
    create?: XOR<ProjetoCreateWithoutAutoresInput, ProjetoUncheckedCreateWithoutAutoresInput> | ProjetoCreateWithoutAutoresInput[] | ProjetoUncheckedCreateWithoutAutoresInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutAutoresInput | ProjetoCreateOrConnectWithoutAutoresInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutAutoresInput | ProjetoUpsertWithWhereUniqueWithoutAutoresInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutAutoresInput | ProjetoUpdateWithWhereUniqueWithoutAutoresInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutAutoresInput | ProjetoUpdateManyWithWhereWithoutAutoresInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProfissaoUncheckedUpdateManyWithoutPoliticosNestedInput = {
    create?: XOR<ProfissaoCreateWithoutPoliticosInput, ProfissaoUncheckedCreateWithoutPoliticosInput> | ProfissaoCreateWithoutPoliticosInput[] | ProfissaoUncheckedCreateWithoutPoliticosInput[]
    connectOrCreate?: ProfissaoCreateOrConnectWithoutPoliticosInput | ProfissaoCreateOrConnectWithoutPoliticosInput[]
    upsert?: ProfissaoUpsertWithWhereUniqueWithoutPoliticosInput | ProfissaoUpsertWithWhereUniqueWithoutPoliticosInput[]
    set?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    disconnect?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    delete?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    connect?: ProfissaoWhereUniqueInput | ProfissaoWhereUniqueInput[]
    update?: ProfissaoUpdateWithWhereUniqueWithoutPoliticosInput | ProfissaoUpdateWithWhereUniqueWithoutPoliticosInput[]
    updateMany?: ProfissaoUpdateManyWithWhereWithoutPoliticosInput | ProfissaoUpdateManyWithWhereWithoutPoliticosInput[]
    deleteMany?: ProfissaoScalarWhereInput | ProfissaoScalarWhereInput[]
  }

  export type ProjetoUncheckedUpdateManyWithoutAutoresNestedInput = {
    create?: XOR<ProjetoCreateWithoutAutoresInput, ProjetoUncheckedCreateWithoutAutoresInput> | ProjetoCreateWithoutAutoresInput[] | ProjetoUncheckedCreateWithoutAutoresInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutAutoresInput | ProjetoCreateOrConnectWithoutAutoresInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutAutoresInput | ProjetoUpsertWithWhereUniqueWithoutAutoresInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutAutoresInput | ProjetoUpdateWithWhereUniqueWithoutAutoresInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutAutoresInput | ProjetoUpdateManyWithWhereWithoutAutoresInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type PoliticoCreateNestedManyWithoutPartidoInput = {
    create?: XOR<PoliticoCreateWithoutPartidoInput, PoliticoUncheckedCreateWithoutPartidoInput> | PoliticoCreateWithoutPartidoInput[] | PoliticoUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutPartidoInput | PoliticoCreateOrConnectWithoutPartidoInput[]
    createMany?: PoliticoCreateManyPartidoInputEnvelope
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type ProjetoCreateNestedManyWithoutPartidosInput = {
    create?: XOR<ProjetoCreateWithoutPartidosInput, ProjetoUncheckedCreateWithoutPartidosInput> | ProjetoCreateWithoutPartidosInput[] | ProjetoUncheckedCreateWithoutPartidosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPartidosInput | ProjetoCreateOrConnectWithoutPartidosInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type PoliticoUncheckedCreateNestedManyWithoutPartidoInput = {
    create?: XOR<PoliticoCreateWithoutPartidoInput, PoliticoUncheckedCreateWithoutPartidoInput> | PoliticoCreateWithoutPartidoInput[] | PoliticoUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutPartidoInput | PoliticoCreateOrConnectWithoutPartidoInput[]
    createMany?: PoliticoCreateManyPartidoInputEnvelope
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type ProjetoUncheckedCreateNestedManyWithoutPartidosInput = {
    create?: XOR<ProjetoCreateWithoutPartidosInput, ProjetoUncheckedCreateWithoutPartidosInput> | ProjetoCreateWithoutPartidosInput[] | ProjetoUncheckedCreateWithoutPartidosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPartidosInput | ProjetoCreateOrConnectWithoutPartidosInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type PoliticoUpdateManyWithoutPartidoNestedInput = {
    create?: XOR<PoliticoCreateWithoutPartidoInput, PoliticoUncheckedCreateWithoutPartidoInput> | PoliticoCreateWithoutPartidoInput[] | PoliticoUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutPartidoInput | PoliticoCreateOrConnectWithoutPartidoInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutPartidoInput | PoliticoUpsertWithWhereUniqueWithoutPartidoInput[]
    createMany?: PoliticoCreateManyPartidoInputEnvelope
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutPartidoInput | PoliticoUpdateWithWhereUniqueWithoutPartidoInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutPartidoInput | PoliticoUpdateManyWithWhereWithoutPartidoInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type ProjetoUpdateManyWithoutPartidosNestedInput = {
    create?: XOR<ProjetoCreateWithoutPartidosInput, ProjetoUncheckedCreateWithoutPartidosInput> | ProjetoCreateWithoutPartidosInput[] | ProjetoUncheckedCreateWithoutPartidosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPartidosInput | ProjetoCreateOrConnectWithoutPartidosInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutPartidosInput | ProjetoUpsertWithWhereUniqueWithoutPartidosInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutPartidosInput | ProjetoUpdateWithWhereUniqueWithoutPartidosInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutPartidosInput | ProjetoUpdateManyWithWhereWithoutPartidosInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type PoliticoUncheckedUpdateManyWithoutPartidoNestedInput = {
    create?: XOR<PoliticoCreateWithoutPartidoInput, PoliticoUncheckedCreateWithoutPartidoInput> | PoliticoCreateWithoutPartidoInput[] | PoliticoUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutPartidoInput | PoliticoCreateOrConnectWithoutPartidoInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutPartidoInput | PoliticoUpsertWithWhereUniqueWithoutPartidoInput[]
    createMany?: PoliticoCreateManyPartidoInputEnvelope
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutPartidoInput | PoliticoUpdateWithWhereUniqueWithoutPartidoInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutPartidoInput | PoliticoUpdateManyWithWhereWithoutPartidoInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type ProjetoUncheckedUpdateManyWithoutPartidosNestedInput = {
    create?: XOR<ProjetoCreateWithoutPartidosInput, ProjetoUncheckedCreateWithoutPartidosInput> | ProjetoCreateWithoutPartidosInput[] | ProjetoUncheckedCreateWithoutPartidosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPartidosInput | ProjetoCreateOrConnectWithoutPartidosInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutPartidosInput | ProjetoUpsertWithWhereUniqueWithoutPartidosInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutPartidosInput | ProjetoUpdateWithWhereUniqueWithoutPartidosInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutPartidosInput | ProjetoUpdateManyWithWhereWithoutPartidosInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type PoliticoCreateNestedManyWithoutEstadoInput = {
    create?: XOR<PoliticoCreateWithoutEstadoInput, PoliticoUncheckedCreateWithoutEstadoInput> | PoliticoCreateWithoutEstadoInput[] | PoliticoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutEstadoInput | PoliticoCreateOrConnectWithoutEstadoInput[]
    createMany?: PoliticoCreateManyEstadoInputEnvelope
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type PoliticoUncheckedCreateNestedManyWithoutEstadoInput = {
    create?: XOR<PoliticoCreateWithoutEstadoInput, PoliticoUncheckedCreateWithoutEstadoInput> | PoliticoCreateWithoutEstadoInput[] | PoliticoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutEstadoInput | PoliticoCreateOrConnectWithoutEstadoInput[]
    createMany?: PoliticoCreateManyEstadoInputEnvelope
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type PoliticoUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<PoliticoCreateWithoutEstadoInput, PoliticoUncheckedCreateWithoutEstadoInput> | PoliticoCreateWithoutEstadoInput[] | PoliticoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutEstadoInput | PoliticoCreateOrConnectWithoutEstadoInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutEstadoInput | PoliticoUpsertWithWhereUniqueWithoutEstadoInput[]
    createMany?: PoliticoCreateManyEstadoInputEnvelope
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutEstadoInput | PoliticoUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutEstadoInput | PoliticoUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type PoliticoUncheckedUpdateManyWithoutEstadoNestedInput = {
    create?: XOR<PoliticoCreateWithoutEstadoInput, PoliticoUncheckedCreateWithoutEstadoInput> | PoliticoCreateWithoutEstadoInput[] | PoliticoUncheckedCreateWithoutEstadoInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutEstadoInput | PoliticoCreateOrConnectWithoutEstadoInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutEstadoInput | PoliticoUpsertWithWhereUniqueWithoutEstadoInput[]
    createMany?: PoliticoCreateManyEstadoInputEnvelope
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutEstadoInput | PoliticoUpdateWithWhereUniqueWithoutEstadoInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutEstadoInput | PoliticoUpdateManyWithWhereWithoutEstadoInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type ProjetoCreateNestedManyWithoutDireitosVioladosInput = {
    create?: XOR<ProjetoCreateWithoutDireitosVioladosInput, ProjetoUncheckedCreateWithoutDireitosVioladosInput> | ProjetoCreateWithoutDireitosVioladosInput[] | ProjetoUncheckedCreateWithoutDireitosVioladosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutDireitosVioladosInput | ProjetoCreateOrConnectWithoutDireitosVioladosInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUncheckedCreateNestedManyWithoutDireitosVioladosInput = {
    create?: XOR<ProjetoCreateWithoutDireitosVioladosInput, ProjetoUncheckedCreateWithoutDireitosVioladosInput> | ProjetoCreateWithoutDireitosVioladosInput[] | ProjetoUncheckedCreateWithoutDireitosVioladosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutDireitosVioladosInput | ProjetoCreateOrConnectWithoutDireitosVioladosInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUpdateManyWithoutDireitosVioladosNestedInput = {
    create?: XOR<ProjetoCreateWithoutDireitosVioladosInput, ProjetoUncheckedCreateWithoutDireitosVioladosInput> | ProjetoCreateWithoutDireitosVioladosInput[] | ProjetoUncheckedCreateWithoutDireitosVioladosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutDireitosVioladosInput | ProjetoCreateOrConnectWithoutDireitosVioladosInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutDireitosVioladosInput | ProjetoUpsertWithWhereUniqueWithoutDireitosVioladosInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutDireitosVioladosInput | ProjetoUpdateWithWhereUniqueWithoutDireitosVioladosInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutDireitosVioladosInput | ProjetoUpdateManyWithWhereWithoutDireitosVioladosInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProjetoUncheckedUpdateManyWithoutDireitosVioladosNestedInput = {
    create?: XOR<ProjetoCreateWithoutDireitosVioladosInput, ProjetoUncheckedCreateWithoutDireitosVioladosInput> | ProjetoCreateWithoutDireitosVioladosInput[] | ProjetoUncheckedCreateWithoutDireitosVioladosInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutDireitosVioladosInput | ProjetoCreateOrConnectWithoutDireitosVioladosInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutDireitosVioladosInput | ProjetoUpsertWithWhereUniqueWithoutDireitosVioladosInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutDireitosVioladosInput | ProjetoUpdateWithWhereUniqueWithoutDireitosVioladosInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutDireitosVioladosInput | ProjetoUpdateManyWithWhereWithoutDireitosVioladosInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProjetoCreateNestedManyWithoutIdeologiasInput = {
    create?: XOR<ProjetoCreateWithoutIdeologiasInput, ProjetoUncheckedCreateWithoutIdeologiasInput> | ProjetoCreateWithoutIdeologiasInput[] | ProjetoUncheckedCreateWithoutIdeologiasInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutIdeologiasInput | ProjetoCreateOrConnectWithoutIdeologiasInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUncheckedCreateNestedManyWithoutIdeologiasInput = {
    create?: XOR<ProjetoCreateWithoutIdeologiasInput, ProjetoUncheckedCreateWithoutIdeologiasInput> | ProjetoCreateWithoutIdeologiasInput[] | ProjetoUncheckedCreateWithoutIdeologiasInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutIdeologiasInput | ProjetoCreateOrConnectWithoutIdeologiasInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUpdateManyWithoutIdeologiasNestedInput = {
    create?: XOR<ProjetoCreateWithoutIdeologiasInput, ProjetoUncheckedCreateWithoutIdeologiasInput> | ProjetoCreateWithoutIdeologiasInput[] | ProjetoUncheckedCreateWithoutIdeologiasInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutIdeologiasInput | ProjetoCreateOrConnectWithoutIdeologiasInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutIdeologiasInput | ProjetoUpsertWithWhereUniqueWithoutIdeologiasInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutIdeologiasInput | ProjetoUpdateWithWhereUniqueWithoutIdeologiasInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutIdeologiasInput | ProjetoUpdateManyWithWhereWithoutIdeologiasInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProjetoUncheckedUpdateManyWithoutIdeologiasNestedInput = {
    create?: XOR<ProjetoCreateWithoutIdeologiasInput, ProjetoUncheckedCreateWithoutIdeologiasInput> | ProjetoCreateWithoutIdeologiasInput[] | ProjetoUncheckedCreateWithoutIdeologiasInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutIdeologiasInput | ProjetoCreateOrConnectWithoutIdeologiasInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutIdeologiasInput | ProjetoUpsertWithWhereUniqueWithoutIdeologiasInput[]
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutIdeologiasInput | ProjetoUpdateWithWhereUniqueWithoutIdeologiasInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutIdeologiasInput | ProjetoUpdateManyWithWhereWithoutIdeologiasInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type PoliticoCreateNestedManyWithoutProfissoesInput = {
    create?: XOR<PoliticoCreateWithoutProfissoesInput, PoliticoUncheckedCreateWithoutProfissoesInput> | PoliticoCreateWithoutProfissoesInput[] | PoliticoUncheckedCreateWithoutProfissoesInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProfissoesInput | PoliticoCreateOrConnectWithoutProfissoesInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type PoliticoUncheckedCreateNestedManyWithoutProfissoesInput = {
    create?: XOR<PoliticoCreateWithoutProfissoesInput, PoliticoUncheckedCreateWithoutProfissoesInput> | PoliticoCreateWithoutProfissoesInput[] | PoliticoUncheckedCreateWithoutProfissoesInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProfissoesInput | PoliticoCreateOrConnectWithoutProfissoesInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
  }

  export type PoliticoUpdateManyWithoutProfissoesNestedInput = {
    create?: XOR<PoliticoCreateWithoutProfissoesInput, PoliticoUncheckedCreateWithoutProfissoesInput> | PoliticoCreateWithoutProfissoesInput[] | PoliticoUncheckedCreateWithoutProfissoesInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProfissoesInput | PoliticoCreateOrConnectWithoutProfissoesInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutProfissoesInput | PoliticoUpsertWithWhereUniqueWithoutProfissoesInput[]
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutProfissoesInput | PoliticoUpdateWithWhereUniqueWithoutProfissoesInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutProfissoesInput | PoliticoUpdateManyWithWhereWithoutProfissoesInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type PoliticoUncheckedUpdateManyWithoutProfissoesNestedInput = {
    create?: XOR<PoliticoCreateWithoutProfissoesInput, PoliticoUncheckedCreateWithoutProfissoesInput> | PoliticoCreateWithoutProfissoesInput[] | PoliticoUncheckedCreateWithoutProfissoesInput[]
    connectOrCreate?: PoliticoCreateOrConnectWithoutProfissoesInput | PoliticoCreateOrConnectWithoutProfissoesInput[]
    upsert?: PoliticoUpsertWithWhereUniqueWithoutProfissoesInput | PoliticoUpsertWithWhereUniqueWithoutProfissoesInput[]
    set?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    disconnect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    delete?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    connect?: PoliticoWhereUniqueInput | PoliticoWhereUniqueInput[]
    update?: PoliticoUpdateWithWhereUniqueWithoutProfissoesInput | PoliticoUpdateWithWhereUniqueWithoutProfissoesInput[]
    updateMany?: PoliticoUpdateManyWithWhereWithoutProfissoesInput | PoliticoUpdateManyWithWhereWithoutProfissoesInput[]
    deleteMany?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
  }

  export type ProjetoCreateNestedManyWithoutEsferaInput = {
    create?: XOR<ProjetoCreateWithoutEsferaInput, ProjetoUncheckedCreateWithoutEsferaInput> | ProjetoCreateWithoutEsferaInput[] | ProjetoUncheckedCreateWithoutEsferaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutEsferaInput | ProjetoCreateOrConnectWithoutEsferaInput[]
    createMany?: ProjetoCreateManyEsferaInputEnvelope
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUncheckedCreateNestedManyWithoutEsferaInput = {
    create?: XOR<ProjetoCreateWithoutEsferaInput, ProjetoUncheckedCreateWithoutEsferaInput> | ProjetoCreateWithoutEsferaInput[] | ProjetoUncheckedCreateWithoutEsferaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutEsferaInput | ProjetoCreateOrConnectWithoutEsferaInput[]
    createMany?: ProjetoCreateManyEsferaInputEnvelope
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUpdateManyWithoutEsferaNestedInput = {
    create?: XOR<ProjetoCreateWithoutEsferaInput, ProjetoUncheckedCreateWithoutEsferaInput> | ProjetoCreateWithoutEsferaInput[] | ProjetoUncheckedCreateWithoutEsferaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutEsferaInput | ProjetoCreateOrConnectWithoutEsferaInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutEsferaInput | ProjetoUpsertWithWhereUniqueWithoutEsferaInput[]
    createMany?: ProjetoCreateManyEsferaInputEnvelope
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutEsferaInput | ProjetoUpdateWithWhereUniqueWithoutEsferaInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutEsferaInput | ProjetoUpdateManyWithWhereWithoutEsferaInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProjetoUncheckedUpdateManyWithoutEsferaNestedInput = {
    create?: XOR<ProjetoCreateWithoutEsferaInput, ProjetoUncheckedCreateWithoutEsferaInput> | ProjetoCreateWithoutEsferaInput[] | ProjetoUncheckedCreateWithoutEsferaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutEsferaInput | ProjetoCreateOrConnectWithoutEsferaInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutEsferaInput | ProjetoUpsertWithWhereUniqueWithoutEsferaInput[]
    createMany?: ProjetoCreateManyEsferaInputEnvelope
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutEsferaInput | ProjetoUpdateWithWhereUniqueWithoutEsferaInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutEsferaInput | ProjetoUpdateManyWithWhereWithoutEsferaInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProjetoCreateNestedManyWithoutPautaInput = {
    create?: XOR<ProjetoCreateWithoutPautaInput, ProjetoUncheckedCreateWithoutPautaInput> | ProjetoCreateWithoutPautaInput[] | ProjetoUncheckedCreateWithoutPautaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPautaInput | ProjetoCreateOrConnectWithoutPautaInput[]
    createMany?: ProjetoCreateManyPautaInputEnvelope
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUncheckedCreateNestedManyWithoutPautaInput = {
    create?: XOR<ProjetoCreateWithoutPautaInput, ProjetoUncheckedCreateWithoutPautaInput> | ProjetoCreateWithoutPautaInput[] | ProjetoUncheckedCreateWithoutPautaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPautaInput | ProjetoCreateOrConnectWithoutPautaInput[]
    createMany?: ProjetoCreateManyPautaInputEnvelope
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
  }

  export type ProjetoUpdateManyWithoutPautaNestedInput = {
    create?: XOR<ProjetoCreateWithoutPautaInput, ProjetoUncheckedCreateWithoutPautaInput> | ProjetoCreateWithoutPautaInput[] | ProjetoUncheckedCreateWithoutPautaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPautaInput | ProjetoCreateOrConnectWithoutPautaInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutPautaInput | ProjetoUpsertWithWhereUniqueWithoutPautaInput[]
    createMany?: ProjetoCreateManyPautaInputEnvelope
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutPautaInput | ProjetoUpdateWithWhereUniqueWithoutPautaInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutPautaInput | ProjetoUpdateManyWithWhereWithoutPautaInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type ProjetoUncheckedUpdateManyWithoutPautaNestedInput = {
    create?: XOR<ProjetoCreateWithoutPautaInput, ProjetoUncheckedCreateWithoutPautaInput> | ProjetoCreateWithoutPautaInput[] | ProjetoUncheckedCreateWithoutPautaInput[]
    connectOrCreate?: ProjetoCreateOrConnectWithoutPautaInput | ProjetoCreateOrConnectWithoutPautaInput[]
    upsert?: ProjetoUpsertWithWhereUniqueWithoutPautaInput | ProjetoUpsertWithWhereUniqueWithoutPautaInput[]
    createMany?: ProjetoCreateManyPautaInputEnvelope
    set?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    disconnect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    delete?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    connect?: ProjetoWhereUniqueInput | ProjetoWhereUniqueInput[]
    update?: ProjetoUpdateWithWhereUniqueWithoutPautaInput | ProjetoUpdateWithWhereUniqueWithoutPautaInput[]
    updateMany?: ProjetoUpdateManyWithWhereWithoutPautaInput | ProjetoUpdateManyWithWhereWithoutPautaInput[]
    deleteMany?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EsferaCreateWithoutProjetosInput = {
    id?: string
    nome: string
  }

  export type EsferaUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
  }

  export type EsferaCreateOrConnectWithoutProjetosInput = {
    where: EsferaWhereUniqueInput
    create: XOR<EsferaCreateWithoutProjetosInput, EsferaUncheckedCreateWithoutProjetosInput>
  }

  export type PautaCreateWithoutProjetosInput = {
    id?: string
    nome: string
  }

  export type PautaUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
  }

  export type PautaCreateOrConnectWithoutProjetosInput = {
    where: PautaWhereUniqueInput
    create: XOR<PautaCreateWithoutProjetosInput, PautaUncheckedCreateWithoutProjetosInput>
  }

  export type DireitoVioladoCreateWithoutProjetosInput = {
    id?: string
    nome: string
    sigla: string
    descricao: string
  }

  export type DireitoVioladoUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
    sigla: string
    descricao: string
  }

  export type DireitoVioladoCreateOrConnectWithoutProjetosInput = {
    where: DireitoVioladoWhereUniqueInput
    create: XOR<DireitoVioladoCreateWithoutProjetosInput, DireitoVioladoUncheckedCreateWithoutProjetosInput>
  }

  export type IdeologiaCreateWithoutProjetosInput = {
    id?: string
    nome: string
  }

  export type IdeologiaUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
  }

  export type IdeologiaCreateOrConnectWithoutProjetosInput = {
    where: IdeologiaWhereUniqueInput
    create: XOR<IdeologiaCreateWithoutProjetosInput, IdeologiaUncheckedCreateWithoutProjetosInput>
  }

  export type PartidoCreateWithoutProjetosInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
    politicos?: PoliticoCreateNestedManyWithoutPartidoInput
  }

  export type PartidoUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
    politicos?: PoliticoUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type PartidoCreateOrConnectWithoutProjetosInput = {
    where: PartidoWhereUniqueInput
    create: XOR<PartidoCreateWithoutProjetosInput, PartidoUncheckedCreateWithoutProjetosInput>
  }

  export type PoliticoCreateWithoutProjetosInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    ideologia: string
    dataNascimento: Date | string
    estado: EstadoCreateNestedOneWithoutPoliticosInput
    partido: PartidoCreateNestedOneWithoutPoliticosInput
    profissoes?: ProfissaoCreateNestedManyWithoutPoliticosInput
  }

  export type PoliticoUncheckedCreateWithoutProjetosInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    partidoId: string
    ideologia: string
    dataNascimento: Date | string
    profissoes?: ProfissaoUncheckedCreateNestedManyWithoutPoliticosInput
  }

  export type PoliticoCreateOrConnectWithoutProjetosInput = {
    where: PoliticoWhereUniqueInput
    create: XOR<PoliticoCreateWithoutProjetosInput, PoliticoUncheckedCreateWithoutProjetosInput>
  }

  export type EsferaUpsertWithoutProjetosInput = {
    update: XOR<EsferaUpdateWithoutProjetosInput, EsferaUncheckedUpdateWithoutProjetosInput>
    create: XOR<EsferaCreateWithoutProjetosInput, EsferaUncheckedCreateWithoutProjetosInput>
    where?: EsferaWhereInput
  }

  export type EsferaUpdateToOneWithWhereWithoutProjetosInput = {
    where?: EsferaWhereInput
    data: XOR<EsferaUpdateWithoutProjetosInput, EsferaUncheckedUpdateWithoutProjetosInput>
  }

  export type EsferaUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type EsferaUncheckedUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PautaUpsertWithoutProjetosInput = {
    update: XOR<PautaUpdateWithoutProjetosInput, PautaUncheckedUpdateWithoutProjetosInput>
    create: XOR<PautaCreateWithoutProjetosInput, PautaUncheckedCreateWithoutProjetosInput>
    where?: PautaWhereInput
  }

  export type PautaUpdateToOneWithWhereWithoutProjetosInput = {
    where?: PautaWhereInput
    data: XOR<PautaUpdateWithoutProjetosInput, PautaUncheckedUpdateWithoutProjetosInput>
  }

  export type PautaUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PautaUncheckedUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type DireitoVioladoUpsertWithWhereUniqueWithoutProjetosInput = {
    where: DireitoVioladoWhereUniqueInput
    update: XOR<DireitoVioladoUpdateWithoutProjetosInput, DireitoVioladoUncheckedUpdateWithoutProjetosInput>
    create: XOR<DireitoVioladoCreateWithoutProjetosInput, DireitoVioladoUncheckedCreateWithoutProjetosInput>
  }

  export type DireitoVioladoUpdateWithWhereUniqueWithoutProjetosInput = {
    where: DireitoVioladoWhereUniqueInput
    data: XOR<DireitoVioladoUpdateWithoutProjetosInput, DireitoVioladoUncheckedUpdateWithoutProjetosInput>
  }

  export type DireitoVioladoUpdateManyWithWhereWithoutProjetosInput = {
    where: DireitoVioladoScalarWhereInput
    data: XOR<DireitoVioladoUpdateManyMutationInput, DireitoVioladoUncheckedUpdateManyWithoutProjetosInput>
  }

  export type DireitoVioladoScalarWhereInput = {
    AND?: DireitoVioladoScalarWhereInput | DireitoVioladoScalarWhereInput[]
    OR?: DireitoVioladoScalarWhereInput[]
    NOT?: DireitoVioladoScalarWhereInput | DireitoVioladoScalarWhereInput[]
    id?: StringFilter<"DireitoViolado"> | string
    nome?: StringFilter<"DireitoViolado"> | string
    sigla?: StringFilter<"DireitoViolado"> | string
    descricao?: StringFilter<"DireitoViolado"> | string
  }

  export type IdeologiaUpsertWithWhereUniqueWithoutProjetosInput = {
    where: IdeologiaWhereUniqueInput
    update: XOR<IdeologiaUpdateWithoutProjetosInput, IdeologiaUncheckedUpdateWithoutProjetosInput>
    create: XOR<IdeologiaCreateWithoutProjetosInput, IdeologiaUncheckedCreateWithoutProjetosInput>
  }

  export type IdeologiaUpdateWithWhereUniqueWithoutProjetosInput = {
    where: IdeologiaWhereUniqueInput
    data: XOR<IdeologiaUpdateWithoutProjetosInput, IdeologiaUncheckedUpdateWithoutProjetosInput>
  }

  export type IdeologiaUpdateManyWithWhereWithoutProjetosInput = {
    where: IdeologiaScalarWhereInput
    data: XOR<IdeologiaUpdateManyMutationInput, IdeologiaUncheckedUpdateManyWithoutProjetosInput>
  }

  export type IdeologiaScalarWhereInput = {
    AND?: IdeologiaScalarWhereInput | IdeologiaScalarWhereInput[]
    OR?: IdeologiaScalarWhereInput[]
    NOT?: IdeologiaScalarWhereInput | IdeologiaScalarWhereInput[]
    id?: StringFilter<"Ideologia"> | string
    nome?: StringFilter<"Ideologia"> | string
  }

  export type PartidoUpsertWithWhereUniqueWithoutProjetosInput = {
    where: PartidoWhereUniqueInput
    update: XOR<PartidoUpdateWithoutProjetosInput, PartidoUncheckedUpdateWithoutProjetosInput>
    create: XOR<PartidoCreateWithoutProjetosInput, PartidoUncheckedCreateWithoutProjetosInput>
  }

  export type PartidoUpdateWithWhereUniqueWithoutProjetosInput = {
    where: PartidoWhereUniqueInput
    data: XOR<PartidoUpdateWithoutProjetosInput, PartidoUncheckedUpdateWithoutProjetosInput>
  }

  export type PartidoUpdateManyWithWhereWithoutProjetosInput = {
    where: PartidoScalarWhereInput
    data: XOR<PartidoUpdateManyMutationInput, PartidoUncheckedUpdateManyWithoutProjetosInput>
  }

  export type PartidoScalarWhereInput = {
    AND?: PartidoScalarWhereInput | PartidoScalarWhereInput[]
    OR?: PartidoScalarWhereInput[]
    NOT?: PartidoScalarWhereInput | PartidoScalarWhereInput[]
    id?: StringFilter<"Partido"> | string
    nome?: StringFilter<"Partido"> | string
    sigla?: StringFilter<"Partido"> | string
    imagem?: StringNullableFilter<"Partido"> | string | null
  }

  export type PoliticoUpsertWithWhereUniqueWithoutProjetosInput = {
    where: PoliticoWhereUniqueInput
    update: XOR<PoliticoUpdateWithoutProjetosInput, PoliticoUncheckedUpdateWithoutProjetosInput>
    create: XOR<PoliticoCreateWithoutProjetosInput, PoliticoUncheckedCreateWithoutProjetosInput>
  }

  export type PoliticoUpdateWithWhereUniqueWithoutProjetosInput = {
    where: PoliticoWhereUniqueInput
    data: XOR<PoliticoUpdateWithoutProjetosInput, PoliticoUncheckedUpdateWithoutProjetosInput>
  }

  export type PoliticoUpdateManyWithWhereWithoutProjetosInput = {
    where: PoliticoScalarWhereInput
    data: XOR<PoliticoUpdateManyMutationInput, PoliticoUncheckedUpdateManyWithoutProjetosInput>
  }

  export type PoliticoScalarWhereInput = {
    AND?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
    OR?: PoliticoScalarWhereInput[]
    NOT?: PoliticoScalarWhereInput | PoliticoScalarWhereInput[]
    id?: StringFilter<"Politico"> | string
    nome?: StringFilter<"Politico"> | string
    foto?: StringNullableFilter<"Politico"> | string | null
    sexo?: StringFilter<"Politico"> | string
    raca?: StringFilter<"Politico"> | string
    religiao?: StringFilter<"Politico"> | string
    estadoId?: StringFilter<"Politico"> | string
    partidoId?: StringFilter<"Politico"> | string
    ideologia?: StringFilter<"Politico"> | string
    dataNascimento?: DateTimeFilter<"Politico"> | Date | string
  }

  export type EstadoCreateWithoutPoliticosInput = {
    id?: string
    nome: string
    sigla: string
  }

  export type EstadoUncheckedCreateWithoutPoliticosInput = {
    id?: string
    nome: string
    sigla: string
  }

  export type EstadoCreateOrConnectWithoutPoliticosInput = {
    where: EstadoWhereUniqueInput
    create: XOR<EstadoCreateWithoutPoliticosInput, EstadoUncheckedCreateWithoutPoliticosInput>
  }

  export type PartidoCreateWithoutPoliticosInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
    projetos?: ProjetoCreateNestedManyWithoutPartidosInput
  }

  export type PartidoUncheckedCreateWithoutPoliticosInput = {
    id?: string
    nome: string
    sigla: string
    imagem?: string | null
    projetos?: ProjetoUncheckedCreateNestedManyWithoutPartidosInput
  }

  export type PartidoCreateOrConnectWithoutPoliticosInput = {
    where: PartidoWhereUniqueInput
    create: XOR<PartidoCreateWithoutPoliticosInput, PartidoUncheckedCreateWithoutPoliticosInput>
  }

  export type ProfissaoCreateWithoutPoliticosInput = {
    id?: string
    nome: string
  }

  export type ProfissaoUncheckedCreateWithoutPoliticosInput = {
    id?: string
    nome: string
  }

  export type ProfissaoCreateOrConnectWithoutPoliticosInput = {
    where: ProfissaoWhereUniqueInput
    create: XOR<ProfissaoCreateWithoutPoliticosInput, ProfissaoUncheckedCreateWithoutPoliticosInput>
  }

  export type ProjetoCreateWithoutAutoresInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    esfera: EsferaCreateNestedOneWithoutProjetosInput
    pauta: PautaCreateNestedOneWithoutProjetosInput
    direitosViolados?: DireitoVioladoCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaCreateNestedManyWithoutProjetosInput
    partidos?: PartidoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateWithoutAutoresInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
    direitosViolados?: DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaUncheckedCreateNestedManyWithoutProjetosInput
    partidos?: PartidoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoCreateOrConnectWithoutAutoresInput = {
    where: ProjetoWhereUniqueInput
    create: XOR<ProjetoCreateWithoutAutoresInput, ProjetoUncheckedCreateWithoutAutoresInput>
  }

  export type EstadoUpsertWithoutPoliticosInput = {
    update: XOR<EstadoUpdateWithoutPoliticosInput, EstadoUncheckedUpdateWithoutPoliticosInput>
    create: XOR<EstadoCreateWithoutPoliticosInput, EstadoUncheckedCreateWithoutPoliticosInput>
    where?: EstadoWhereInput
  }

  export type EstadoUpdateToOneWithWhereWithoutPoliticosInput = {
    where?: EstadoWhereInput
    data: XOR<EstadoUpdateWithoutPoliticosInput, EstadoUncheckedUpdateWithoutPoliticosInput>
  }

  export type EstadoUpdateWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
  }

  export type EstadoUncheckedUpdateWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
  }

  export type PartidoUpsertWithoutPoliticosInput = {
    update: XOR<PartidoUpdateWithoutPoliticosInput, PartidoUncheckedUpdateWithoutPoliticosInput>
    create: XOR<PartidoCreateWithoutPoliticosInput, PartidoUncheckedCreateWithoutPoliticosInput>
    where?: PartidoWhereInput
  }

  export type PartidoUpdateToOneWithWhereWithoutPoliticosInput = {
    where?: PartidoWhereInput
    data: XOR<PartidoUpdateWithoutPoliticosInput, PartidoUncheckedUpdateWithoutPoliticosInput>
  }

  export type PartidoUpdateWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    projetos?: ProjetoUpdateManyWithoutPartidosNestedInput
  }

  export type PartidoUncheckedUpdateWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    projetos?: ProjetoUncheckedUpdateManyWithoutPartidosNestedInput
  }

  export type ProfissaoUpsertWithWhereUniqueWithoutPoliticosInput = {
    where: ProfissaoWhereUniqueInput
    update: XOR<ProfissaoUpdateWithoutPoliticosInput, ProfissaoUncheckedUpdateWithoutPoliticosInput>
    create: XOR<ProfissaoCreateWithoutPoliticosInput, ProfissaoUncheckedCreateWithoutPoliticosInput>
  }

  export type ProfissaoUpdateWithWhereUniqueWithoutPoliticosInput = {
    where: ProfissaoWhereUniqueInput
    data: XOR<ProfissaoUpdateWithoutPoliticosInput, ProfissaoUncheckedUpdateWithoutPoliticosInput>
  }

  export type ProfissaoUpdateManyWithWhereWithoutPoliticosInput = {
    where: ProfissaoScalarWhereInput
    data: XOR<ProfissaoUpdateManyMutationInput, ProfissaoUncheckedUpdateManyWithoutPoliticosInput>
  }

  export type ProfissaoScalarWhereInput = {
    AND?: ProfissaoScalarWhereInput | ProfissaoScalarWhereInput[]
    OR?: ProfissaoScalarWhereInput[]
    NOT?: ProfissaoScalarWhereInput | ProfissaoScalarWhereInput[]
    id?: StringFilter<"Profissao"> | string
    nome?: StringFilter<"Profissao"> | string
  }

  export type ProjetoUpsertWithWhereUniqueWithoutAutoresInput = {
    where: ProjetoWhereUniqueInput
    update: XOR<ProjetoUpdateWithoutAutoresInput, ProjetoUncheckedUpdateWithoutAutoresInput>
    create: XOR<ProjetoCreateWithoutAutoresInput, ProjetoUncheckedCreateWithoutAutoresInput>
  }

  export type ProjetoUpdateWithWhereUniqueWithoutAutoresInput = {
    where: ProjetoWhereUniqueInput
    data: XOR<ProjetoUpdateWithoutAutoresInput, ProjetoUncheckedUpdateWithoutAutoresInput>
  }

  export type ProjetoUpdateManyWithWhereWithoutAutoresInput = {
    where: ProjetoScalarWhereInput
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyWithoutAutoresInput>
  }

  export type ProjetoScalarWhereInput = {
    AND?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
    OR?: ProjetoScalarWhereInput[]
    NOT?: ProjetoScalarWhereInput | ProjetoScalarWhereInput[]
    id?: StringFilter<"Projeto"> | string
    ano?: StringFilter<"Projeto"> | string
    ementa?: StringFilter<"Projeto"> | string
    pautaId?: StringFilter<"Projeto"> | string
    esferaId?: StringFilter<"Projeto"> | string
    numeroPl?: StringFilter<"Projeto"> | string
    justificativa?: StringFilter<"Projeto"> | string
  }

  export type PoliticoCreateWithoutPartidoInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    ideologia: string
    dataNascimento: Date | string
    estado: EstadoCreateNestedOneWithoutPoliticosInput
    profissoes?: ProfissaoCreateNestedManyWithoutPoliticosInput
    projetos?: ProjetoCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoUncheckedCreateWithoutPartidoInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    ideologia: string
    dataNascimento: Date | string
    profissoes?: ProfissaoUncheckedCreateNestedManyWithoutPoliticosInput
    projetos?: ProjetoUncheckedCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoCreateOrConnectWithoutPartidoInput = {
    where: PoliticoWhereUniqueInput
    create: XOR<PoliticoCreateWithoutPartidoInput, PoliticoUncheckedCreateWithoutPartidoInput>
  }

  export type PoliticoCreateManyPartidoInputEnvelope = {
    data: PoliticoCreateManyPartidoInput | PoliticoCreateManyPartidoInput[]
    skipDuplicates?: boolean
  }

  export type ProjetoCreateWithoutPartidosInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    esfera: EsferaCreateNestedOneWithoutProjetosInput
    pauta: PautaCreateNestedOneWithoutProjetosInput
    direitosViolados?: DireitoVioladoCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaCreateNestedManyWithoutProjetosInput
    autores?: PoliticoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateWithoutPartidosInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
    direitosViolados?: DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaUncheckedCreateNestedManyWithoutProjetosInput
    autores?: PoliticoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoCreateOrConnectWithoutPartidosInput = {
    where: ProjetoWhereUniqueInput
    create: XOR<ProjetoCreateWithoutPartidosInput, ProjetoUncheckedCreateWithoutPartidosInput>
  }

  export type PoliticoUpsertWithWhereUniqueWithoutPartidoInput = {
    where: PoliticoWhereUniqueInput
    update: XOR<PoliticoUpdateWithoutPartidoInput, PoliticoUncheckedUpdateWithoutPartidoInput>
    create: XOR<PoliticoCreateWithoutPartidoInput, PoliticoUncheckedCreateWithoutPartidoInput>
  }

  export type PoliticoUpdateWithWhereUniqueWithoutPartidoInput = {
    where: PoliticoWhereUniqueInput
    data: XOR<PoliticoUpdateWithoutPartidoInput, PoliticoUncheckedUpdateWithoutPartidoInput>
  }

  export type PoliticoUpdateManyWithWhereWithoutPartidoInput = {
    where: PoliticoScalarWhereInput
    data: XOR<PoliticoUpdateManyMutationInput, PoliticoUncheckedUpdateManyWithoutPartidoInput>
  }

  export type ProjetoUpsertWithWhereUniqueWithoutPartidosInput = {
    where: ProjetoWhereUniqueInput
    update: XOR<ProjetoUpdateWithoutPartidosInput, ProjetoUncheckedUpdateWithoutPartidosInput>
    create: XOR<ProjetoCreateWithoutPartidosInput, ProjetoUncheckedCreateWithoutPartidosInput>
  }

  export type ProjetoUpdateWithWhereUniqueWithoutPartidosInput = {
    where: ProjetoWhereUniqueInput
    data: XOR<ProjetoUpdateWithoutPartidosInput, ProjetoUncheckedUpdateWithoutPartidosInput>
  }

  export type ProjetoUpdateManyWithWhereWithoutPartidosInput = {
    where: ProjetoScalarWhereInput
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyWithoutPartidosInput>
  }

  export type PoliticoCreateWithoutEstadoInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    ideologia: string
    dataNascimento: Date | string
    partido: PartidoCreateNestedOneWithoutPoliticosInput
    profissoes?: ProfissaoCreateNestedManyWithoutPoliticosInput
    projetos?: ProjetoCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoUncheckedCreateWithoutEstadoInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    partidoId: string
    ideologia: string
    dataNascimento: Date | string
    profissoes?: ProfissaoUncheckedCreateNestedManyWithoutPoliticosInput
    projetos?: ProjetoUncheckedCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoCreateOrConnectWithoutEstadoInput = {
    where: PoliticoWhereUniqueInput
    create: XOR<PoliticoCreateWithoutEstadoInput, PoliticoUncheckedCreateWithoutEstadoInput>
  }

  export type PoliticoCreateManyEstadoInputEnvelope = {
    data: PoliticoCreateManyEstadoInput | PoliticoCreateManyEstadoInput[]
    skipDuplicates?: boolean
  }

  export type PoliticoUpsertWithWhereUniqueWithoutEstadoInput = {
    where: PoliticoWhereUniqueInput
    update: XOR<PoliticoUpdateWithoutEstadoInput, PoliticoUncheckedUpdateWithoutEstadoInput>
    create: XOR<PoliticoCreateWithoutEstadoInput, PoliticoUncheckedCreateWithoutEstadoInput>
  }

  export type PoliticoUpdateWithWhereUniqueWithoutEstadoInput = {
    where: PoliticoWhereUniqueInput
    data: XOR<PoliticoUpdateWithoutEstadoInput, PoliticoUncheckedUpdateWithoutEstadoInput>
  }

  export type PoliticoUpdateManyWithWhereWithoutEstadoInput = {
    where: PoliticoScalarWhereInput
    data: XOR<PoliticoUpdateManyMutationInput, PoliticoUncheckedUpdateManyWithoutEstadoInput>
  }

  export type ProjetoCreateWithoutDireitosVioladosInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    esfera: EsferaCreateNestedOneWithoutProjetosInput
    pauta: PautaCreateNestedOneWithoutProjetosInput
    ideologias?: IdeologiaCreateNestedManyWithoutProjetosInput
    partidos?: PartidoCreateNestedManyWithoutProjetosInput
    autores?: PoliticoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateWithoutDireitosVioladosInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
    ideologias?: IdeologiaUncheckedCreateNestedManyWithoutProjetosInput
    partidos?: PartidoUncheckedCreateNestedManyWithoutProjetosInput
    autores?: PoliticoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoCreateOrConnectWithoutDireitosVioladosInput = {
    where: ProjetoWhereUniqueInput
    create: XOR<ProjetoCreateWithoutDireitosVioladosInput, ProjetoUncheckedCreateWithoutDireitosVioladosInput>
  }

  export type ProjetoUpsertWithWhereUniqueWithoutDireitosVioladosInput = {
    where: ProjetoWhereUniqueInput
    update: XOR<ProjetoUpdateWithoutDireitosVioladosInput, ProjetoUncheckedUpdateWithoutDireitosVioladosInput>
    create: XOR<ProjetoCreateWithoutDireitosVioladosInput, ProjetoUncheckedCreateWithoutDireitosVioladosInput>
  }

  export type ProjetoUpdateWithWhereUniqueWithoutDireitosVioladosInput = {
    where: ProjetoWhereUniqueInput
    data: XOR<ProjetoUpdateWithoutDireitosVioladosInput, ProjetoUncheckedUpdateWithoutDireitosVioladosInput>
  }

  export type ProjetoUpdateManyWithWhereWithoutDireitosVioladosInput = {
    where: ProjetoScalarWhereInput
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyWithoutDireitosVioladosInput>
  }

  export type ProjetoCreateWithoutIdeologiasInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    esfera: EsferaCreateNestedOneWithoutProjetosInput
    pauta: PautaCreateNestedOneWithoutProjetosInput
    direitosViolados?: DireitoVioladoCreateNestedManyWithoutProjetosInput
    partidos?: PartidoCreateNestedManyWithoutProjetosInput
    autores?: PoliticoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateWithoutIdeologiasInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    esferaId: string
    numeroPl: string
    justificativa: string
    direitosViolados?: DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput
    partidos?: PartidoUncheckedCreateNestedManyWithoutProjetosInput
    autores?: PoliticoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoCreateOrConnectWithoutIdeologiasInput = {
    where: ProjetoWhereUniqueInput
    create: XOR<ProjetoCreateWithoutIdeologiasInput, ProjetoUncheckedCreateWithoutIdeologiasInput>
  }

  export type ProjetoUpsertWithWhereUniqueWithoutIdeologiasInput = {
    where: ProjetoWhereUniqueInput
    update: XOR<ProjetoUpdateWithoutIdeologiasInput, ProjetoUncheckedUpdateWithoutIdeologiasInput>
    create: XOR<ProjetoCreateWithoutIdeologiasInput, ProjetoUncheckedCreateWithoutIdeologiasInput>
  }

  export type ProjetoUpdateWithWhereUniqueWithoutIdeologiasInput = {
    where: ProjetoWhereUniqueInput
    data: XOR<ProjetoUpdateWithoutIdeologiasInput, ProjetoUncheckedUpdateWithoutIdeologiasInput>
  }

  export type ProjetoUpdateManyWithWhereWithoutIdeologiasInput = {
    where: ProjetoScalarWhereInput
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyWithoutIdeologiasInput>
  }

  export type PoliticoCreateWithoutProfissoesInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    ideologia: string
    dataNascimento: Date | string
    estado: EstadoCreateNestedOneWithoutPoliticosInput
    partido: PartidoCreateNestedOneWithoutPoliticosInput
    projetos?: ProjetoCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoUncheckedCreateWithoutProfissoesInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    partidoId: string
    ideologia: string
    dataNascimento: Date | string
    projetos?: ProjetoUncheckedCreateNestedManyWithoutAutoresInput
  }

  export type PoliticoCreateOrConnectWithoutProfissoesInput = {
    where: PoliticoWhereUniqueInput
    create: XOR<PoliticoCreateWithoutProfissoesInput, PoliticoUncheckedCreateWithoutProfissoesInput>
  }

  export type PoliticoUpsertWithWhereUniqueWithoutProfissoesInput = {
    where: PoliticoWhereUniqueInput
    update: XOR<PoliticoUpdateWithoutProfissoesInput, PoliticoUncheckedUpdateWithoutProfissoesInput>
    create: XOR<PoliticoCreateWithoutProfissoesInput, PoliticoUncheckedCreateWithoutProfissoesInput>
  }

  export type PoliticoUpdateWithWhereUniqueWithoutProfissoesInput = {
    where: PoliticoWhereUniqueInput
    data: XOR<PoliticoUpdateWithoutProfissoesInput, PoliticoUncheckedUpdateWithoutProfissoesInput>
  }

  export type PoliticoUpdateManyWithWhereWithoutProfissoesInput = {
    where: PoliticoScalarWhereInput
    data: XOR<PoliticoUpdateManyMutationInput, PoliticoUncheckedUpdateManyWithoutProfissoesInput>
  }

  export type ProjetoCreateWithoutEsferaInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    pauta: PautaCreateNestedOneWithoutProjetosInput
    direitosViolados?: DireitoVioladoCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaCreateNestedManyWithoutProjetosInput
    partidos?: PartidoCreateNestedManyWithoutProjetosInput
    autores?: PoliticoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateWithoutEsferaInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    numeroPl: string
    justificativa: string
    direitosViolados?: DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaUncheckedCreateNestedManyWithoutProjetosInput
    partidos?: PartidoUncheckedCreateNestedManyWithoutProjetosInput
    autores?: PoliticoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoCreateOrConnectWithoutEsferaInput = {
    where: ProjetoWhereUniqueInput
    create: XOR<ProjetoCreateWithoutEsferaInput, ProjetoUncheckedCreateWithoutEsferaInput>
  }

  export type ProjetoCreateManyEsferaInputEnvelope = {
    data: ProjetoCreateManyEsferaInput | ProjetoCreateManyEsferaInput[]
    skipDuplicates?: boolean
  }

  export type ProjetoUpsertWithWhereUniqueWithoutEsferaInput = {
    where: ProjetoWhereUniqueInput
    update: XOR<ProjetoUpdateWithoutEsferaInput, ProjetoUncheckedUpdateWithoutEsferaInput>
    create: XOR<ProjetoCreateWithoutEsferaInput, ProjetoUncheckedCreateWithoutEsferaInput>
  }

  export type ProjetoUpdateWithWhereUniqueWithoutEsferaInput = {
    where: ProjetoWhereUniqueInput
    data: XOR<ProjetoUpdateWithoutEsferaInput, ProjetoUncheckedUpdateWithoutEsferaInput>
  }

  export type ProjetoUpdateManyWithWhereWithoutEsferaInput = {
    where: ProjetoScalarWhereInput
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyWithoutEsferaInput>
  }

  export type ProjetoCreateWithoutPautaInput = {
    id?: string
    ano: string
    ementa: string
    numeroPl: string
    justificativa: string
    esfera: EsferaCreateNestedOneWithoutProjetosInput
    direitosViolados?: DireitoVioladoCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaCreateNestedManyWithoutProjetosInput
    partidos?: PartidoCreateNestedManyWithoutProjetosInput
    autores?: PoliticoCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoUncheckedCreateWithoutPautaInput = {
    id?: string
    ano: string
    ementa: string
    esferaId: string
    numeroPl: string
    justificativa: string
    direitosViolados?: DireitoVioladoUncheckedCreateNestedManyWithoutProjetosInput
    ideologias?: IdeologiaUncheckedCreateNestedManyWithoutProjetosInput
    partidos?: PartidoUncheckedCreateNestedManyWithoutProjetosInput
    autores?: PoliticoUncheckedCreateNestedManyWithoutProjetosInput
  }

  export type ProjetoCreateOrConnectWithoutPautaInput = {
    where: ProjetoWhereUniqueInput
    create: XOR<ProjetoCreateWithoutPautaInput, ProjetoUncheckedCreateWithoutPautaInput>
  }

  export type ProjetoCreateManyPautaInputEnvelope = {
    data: ProjetoCreateManyPautaInput | ProjetoCreateManyPautaInput[]
    skipDuplicates?: boolean
  }

  export type ProjetoUpsertWithWhereUniqueWithoutPautaInput = {
    where: ProjetoWhereUniqueInput
    update: XOR<ProjetoUpdateWithoutPautaInput, ProjetoUncheckedUpdateWithoutPautaInput>
    create: XOR<ProjetoCreateWithoutPautaInput, ProjetoUncheckedCreateWithoutPautaInput>
  }

  export type ProjetoUpdateWithWhereUniqueWithoutPautaInput = {
    where: ProjetoWhereUniqueInput
    data: XOR<ProjetoUpdateWithoutPautaInput, ProjetoUncheckedUpdateWithoutPautaInput>
  }

  export type ProjetoUpdateManyWithWhereWithoutPautaInput = {
    where: ProjetoScalarWhereInput
    data: XOR<ProjetoUpdateManyMutationInput, ProjetoUncheckedUpdateManyWithoutPautaInput>
  }

  export type DireitoVioladoUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DireitoVioladoUncheckedUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type DireitoVioladoUncheckedUpdateManyWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type IdeologiaUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type IdeologiaUncheckedUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type IdeologiaUncheckedUpdateManyWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type PartidoUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    politicos?: PoliticoUpdateManyWithoutPartidoNestedInput
  }

  export type PartidoUncheckedUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
    politicos?: PoliticoUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type PartidoUncheckedUpdateManyWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    sigla?: StringFieldUpdateOperationsInput | string
    imagem?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PoliticoUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EstadoUpdateOneRequiredWithoutPoliticosNestedInput
    partido?: PartidoUpdateOneRequiredWithoutPoliticosNestedInput
    profissoes?: ProfissaoUpdateManyWithoutPoliticosNestedInput
  }

  export type PoliticoUncheckedUpdateWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    profissoes?: ProfissaoUncheckedUpdateManyWithoutPoliticosNestedInput
  }

  export type PoliticoUncheckedUpdateManyWithoutProjetosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfissaoUpdateWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ProfissaoUncheckedUpdateWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ProfissaoUncheckedUpdateManyWithoutPoliticosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetoUpdateWithoutAutoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    esfera?: EsferaUpdateOneRequiredWithoutProjetosNestedInput
    pauta?: PautaUpdateOneRequiredWithoutProjetosNestedInput
    direitosViolados?: DireitoVioladoUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateWithoutAutoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    direitosViolados?: DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateManyWithoutAutoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type PoliticoCreateManyPartidoInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    estadoId: string
    ideologia: string
    dataNascimento: Date | string
  }

  export type PoliticoUpdateWithoutPartidoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EstadoUpdateOneRequiredWithoutPoliticosNestedInput
    profissoes?: ProfissaoUpdateManyWithoutPoliticosNestedInput
    projetos?: ProjetoUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateWithoutPartidoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    profissoes?: ProfissaoUncheckedUpdateManyWithoutPoliticosNestedInput
    projetos?: ProjetoUncheckedUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateManyWithoutPartidoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjetoUpdateWithoutPartidosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    esfera?: EsferaUpdateOneRequiredWithoutProjetosNestedInput
    pauta?: PautaUpdateOneRequiredWithoutProjetosNestedInput
    direitosViolados?: DireitoVioladoUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateWithoutPartidosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    direitosViolados?: DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateManyWithoutPartidosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type PoliticoCreateManyEstadoInput = {
    id?: string
    nome: string
    foto?: string | null
    sexo: string
    raca: string
    religiao: string
    partidoId: string
    ideologia: string
    dataNascimento: Date | string
  }

  export type PoliticoUpdateWithoutEstadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    partido?: PartidoUpdateOneRequiredWithoutPoliticosNestedInput
    profissoes?: ProfissaoUpdateManyWithoutPoliticosNestedInput
    projetos?: ProjetoUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateWithoutEstadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    profissoes?: ProfissaoUncheckedUpdateManyWithoutPoliticosNestedInput
    projetos?: ProjetoUncheckedUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateManyWithoutEstadoInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjetoUpdateWithoutDireitosVioladosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    esfera?: EsferaUpdateOneRequiredWithoutProjetosNestedInput
    pauta?: PautaUpdateOneRequiredWithoutProjetosNestedInput
    ideologias?: IdeologiaUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateWithoutDireitosVioladosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    ideologias?: IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUncheckedUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateManyWithoutDireitosVioladosInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetoUpdateWithoutIdeologiasInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    esfera?: EsferaUpdateOneRequiredWithoutProjetosNestedInput
    pauta?: PautaUpdateOneRequiredWithoutProjetosNestedInput
    direitosViolados?: DireitoVioladoUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateWithoutIdeologiasInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    direitosViolados?: DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUncheckedUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateManyWithoutIdeologiasInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type PoliticoUpdateWithoutProfissoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: EstadoUpdateOneRequiredWithoutPoliticosNestedInput
    partido?: PartidoUpdateOneRequiredWithoutPoliticosNestedInput
    projetos?: ProjetoUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateWithoutProfissoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
    projetos?: ProjetoUncheckedUpdateManyWithoutAutoresNestedInput
  }

  export type PoliticoUncheckedUpdateManyWithoutProfissoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    foto?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: StringFieldUpdateOperationsInput | string
    raca?: StringFieldUpdateOperationsInput | string
    religiao?: StringFieldUpdateOperationsInput | string
    estadoId?: StringFieldUpdateOperationsInput | string
    partidoId?: StringFieldUpdateOperationsInput | string
    ideologia?: StringFieldUpdateOperationsInput | string
    dataNascimento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjetoCreateManyEsferaInput = {
    id?: string
    ano: string
    ementa: string
    pautaId: string
    numeroPl: string
    justificativa: string
  }

  export type ProjetoUpdateWithoutEsferaInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    pauta?: PautaUpdateOneRequiredWithoutProjetosNestedInput
    direitosViolados?: DireitoVioladoUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateWithoutEsferaInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    direitosViolados?: DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUncheckedUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateManyWithoutEsferaInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    pautaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }

  export type ProjetoCreateManyPautaInput = {
    id?: string
    ano: string
    ementa: string
    esferaId: string
    numeroPl: string
    justificativa: string
  }

  export type ProjetoUpdateWithoutPautaInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    esfera?: EsferaUpdateOneRequiredWithoutProjetosNestedInput
    direitosViolados?: DireitoVioladoUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateWithoutPautaInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
    direitosViolados?: DireitoVioladoUncheckedUpdateManyWithoutProjetosNestedInput
    ideologias?: IdeologiaUncheckedUpdateManyWithoutProjetosNestedInput
    partidos?: PartidoUncheckedUpdateManyWithoutProjetosNestedInput
    autores?: PoliticoUncheckedUpdateManyWithoutProjetosNestedInput
  }

  export type ProjetoUncheckedUpdateManyWithoutPautaInput = {
    id?: StringFieldUpdateOperationsInput | string
    ano?: StringFieldUpdateOperationsInput | string
    ementa?: StringFieldUpdateOperationsInput | string
    esferaId?: StringFieldUpdateOperationsInput | string
    numeroPl?: StringFieldUpdateOperationsInput | string
    justificativa?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}